//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Sobiens.Connectors.Services.SharePoint.SharePointWorkflowWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WorkflowSoap", Namespace="http://schemas.microsoft.com/sharepoint/soap/workflow/")]
    public partial class Workflow : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetToDosForItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTemplatesForItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartWorkflowOperationCompleted;
        
        private System.Threading.SendOrPostCallback AlterToDoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWorkflowDataForItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClaimReleaseTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWorkflowTaskDataOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Workflow() {
            this.Url = global::Sobiens.Connectors.Services.SharePoint.Properties.Settings.Default.Sobiens_Connectors_Services_SharePoint_SharePointWorkflowWS_Workflow;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetToDosForItemCompletedEventHandler GetToDosForItemCompleted;
        
        /// <remarks/>
        public event GetTemplatesForItemCompletedEventHandler GetTemplatesForItemCompleted;
        
        /// <remarks/>
        public event StartWorkflowCompletedEventHandler StartWorkflowCompleted;
        
        /// <remarks/>
        public event AlterToDoCompletedEventHandler AlterToDoCompleted;
        
        /// <remarks/>
        public event GetWorkflowDataForItemCompletedEventHandler GetWorkflowDataForItemCompleted;
        
        /// <remarks/>
        public event ClaimReleaseTaskCompletedEventHandler ClaimReleaseTaskCompleted;
        
        /// <remarks/>
        public event GetWorkflowTaskDataCompletedEventHandler GetWorkflowTaskDataCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/workflow/GetToDosForItem", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/workflow/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/workflow/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetToDosForItem(string item) {
            object[] results = this.Invoke("GetToDosForItem", new object[] {
                        item});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetToDosForItemAsync(string item) {
            this.GetToDosForItemAsync(item, null);
        }
        
        /// <remarks/>
        public void GetToDosForItemAsync(string item, object userState) {
            if ((this.GetToDosForItemOperationCompleted == null)) {
                this.GetToDosForItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetToDosForItemOperationCompleted);
            }
            this.InvokeAsync("GetToDosForItem", new object[] {
                        item}, this.GetToDosForItemOperationCompleted, userState);
        }
        
        private void OnGetToDosForItemOperationCompleted(object arg) {
            if ((this.GetToDosForItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetToDosForItemCompleted(this, new GetToDosForItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/workflow/GetTemplatesForItem", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/workflow/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/workflow/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetTemplatesForItem(string item) {
            object[] results = this.Invoke("GetTemplatesForItem", new object[] {
                        item});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetTemplatesForItemAsync(string item) {
            this.GetTemplatesForItemAsync(item, null);
        }
        
        /// <remarks/>
        public void GetTemplatesForItemAsync(string item, object userState) {
            if ((this.GetTemplatesForItemOperationCompleted == null)) {
                this.GetTemplatesForItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTemplatesForItemOperationCompleted);
            }
            this.InvokeAsync("GetTemplatesForItem", new object[] {
                        item}, this.GetTemplatesForItemOperationCompleted, userState);
        }
        
        private void OnGetTemplatesForItemOperationCompleted(object arg) {
            if ((this.GetTemplatesForItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTemplatesForItemCompleted(this, new GetTemplatesForItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/workflow/StartWorkflow", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/workflow/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/workflow/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode StartWorkflow(string item, System.Guid templateId, System.Xml.XmlNode workflowParameters) {
            object[] results = this.Invoke("StartWorkflow", new object[] {
                        item,
                        templateId,
                        workflowParameters});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void StartWorkflowAsync(string item, System.Guid templateId, System.Xml.XmlNode workflowParameters) {
            this.StartWorkflowAsync(item, templateId, workflowParameters, null);
        }
        
        /// <remarks/>
        public void StartWorkflowAsync(string item, System.Guid templateId, System.Xml.XmlNode workflowParameters, object userState) {
            if ((this.StartWorkflowOperationCompleted == null)) {
                this.StartWorkflowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartWorkflowOperationCompleted);
            }
            this.InvokeAsync("StartWorkflow", new object[] {
                        item,
                        templateId,
                        workflowParameters}, this.StartWorkflowOperationCompleted, userState);
        }
        
        private void OnStartWorkflowOperationCompleted(object arg) {
            if ((this.StartWorkflowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartWorkflowCompleted(this, new StartWorkflowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/workflow/AlterToDo", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/workflow/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/workflow/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode AlterToDo(string item, int todoId, System.Guid todoListId, System.Xml.XmlNode taskData) {
            object[] results = this.Invoke("AlterToDo", new object[] {
                        item,
                        todoId,
                        todoListId,
                        taskData});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void AlterToDoAsync(string item, int todoId, System.Guid todoListId, System.Xml.XmlNode taskData) {
            this.AlterToDoAsync(item, todoId, todoListId, taskData, null);
        }
        
        /// <remarks/>
        public void AlterToDoAsync(string item, int todoId, System.Guid todoListId, System.Xml.XmlNode taskData, object userState) {
            if ((this.AlterToDoOperationCompleted == null)) {
                this.AlterToDoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAlterToDoOperationCompleted);
            }
            this.InvokeAsync("AlterToDo", new object[] {
                        item,
                        todoId,
                        todoListId,
                        taskData}, this.AlterToDoOperationCompleted, userState);
        }
        
        private void OnAlterToDoOperationCompleted(object arg) {
            if ((this.AlterToDoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AlterToDoCompleted(this, new AlterToDoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/workflow/GetWorkflowDataForItem", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/workflow/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/workflow/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetWorkflowDataForItem(string item) {
            object[] results = this.Invoke("GetWorkflowDataForItem", new object[] {
                        item});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetWorkflowDataForItemAsync(string item) {
            this.GetWorkflowDataForItemAsync(item, null);
        }
        
        /// <remarks/>
        public void GetWorkflowDataForItemAsync(string item, object userState) {
            if ((this.GetWorkflowDataForItemOperationCompleted == null)) {
                this.GetWorkflowDataForItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWorkflowDataForItemOperationCompleted);
            }
            this.InvokeAsync("GetWorkflowDataForItem", new object[] {
                        item}, this.GetWorkflowDataForItemOperationCompleted, userState);
        }
        
        private void OnGetWorkflowDataForItemOperationCompleted(object arg) {
            if ((this.GetWorkflowDataForItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWorkflowDataForItemCompleted(this, new GetWorkflowDataForItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/workflow/ClaimReleaseTask", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/workflow/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/workflow/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ClaimReleaseTask(string item, int taskId, System.Guid listId, bool fClaim) {
            object[] results = this.Invoke("ClaimReleaseTask", new object[] {
                        item,
                        taskId,
                        listId,
                        fClaim});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ClaimReleaseTaskAsync(string item, int taskId, System.Guid listId, bool fClaim) {
            this.ClaimReleaseTaskAsync(item, taskId, listId, fClaim, null);
        }
        
        /// <remarks/>
        public void ClaimReleaseTaskAsync(string item, int taskId, System.Guid listId, bool fClaim, object userState) {
            if ((this.ClaimReleaseTaskOperationCompleted == null)) {
                this.ClaimReleaseTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClaimReleaseTaskOperationCompleted);
            }
            this.InvokeAsync("ClaimReleaseTask", new object[] {
                        item,
                        taskId,
                        listId,
                        fClaim}, this.ClaimReleaseTaskOperationCompleted, userState);
        }
        
        private void OnClaimReleaseTaskOperationCompleted(object arg) {
            if ((this.ClaimReleaseTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClaimReleaseTaskCompleted(this, new ClaimReleaseTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/workflow/GetWorkflowTaskData", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/workflow/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/workflow/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetWorkflowTaskData(string item, int taskId, System.Guid listId) {
            object[] results = this.Invoke("GetWorkflowTaskData", new object[] {
                        item,
                        taskId,
                        listId});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetWorkflowTaskDataAsync(string item, int taskId, System.Guid listId) {
            this.GetWorkflowTaskDataAsync(item, taskId, listId, null);
        }
        
        /// <remarks/>
        public void GetWorkflowTaskDataAsync(string item, int taskId, System.Guid listId, object userState) {
            if ((this.GetWorkflowTaskDataOperationCompleted == null)) {
                this.GetWorkflowTaskDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWorkflowTaskDataOperationCompleted);
            }
            this.InvokeAsync("GetWorkflowTaskData", new object[] {
                        item,
                        taskId,
                        listId}, this.GetWorkflowTaskDataOperationCompleted, userState);
        }
        
        private void OnGetWorkflowTaskDataOperationCompleted(object arg) {
            if ((this.GetWorkflowTaskDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWorkflowTaskDataCompleted(this, new GetWorkflowTaskDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetToDosForItemCompletedEventHandler(object sender, GetToDosForItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetToDosForItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetToDosForItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetTemplatesForItemCompletedEventHandler(object sender, GetTemplatesForItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTemplatesForItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTemplatesForItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void StartWorkflowCompletedEventHandler(object sender, StartWorkflowCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartWorkflowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartWorkflowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AlterToDoCompletedEventHandler(object sender, AlterToDoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AlterToDoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AlterToDoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetWorkflowDataForItemCompletedEventHandler(object sender, GetWorkflowDataForItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWorkflowDataForItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWorkflowDataForItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ClaimReleaseTaskCompletedEventHandler(object sender, ClaimReleaseTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ClaimReleaseTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ClaimReleaseTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetWorkflowTaskDataCompletedEventHandler(object sender, GetWorkflowTaskDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWorkflowTaskDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWorkflowTaskDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591