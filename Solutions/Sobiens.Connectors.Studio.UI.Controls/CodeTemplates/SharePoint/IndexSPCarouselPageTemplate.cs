// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Sobiens.Connectors.Studio.UI.Controls.CodeTemplates.SharePoint
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Sobiens.Connectors.Entities;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class IndexSPCarouselPageTemplate : IndexSPCarouselPageTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"
   <link rel=""stylesheet"" href=""//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css"">
   <script src=""https://code.jquery.com/jquery-1.12.4.js""></script>
   <script src=""https://code.jquery.com/ui/1.12.1/jquery-ui.js""></script>
   <link href = 'https://www.mieleistanbulservis.com/media/css/soby.ui.components.css' rel = 'stylesheet' type = 'text/css' media = 'all' />
   <script language='javascript' src='https://www.mieleistanbulservis.com/media/js/soby.service.js'></script>
   <script language='javascript' src='https://www.mieleistanbulservis.com/media/js/soby.spservice.js'></script>
   <script language='javascript' src='https://www.mieleistanbulservis.com/media/js/soby.ui.components.js'></script>

    ");
            
            #line 22 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"

        string fixedTableName = Sobiens.Connectors.Common.CodeWizardManager.FixTableNameForCode(List.Title);
        string gridContainerId = "soby_" + fixedTableName + "Div";
		string imageListServerRelativePath = "";
	
            
            #line default
            #line hidden
            this.Write("\r\n    <div id=\'");
            
            #line 28 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(gridContainerId));
            
            #line default
            #line hidden
            this.Write("\'></div>\r\n    <script>\r\n        $(function () {\r\n            SP.SOD.executeFunc(\'" +
                    "sp.js\', \'SP.ClientContext\', function() { \r\n\t\t\t\tsobyPopulateCarousel();\r\n        " +
                    "    });\r\n        });\r\n\r\n\t\tfunction sobyPopulateCarousel(){\r\n\t\t\tvar ");
            
            #line 37 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedTableName));
            
            #line default
            #line hidden
            this.Write("DataSourceBuilder = new soby_SPCSOMBuilder();\r\n\t\t\t");
            
            #line 38 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedTableName));
            
            #line default
            #line hidden
            this.Write("DataSourceBuilder.ListTitle = \"");
            
            #line 38 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(List.Title));
            
            #line default
            #line hidden
            this.Write("\";\r\n\t\t\t");
            
            #line 39 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedTableName));
            
            #line default
            #line hidden
            this.Write("DataSourceBuilder.SiteUrl = \"");
            
            #line 39 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(List.WebUrl));
            
            #line default
            #line hidden
            this.Write("\";\r\n\r\n\t\t\t");
            
            #line 41 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedTableName));
            
            #line default
            #line hidden
            this.Write("DataSourceBuilder.Filters = new SobyFilters(false);\r\n\t\t\tvar ");
            
            #line 42 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedTableName));
            
            #line default
            #line hidden
            this.Write("Service = new soby_SharePointService(");
            
            #line 42 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedTableName));
            
            #line default
            #line hidden
            this.Write("DataSourceBuilder);\r\n\t\t\t");
            
            #line 43 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedTableName));
            
            #line default
            #line hidden
            this.Write("Service.Transport.Read = new soby_TransportRequest(\"\", \"json\", \"application/json;" +
                    " charset=utf-8\", \"GET\");\r\n\t\t\t");
            
            #line 44 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"

			foreach(Field field in Fields){
				if(field.FromBaseType == true && field.Name != "Title" && field.Name != "Name" && field.Name != "ID" && field.Name != "FileLeafRef")
					continue;

				string fieldTypeString = Sobiens.Connectors.Common.CodeWizardManager.GetJsFieldTypeAsString(field);
				string fieldEditable = (field.ReadOnly == true?"false":"true");

				if(field.Type == FieldTypes.Lookup){
					string navigationPropertyName = Sobiens.Connectors.Common.CodeWizardManager.GetFieldNavigationPropertyName(List, field);
					Sobiens.Connectors.Entities.Field spField = ((Sobiens.Connectors.Entities.Field)field);
					string referenceFieldTypeString = "SobyFieldTypes.Text"; //Sobiens.Connectors.Common.CodeWizardManager.GetJsFieldTypeAsStringByFieldName((List<Folder>)Tables, spField.List, spField.ReferenceFieldName);
				
            
            #line default
            #line hidden
            this.Write("\t\t\t");
            
            #line 57 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedTableName));
            
            #line default
            #line hidden
            this.Write("DataSourceBuilder.AddSchemaField(\"");
            
            #line 57 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write("\", SobyFieldTypes.Lookup, { ModelName: \"");
            
            #line 57 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(navigationPropertyName));
            
            #line default
            #line hidden
            this.Write("\", ValueFieldType: ");
            
            #line 57 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(referenceFieldTypeString));
            
            #line default
            #line hidden
            this.Write(", ValueFieldName: \"");
            
            #line 57 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(((Sobiens.Connectors.Entities.Field)field).Title));
            
            #line default
            #line hidden
            this.Write("\", TitleFieldName: \"");
            
            #line 57 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.ShowField));
            
            #line default
            #line hidden
            this.Write("\", ReadTransport: new soby_TransportRequest(\"/");
            
            #line 57 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.List));
            
            #line default
            #line hidden
            this.Write("List\", \"json\", \"application/json; charset=utf-8\", \"GET\") });\r\n\t\t\t\t");
            
            #line 58 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"

				}
				else{
				
            
            #line default
            #line hidden
            this.Write("\t\t\t");
            
            #line 62 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedTableName));
            
            #line default
            #line hidden
            this.Write("DataSourceBuilder.AddSchemaField(\"");
            
            #line 62 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 62 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fieldTypeString));
            
            #line default
            #line hidden
            this.Write(", null);\r\n\t\t\t");
            
            #line 63 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"

				}
			}

			if(ImageField.Name == "FileLeafRef"){
				imageListServerRelativePath = List.ServerRelativePath + "/";
			}
			
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\tvar carousel = new soby_Carousel(\"#");
            
            #line 72 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(gridContainerId));
            
            #line default
            #line hidden
            this.Write("\", \"Carousel\", ");
            
            #line 72 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedTableName));
            
            #line default
            #line hidden
            this.Write("Service, \"There is no record found.\", \"");
            
            #line 72 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ImageField.Name));
            
            #line default
            #line hidden
            this.Write("\", \"");
            
            #line 72 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CaptionField.Name));
            
            #line default
            #line hidden
            this.Write("\", \"");
            
            #line 72 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ContentField.Name));
            
            #line default
            #line hidden
            this.Write("\", false);\r\n\t\t\tcarousel.MaxWidth = 600;\r\n\t\t\tcarousel.ItemDataBound = function (ce" +
                    "llIndex, dataItem) {\r\n\t\t\t\tvar container = $(\"<div></div>\");\r\n\t\t\t\tvar imageSrc = " +
                    "\"");
            
            #line 76 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(imageListServerRelativePath));
            
            #line default
            #line hidden
            this.Write(@""" + dataItem[this.ImageFieldName];
				var caption = dataItem[this.CaptionFieldName];
				var image = $(""<img alt='...' class='carouselimage'>"");
				image.attr(""src"", imageSrc);
				container.append(image);
				var captionDiv = $(""<div class='carousel-caption'></div>"");
				var h3 = $(""<h3></h3>"");
				h3.html(caption);
				captionDiv.append(h3);
				container.append(captionDiv);
				return container.html();
			};
			carousel.Initialize(true);

		}
    </script>

");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\Projects\GitHub\Sobiens-Connectors\Solutions\Sobiens.Connectors.Studio.UI.Controls\CodeTemplates\SharePoint\IndexSPCarouselPageTemplate.tt"

private global::Sobiens.Connectors.Entities.Folder _DatabaseField;

/// <summary>
/// Access the Database parameter of the template.
/// </summary>
private global::Sobiens.Connectors.Entities.Folder Database
{
    get
    {
        return this._DatabaseField;
    }
}

private global::Sobiens.Connectors.Entities.Field _ImageFieldField;

/// <summary>
/// Access the ImageField parameter of the template.
/// </summary>
private global::Sobiens.Connectors.Entities.Field ImageField
{
    get
    {
        return this._ImageFieldField;
    }
}

private global::Sobiens.Connectors.Entities.Field _CaptionFieldField;

/// <summary>
/// Access the CaptionField parameter of the template.
/// </summary>
private global::Sobiens.Connectors.Entities.Field CaptionField
{
    get
    {
        return this._CaptionFieldField;
    }
}

private global::Sobiens.Connectors.Entities.Field _ContentFieldField;

/// <summary>
/// Access the ContentField parameter of the template.
/// </summary>
private global::Sobiens.Connectors.Entities.Field ContentField
{
    get
    {
        return this._ContentFieldField;
    }
}

private global::Sobiens.Connectors.Entities.SharePoint.SPList _ListField;

/// <summary>
/// Access the List parameter of the template.
/// </summary>
private global::Sobiens.Connectors.Entities.SharePoint.SPList List
{
    get
    {
        return this._ListField;
    }
}

private global::Sobiens.Connectors.Entities.FieldCollection _FieldsField;

/// <summary>
/// Access the Fields parameter of the template.
/// </summary>
private global::Sobiens.Connectors.Entities.FieldCollection Fields
{
    get
    {
        return this._FieldsField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool DatabaseValueAcquired = false;
if (this.Session.ContainsKey("Database"))
{
    this._DatabaseField = ((global::Sobiens.Connectors.Entities.Folder)(this.Session["Database"]));
    DatabaseValueAcquired = true;
}
if ((DatabaseValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Database");
    if ((data != null))
    {
        this._DatabaseField = ((global::Sobiens.Connectors.Entities.Folder)(data));
    }
}
bool ImageFieldValueAcquired = false;
if (this.Session.ContainsKey("ImageField"))
{
    this._ImageFieldField = ((global::Sobiens.Connectors.Entities.Field)(this.Session["ImageField"]));
    ImageFieldValueAcquired = true;
}
if ((ImageFieldValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ImageField");
    if ((data != null))
    {
        this._ImageFieldField = ((global::Sobiens.Connectors.Entities.Field)(data));
    }
}
bool CaptionFieldValueAcquired = false;
if (this.Session.ContainsKey("CaptionField"))
{
    this._CaptionFieldField = ((global::Sobiens.Connectors.Entities.Field)(this.Session["CaptionField"]));
    CaptionFieldValueAcquired = true;
}
if ((CaptionFieldValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("CaptionField");
    if ((data != null))
    {
        this._CaptionFieldField = ((global::Sobiens.Connectors.Entities.Field)(data));
    }
}
bool ContentFieldValueAcquired = false;
if (this.Session.ContainsKey("ContentField"))
{
    this._ContentFieldField = ((global::Sobiens.Connectors.Entities.Field)(this.Session["ContentField"]));
    ContentFieldValueAcquired = true;
}
if ((ContentFieldValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ContentField");
    if ((data != null))
    {
        this._ContentFieldField = ((global::Sobiens.Connectors.Entities.Field)(data));
    }
}
bool ListValueAcquired = false;
if (this.Session.ContainsKey("List"))
{
    this._ListField = ((global::Sobiens.Connectors.Entities.SharePoint.SPList)(this.Session["List"]));
    ListValueAcquired = true;
}
if ((ListValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("List");
    if ((data != null))
    {
        this._ListField = ((global::Sobiens.Connectors.Entities.SharePoint.SPList)(data));
    }
}
bool FieldsValueAcquired = false;
if (this.Session.ContainsKey("Fields"))
{
    this._FieldsField = ((global::Sobiens.Connectors.Entities.FieldCollection)(this.Session["Fields"]));
    FieldsValueAcquired = true;
}
if ((FieldsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Fields");
    if ((data != null))
    {
        this._FieldsField = ((global::Sobiens.Connectors.Entities.FieldCollection)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class IndexSPCarouselPageTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
