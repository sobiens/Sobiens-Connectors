<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Sobiens.Connectors.Entities" #>

<#@ parameter type="System.Object" name="Tables" #>
using SobyGrid_WebAPIExample.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Http;
using System.Web.OData.Builder;
using System.Web.OData.Extensions;

namespace SobyGrid_WebAPIExample
{
    public static class WebApiConfig
    {
        public static void Register(HttpConfiguration config)
        {
            // Attribute routing.
            config.MapHttpAttributeRoutes();

            // Web API configuration and services
            config.Select();
            config.Filter();
            config.Expand();
            config.Count();
            config.OrderBy();
            config.MaxTop(10000);

            // New code:
            ODataModelBuilder builder = new ODataConventionModelBuilder();
			<#
			List<Folder> tables = (List<Folder>)Tables;
			foreach (Folder _table in tables)
			{
            Sobiens.Connectors.Entities.SQLServer.SQLTable table = (Sobiens.Connectors.Entities.SQLServer.SQLTable)_table;
			#>
            builder.EntitySet<<#= table.Title #>Record>("<#= table.Title #>List");

            var functionDelete<#= table.Title #> = builder.Function("Delete<#= table.Title #>List");
            var functionUpdate<#= table.Title #> = builder.Function("Update<#= table.Title #>List");
            var functionGet<#= table.Title #> = builder.Function("Get<#= table.Title #>List");

            <#
            for(int i=0;i<table.Fields.Count;i++){
			    if(table.Fields[i].IsPrimary == false)
				    continue;
			    string fieldTypeString = "string";
			    if (table.Fields[i].Type == FieldTypes.Boolean)
				    fieldTypeString = "bool";
			    else if (table.Fields[i].Type == FieldTypes.Number)
				    fieldTypeString = "int";
			    else if (table.Fields[i].Type == FieldTypes.Lookup)
				    fieldTypeString = "int";
			    string keyName = "key";
                if(i>0)
                    keyName = "key" + (i-1).ToString();
            #>
                functionDelete<#= table.Title #>.Parameter<<#= fieldTypeString #>>("<#= keyName #>");
                functionUpdate<#= table.Title #>.Parameter<<#= fieldTypeString #>>("<#= keyName #>");
                functionGet<#= table.Title #>.Parameter<<#= fieldTypeString #>>("<#= keyName #>");
            <# } #>

            functionDelete<#= table.Title #>.ReturnsCollectionFromEntitySet<<#= table.Title #>Record>("<#= table.Title #>List");
            functionUpdate<#= table.Title #>.ReturnsCollectionFromEntitySet<<#= table.Title #>Record>("<#= table.Title #>List");
            functionGet<#= table.Title #>.ReturnsCollectionFromEntitySet<<#= table.Title #>Record>("<#= table.Title #>List");

			<#}#>

            config.MapODataServiceRoute(
                routeName: "ODataRoute",
                routePrefix: "odataapi",
                model: builder.GetEdmModel());

            config.Routes.MapHttpRoute(
                name: "DefaultApi",
                routeTemplate: "api/{controller}/{id}",
                defaults: new { id = RouteParameter.Optional });
        }
    }
}
