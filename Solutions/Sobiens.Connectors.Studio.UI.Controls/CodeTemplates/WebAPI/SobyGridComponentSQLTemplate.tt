<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Sobiens.Connectors.Entities" #>
<#@ parameter type="System.String" name="TableName" #>
<#@ parameter type="Sobiens.Connectors.Entities.FieldCollection" name="Fields" #>
<#@ parameter type="System.Object" name="Tables" #>
<#@ parameter type="System.String" name="GridName" #>
<#@ parameter type="System.String" name="GridTitle" #>
<#@ parameter type="System.String" name="GridAltTitle" #>

		<#
    Sobiens.Connectors.Entities.SQLServer.SQLTable sqlTable = (Sobiens.Connectors.Entities.SQLServer.SQLTable)((List<Folder>)Tables).Where(t=>t.Title == TableName).First();
	    string fixedTableName = Sobiens.Connectors.Common.CodeWizardManager.FixTableNameForCode(TableName);

		string serviceUrl = "soby_GetApiServiceUrl()";
		int primaryFieldCount = 0;
		foreach(Field field in Fields){
			if(field.IsPrimary == true){
				serviceUrl = "soby_GetODataServiceUrl()";
				primaryFieldCount++;
			}
		}
		#>

        var <#= fixedTableName #>DataSourceBuilder = new soby_WSBuilder();
        <#= fixedTableName #>DataSourceBuilder.Filters = new SobyFilters(false);
        var <#= fixedTableName #>Service = new soby_WebServiceService(<#= fixedTableName #>DataSourceBuilder);
        var <#= GridName #> = new soby_WebGrid("#soby_<#= fixedTableName #>Div", "<#= GridTitle #>", <#= fixedTableName #>Service, "There is no record found.");
        <#= GridName #>.AltTitle = "<#= GridAltTitle #>";
        <#= GridName #>.ImagesFolderUrl = "/media/images";
		<# if(primaryFieldCount != 1) { #>
			<#= GridName #>.IsEditable = false;
		<# } #>
		<# if(primaryFieldCount == 0) { #>
			<#= GridName #>.IsSelectable = false;
		<# } #>
		<#
			string queryStringParameters = "";
			for(int i=0;i<Fields.Count;i++){
				Field field = Fields[i];
				if(field.IsPrimary == false)
					continue;

				string jsFieldQueryStringKeyPrefixSuffix = Sobiens.Connectors.Common.CodeWizardManager.GetJsFieldQueryStringKeyPrefixSuffix(field);
				queryStringParameters += ",key" + (i>0?(i-1).ToString():"") + "= " + jsFieldQueryStringKeyPrefixSuffix + "#key" + (i>0?(i-1).ToString():"") + "#" + jsFieldQueryStringKeyPrefixSuffix;
			}
		if(queryStringParameters.Length>0)
			queryStringParameters = queryStringParameters.Substring(1);
		#>
        <#= fixedTableName #>Service.Transport.Read = new soby_TransportRequest(<#= serviceUrl #> + "/<#= fixedTableName #>List", "json", "application/json; charset=utf-8", "GET");
        <#= fixedTableName #>Service.Transport.Add = new soby_TransportRequest(<#= serviceUrl #> + "/<#= fixedTableName #>List", "json", "application/json; charset=utf-8", "POST");
        <#= fixedTableName #>Service.Transport.Update = new soby_TransportRequest(<#= serviceUrl #> + "/Update<#= fixedTableName #>List(<#= queryStringParameters #>)", "json", "application/json; charset=utf-8", "PUT");
        <#= fixedTableName #>Service.Transport.Delete = new soby_TransportRequest(<#= serviceUrl #> + "/Delete<#= fixedTableName #>List(<#= queryStringParameters #>)", "json", "application/json; charset=utf-8", "DELETE");

		<# for(int i=0;i<Fields.Count;i++){
			Field field = Fields[i];
			if(field.IsPrimary == false)
				continue;

			string parameterName = "#key" + (i>0?(i-1).ToString():"") + "#";
		#>
        <#= GridName #>.AddKeyField("<#= field.Name #>", "<#= parameterName #>");
		<# } #>


		<#
		foreach(Field field in Fields){
            string fieldTypeString = Sobiens.Connectors.Common.CodeWizardManager.GetJsFieldTypeAsString(field);

			string fieldEditable = (field.ReadOnly == true?"false":"true");

			if(field.Type == FieldTypes.Lookup){
			    string navigationPropertyName = Sobiens.Connectors.Common.CodeWizardManager.GetFieldNavigationPropertyName(sqlTable, field);
				Sobiens.Connectors.Entities.SQLServer.SQLField sqlField = ((Sobiens.Connectors.Entities.SQLServer.SQLField)field);
				string referenceFieldTypeString = Sobiens.Connectors.Common.CodeWizardManager.GetJsFieldTypeAsStringByFieldName((List<Folder>)Tables, sqlField.List, sqlField.ReferenceFieldName);
			#>
		<#= fixedTableName #>DataSourceBuilder.AddSchemaField("<#= field.Name #>", SobyFieldTypes.Lookup, { ModelName: "<#= navigationPropertyName #>", ValueFieldType: <#= referenceFieldTypeString #>, ValueFieldName: "<#= ((Sobiens.Connectors.Entities.SQLServer.SQLField)field).ReferenceFieldName #>", TitleFieldName: "<#= field.ShowField#>", ReadTransport: new soby_TransportRequest(<#= serviceUrl #> + "/<#= field.List #>List", "json", "application/json; charset=utf-8", "GET") });
		<#= GridName #>.AddColumn("<#= field.Name #>", "<#= field.List #>Record", SobyShowFieldsOn.All, function (item) {
			if(item.<#= navigationPropertyName #> != null)
				return item.<#= navigationPropertyName #>.<#= field.ShowField#>;
			else
				return "";
		}, null, true, true, <#= fieldEditable #>, null);
			<#
			}
			else{
			#>
		<#= fixedTableName #>DataSourceBuilder.AddSchemaField("<#= field.Name #>", <#= fieldTypeString #>, null);
		<#= GridName #>.AddColumn("<#= field.Name #>", "<#= field.Name #>", SobyShowFieldsOn.All, null, null, true, true, <#= fieldEditable #>, null);
		<#
			}
		}
		#>
