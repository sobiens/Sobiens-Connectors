<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Sobiens.Connectors.Entities" #>

<#@ parameter type="System.String" name="TableName" #>
<#@ parameter type="Sobiens.Connectors.Entities.FieldCollection" name="Fields" #>

using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;


namespace SobyGrid_WebAPIExample.Models
{
	[Table("<#= TableName #>")]
    public class <#= TableName #>Record
    {
		<#
		int keyColumnOrder = 0;
		foreach (Field field in Fields)
        {
			string fieldTypeString = "string";
			switch (((Sobiens.Connectors.Entities.SQLServer.SQLField)field).SQLFieldTypeName)
            {
                case "int":
			        fieldTypeString = "int";
                    break;
                case "bigint":
			        fieldTypeString = "long";
                    break;
                case "float":
                case "decimal":
                case "numeric":
			        fieldTypeString = "decimal";
                    break;
                case "smallint":
			        fieldTypeString = "Int16";
                    break;
                case "tinyint":
			        fieldTypeString = "Byte";
                    break;
                case "bit":
			        fieldTypeString = "bool";
                    break;
                case "date":
                case "datetime":
                case "datetime2":
                case "smalldatetime":
                    fieldTypeString = "DateTime";
                    break;
            }


		#>
		    <# if (field.Required == true){ #>[Required]<# } #>
		    <# if (field.IsPrimary == true){
		    keyColumnOrder++;
		     #>
		    [Key]
		    [Column(Order=<#= keyColumnOrder #>)]
		    <# }#>

            <# if(field.Type == FieldTypes.Lookup){#>
                // Foreign Key
		        [ForeignKey("<#= field.List #>Record")]
		        public <#= fieldTypeString #> <#= field.Name #> { get; set; }
		        // Navigation property
		        public <#= field.List #>Record <#= field.List #>Record { get; set; }
            <#
            }
            else{
            #>
    	        public <#= fieldTypeString #> <#= field.Name #>{ get; set; }
            <#
            }
            #>
		
        <#}#>
    }
}