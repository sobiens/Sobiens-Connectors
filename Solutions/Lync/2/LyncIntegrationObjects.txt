OBJECT Table 18 Customer
{
  OBJECT-PROPERTIES
  {
    Date=10/10/12;
    Time=[ 2:42:30 AM];
    Modified=Yes;
    Version List=NAVW17.00,Lync;
  }
  PROPERTIES
  {
    Permissions=TableData 21=r;
    DataCaptionFields=No.,Name;
    OnInsert=BEGIN
               IF "No." = '' THEN BEGIN
                 SalesSetup.GET;
                 SalesSetup.TESTFIELD("Customer Nos.");
                 NoSeriesMgt.InitSeries(SalesSetup."Customer Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;
               IF "Invoice Disc. Code" = '' THEN
                 "Invoice Disc. Code" := "No.";

               IF NOT InsertFromContact THEN
                 UpdateContFromCust.OnInsert(Rec);

               DimMgt.UpdateDefaultDim(
                 DATABASE::Customer,"No.",
                 "Global Dimension 1 Code","Global Dimension 2 Code");
             END;

    OnModify=BEGIN
               "Last Date Modified" := TODAY;

               IF (Name <> xRec.Name) OR
                  ("Search Name" <> xRec."Search Name") OR
                  ("Name 2" <> xRec."Name 2") OR
                  (Address <> xRec.Address) OR
                  ("Address 2" <> xRec."Address 2") OR
                  (City <> xRec.City) OR
                  ("Phone No." <> xRec."Phone No.") OR
                  ("Telex No." <> xRec."Telex No.") OR
                  ("Territory Code" <> xRec."Territory Code") OR
                  ("Currency Code" <> xRec."Currency Code") OR
                  ("Language Code" <> xRec."Language Code") OR
                  ("Salesperson Code" <> xRec."Salesperson Code") OR
                  ("Country/Region Code" <> xRec."Country/Region Code") OR
                  ("Fax No." <> xRec."Fax No.") OR
                  ("Telex Answer Back" <> xRec."Telex Answer Back") OR
                  ("VAT Registration No." <> xRec."VAT Registration No.") OR
                  ("Post Code" <> xRec."Post Code") OR
                  (County <> xRec.County) OR
                  ("E-Mail" <> xRec."E-Mail") OR
                  ("Home Page" <> xRec."Home Page") OR
                  (Contact <> xRec.Contact)
               THEN BEGIN
                 MODIFY;
                 UpdateContFromCust.OnModify(Rec);
               END;
             END;

    OnDelete=VAR
               CampaignTargetGr@1000 : Record 7030;
               ContactBusRel@1001 : Record 5054;
               Job@1004 : Record 167;
               DOPaymentCreditCard@1005 : Record 827;
               CampaignTargetGrMgmt@1002 : Codeunit 7030;
               StdCustSalesCode@1003 : Record 172;
             BEGIN
               DOPaymentCreditCard.DeleteByCustomer(Rec);

               ServiceItem.SETRANGE("Customer No.","No.");
               IF ServiceItem.FINDFIRST THEN
                 IF CONFIRM(
                      Text008,
                      FALSE,
                      TABLECAPTION,
                      "No.",
                      ServiceItem.FIELDCAPTION("Customer No."))
                 THEN
                   ServiceItem.MODIFYALL("Customer No.",'')
                 ELSE
                   ERROR(Text009);

               Job.SETRANGE("Bill-to Customer No.","No.");
               IF Job.FINDFIRST THEN
                 ERROR(Text015,TABLECAPTION,"No.",Job.TABLECAPTION);

               MoveEntries.MoveCustEntries(Rec);

               CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::Customer);
               CommentLine.SETRANGE("No.","No.");
               CommentLine.DELETEALL;

               CustBankAcc.SETRANGE("Customer No.","No.");
               CustBankAcc.DELETEALL;

               ShipToAddr.SETRANGE("Customer No.","No.");
               ShipToAddr.DELETEALL;

               SalesPrice.SETRANGE("Sales Type",SalesPrice."Sales Type"::Customer);
               SalesPrice.SETRANGE("Sales Code","No.");
               SalesPrice.DELETEALL;

               SalesLineDisc.SETRANGE("Sales Type",SalesLineDisc."Sales Type"::Customer);
               SalesLineDisc.SETRANGE("Sales Code","No.");
               SalesLineDisc.DELETEALL;

               SalesPrepmtPct.SETCURRENTKEY("Sales Type","Sales Code");
               SalesPrepmtPct.SETRANGE("Sales Type",SalesPrepmtPct."Sales Type"::Customer);
               SalesPrepmtPct.SETRANGE("Sales Code","No.");
               SalesPrepmtPct.DELETEALL;

               StdCustSalesCode.SETRANGE("Customer No.","No.");
               StdCustSalesCode.DELETEALL(TRUE);

               ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
               ItemCrossReference.SETRANGE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Customer);
               ItemCrossReference.SETRANGE("Cross-Reference Type No.","No.");
               ItemCrossReference.DELETEALL;

               SalesOrderLine.SETCURRENTKEY("Document Type","Bill-to Customer No.");
               SalesOrderLine.SETFILTER(
                 "Document Type",'%1|%2',
                 SalesOrderLine."Document Type"::Order,
                 SalesOrderLine."Document Type"::"Return Order");
               SalesOrderLine.SETRANGE("Bill-to Customer No.","No.");
               IF SalesOrderLine.FINDFIRST THEN
                 ERROR(
                   Text000,
                   TABLECAPTION,"No.",SalesOrderLine."Document Type");

               SalesOrderLine.SETRANGE("Bill-to Customer No.");
               SalesOrderLine.SETRANGE("Sell-to Customer No.","No.");
               IF SalesOrderLine.FINDFIRST THEN
                 ERROR(
                   Text000,
                   TABLECAPTION,"No.",SalesOrderLine."Document Type");

               CampaignTargetGr.SETRANGE("No.","No.");
               CampaignTargetGr.SETRANGE(Type,CampaignTargetGr.Type::Customer);
               IF CampaignTargetGr.FIND('-') THEN BEGIN
                 ContactBusRel.SETRANGE("Link to Table",ContactBusRel."Link to Table"::Customer);
                 ContactBusRel.SETRANGE("No.","No.");
                 ContactBusRel.FINDFIRST;
                 REPEAT
                   CampaignTargetGrMgmt.ConverttoContact(Rec,ContactBusRel."Contact No.");
                 UNTIL CampaignTargetGr.NEXT = 0;
               END;

               ServContract.SETFILTER(Status,'<>%1',ServContract.Status::Canceled);
               ServContract.SETRANGE("Customer No.","No.");
               IF ServContract.FINDFIRST THEN
                 ERROR(
                   Text007,
                   TABLECAPTION,"No.");

               ServContract.SETRANGE(Status);
               ServContract.MODIFYALL("Customer No.",'');

               ServContract.SETFILTER(Status,'<>%1',ServContract.Status::Canceled);
               ServContract.SETRANGE("Bill-to Customer No.","No.");
               IF ServContract.FINDFIRST THEN
                 ERROR(
                   Text007,
                   TABLECAPTION,"No.");

               ServContract.SETRANGE(Status);
               ServContract.MODIFYALL("Bill-to Customer No.",'');

               ServHeader.SETCURRENTKEY("Customer No.","Order Date");
               ServHeader.SETRANGE("Customer No.","No.");
               IF ServHeader.FINDFIRST THEN
                 ERROR(
                   Text013,
                   TABLECAPTION,"No.",ServHeader."Document Type");

               ServHeader.SETRANGE("Bill-to Customer No.");
               IF ServHeader.FINDFIRST THEN
                 ERROR(
                   Text013,
                   TABLECAPTION,"No.",ServHeader."Document Type");

               UpdateContFromCust.OnDelete(Rec);

               DimMgt.DeleteDefaultDim(DATABASE::Customer,"No.");
             END;

    OnRename=BEGIN
               "Last Date Modified" := TODAY;
             END;

    CaptionML=ENU=Customer;
    LookupPageID=Page22;
    DrillDownPageID=Page22;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;AltSearchField=Search Name;
                                                   OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  NoSeriesMgt.TestManual(SalesSetup."Customer Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                                IF "Invoice Disc. Code" = '' THEN
                                                                  "Invoice Disc. Code" := "No.";
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Name                ;Text50        ;OnValidate=BEGIN
                                                                IF ("Search Name" = UPPERCASE(xRec.Name)) OR ("Search Name" = '') THEN
                                                                  "Search Name" := Name;
                                                              END;

                                                   CaptionML=ENU=Name }
    { 3   ;   ;Search Name         ;Code50        ;CaptionML=ENU=Search Name }
    { 4   ;   ;Name 2              ;Text50        ;CaptionML=ENU=Name 2 }
    { 5   ;   ;Address             ;Text50        ;CaptionML=ENU=Address }
    { 6   ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2 }
    { 7   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=City }
    { 8   ;   ;Contact             ;Text50        ;OnValidate=BEGIN
                                                                IF RMSetup.GET THEN
                                                                  IF RMSetup."Bus. Rel. Code for Customers" <> '' THEN
                                                                    IF (xRec.Contact = '') AND (xRec."Primary Contact No." = '') THEN BEGIN
                                                                      MODIFY;
                                                                      UpdateContFromCust.OnModify(Rec);
                                                                      UpdateContFromCust.InsertNewContactPerson(Rec,FALSE);
                                                                      MODIFY(TRUE);
                                                                    END
                                                              END;

                                                   CaptionML=ENU=Contact }
    { 9   ;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. }
    { 10  ;   ;Telex No.           ;Text20        ;CaptionML=ENU=Telex No. }
    { 14  ;   ;Our Account No.     ;Text20        ;CaptionML=ENU=Our Account No. }
    { 15  ;   ;Territory Code      ;Code10        ;TableRelation=Territory;
                                                   CaptionML=ENU=Territory Code }
    { 16  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 17  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Global Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 18  ;   ;Chain Name          ;Code10        ;CaptionML=ENU=Chain Name }
    { 19  ;   ;Budgeted Amount     ;Decimal       ;CaptionML=ENU=Budgeted Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 20  ;   ;Credit Limit (LCY)  ;Decimal       ;CaptionML=ENU=Credit Limit (LCY);
                                                   AutoFormatType=1 }
    { 21  ;   ;Customer Posting Group;Code10      ;TableRelation="Customer Posting Group";
                                                   CaptionML=ENU=Customer Posting Group }
    { 22  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code }
    { 23  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   CaptionML=ENU=Customer Price Group }
    { 24  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=ENU=Language Code }
    { 26  ;   ;Statistics Group    ;Integer       ;CaptionML=ENU=Statistics Group }
    { 27  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   CaptionML=ENU=Payment Terms Code }
    { 28  ;   ;Fin. Charge Terms Code;Code10      ;TableRelation="Finance Charge Terms";
                                                   CaptionML=ENU=Fin. Charge Terms Code }
    { 29  ;   ;Salesperson Code    ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=ENU=Salesperson Code }
    { 30  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   CaptionML=ENU=Shipment Method Code }
    { 31  ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                IF "Shipping Agent Code" <> xRec."Shipping Agent Code" THEN
                                                                  VALIDATE("Shipping Agent Service Code",'');
                                                              END;

                                                   CaptionML=ENU=Shipping Agent Code }
    { 32  ;   ;Place of Export     ;Code20        ;CaptionML=ENU=Place of Export }
    { 33  ;   ;Invoice Disc. Code  ;Code20        ;TableRelation=Customer;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Invoice Disc. Code }
    { 34  ;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   CaptionML=ENU=Customer Disc. Group }
    { 35  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                IF ("Country/Region Code" <> xRec."Country/Region Code") AND (xRec."Country/Region Code" <> '') THEN
                                                                  PostCode.ClearFields(City,"Post Code",County);
                                                              END;

                                                   CaptionML=ENU=Country/Region Code }
    { 36  ;   ;Collection Method   ;Code20        ;CaptionML=ENU=Collection Method }
    { 37  ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 38  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE (Table Name=CONST(Customer),
                                                                                           No.=FIELD(No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 39  ;   ;Blocked             ;Option        ;CaptionML=ENU=Blocked;
                                                   OptionCaptionML=ENU=" ,Ship,Invoice,All";
                                                   OptionString=[ ,Ship,Invoice,All] }
    { 40  ;   ;Invoice Copies      ;Integer       ;CaptionML=ENU=Invoice Copies }
    { 41  ;   ;Last Statement No.  ;Integer       ;CaptionML=ENU=Last Statement No. }
    { 42  ;   ;Print Statements    ;Boolean       ;CaptionML=ENU=Print Statements }
    { 45  ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=ENU=Bill-to Customer No. }
    { 46  ;   ;Priority            ;Integer       ;CaptionML=ENU=Priority }
    { 47  ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   CaptionML=ENU=Payment Method Code }
    { 54  ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=No }
    { 55  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 56  ;   ;Global Dimension 1 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=ENU=Global Dimension 1 Filter;
                                                   CaptionClass='1,3,1' }
    { 57  ;   ;Global Dimension 2 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Global Dimension 2 Filter;
                                                   CaptionClass='1,3,2' }
    { 58  ;   ;Balance             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Customer No.=FIELD(No.),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Balance;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 59  ;   ;Balance (LCY)       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Balance (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 60  ;   ;Net Change          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Customer No.=FIELD(No.),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Net Change;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Net Change (LCY)    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Net Change (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 62  ;   ;Sales (LCY)         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Cust. Ledger Entry"."Sales (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                             Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                             Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                             Posting Date=FIELD(Date Filter),
                                                                                                             Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Sales (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 63  ;   ;Profit (LCY)        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Cust. Ledger Entry"."Profit (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                              Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                              Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Profit (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 64  ;   ;Inv. Discounts (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Cust. Ledger Entry"."Inv. Discount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                     Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                     Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                     Posting Date=FIELD(Date Filter),
                                                                                                                     Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Inv. Discounts (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 65  ;   ;Pmt. Discounts (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                       Entry Type=FILTER(Payment Discount..'Payment Discount (VAT Adjustment)'),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Pmt. Discounts (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 66  ;   ;Balance Due         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Customer No.=FIELD(No.),
                                                                                                              Posting Date=FIELD(UPPERLIMIT(Date Filter)),
                                                                                                              Initial Entry Due Date=FIELD(Date Filter),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Balance Due;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 67  ;   ;Balance Due (LCY)   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                      Posting Date=FIELD(UPPERLIMIT(Date Filter)),
                                                                                                                      Initial Entry Due Date=FIELD(Date Filter),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Balance Due (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 69  ;   ;Payments            ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Payment),
                                                                                                               Entry Type=CONST(Initial Entry),
                                                                                                               Customer No.=FIELD(No.),
                                                                                                               Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                               Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                               Posting Date=FIELD(Date Filter),
                                                                                                               Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Payments;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 70  ;   ;Invoice Amounts     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Invoice),
                                                                                                              Entry Type=CONST(Initial Entry),
                                                                                                              Customer No.=FIELD(No.),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Invoice Amounts;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 71  ;   ;Cr. Memo Amounts    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Credit Memo),
                                                                                                               Entry Type=CONST(Initial Entry),
                                                                                                               Customer No.=FIELD(No.),
                                                                                                               Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                               Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                               Posting Date=FIELD(Date Filter),
                                                                                                               Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Cr. Memo Amounts;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 72  ;   ;Finance Charge Memo Amounts;Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Finance Charge Memo),
                                                                                                              Entry Type=CONST(Initial Entry),
                                                                                                              Customer No.=FIELD(No.),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Finance Charge Memo Amounts;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 74  ;   ;Payments (LCY)      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Payment),
                                                                                                                       Entry Type=CONST(Initial Entry),
                                                                                                                       Customer No.=FIELD(No.),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Payments (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 75  ;   ;Inv. Amounts (LCY)  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Invoice),
                                                                                                                      Entry Type=CONST(Initial Entry),
                                                                                                                      Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Inv. Amounts (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 76  ;   ;Cr. Memo Amounts (LCY);Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Credit Memo),
                                                                                                                       Entry Type=CONST(Initial Entry),
                                                                                                                       Customer No.=FIELD(No.),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Cr. Memo Amounts (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 77  ;   ;Fin. Charge Memo Amounts (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Finance Charge Memo),
                                                                                                                      Entry Type=CONST(Initial Entry),
                                                                                                                      Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Fin. Charge Memo Amounts (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 78  ;   ;Outstanding Orders  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Outstanding Amount" WHERE (Document Type=CONST(Order),
                                                                                                            Bill-to Customer No.=FIELD(No.),
                                                                                                            Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                            Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                            Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Outstanding Orders;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 79  ;   ;Shipped Not Invoiced;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Shipped Not Invoiced" WHERE (Document Type=CONST(Order),
                                                                                                              Bill-to Customer No.=FIELD(No.),
                                                                                                              Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                              Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Shipped Not Invoiced;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 80  ;   ;Application Method  ;Option        ;CaptionML=ENU=Application Method;
                                                   OptionCaptionML=ENU=Manual,Apply to Oldest;
                                                   OptionString=Manual,Apply to Oldest }
    { 82  ;   ;Prices Including VAT;Boolean       ;CaptionML=ENU=Prices Including VAT }
    { 83  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=ENU=Location Code }
    { 84  ;   ;Fax No.             ;Text30        ;CaptionML=ENU=Fax No. }
    { 85  ;   ;Telex Answer Back   ;Text20        ;CaptionML=ENU=Telex Answer Back }
    { 86  ;   ;VAT Registration No.;Text20        ;OnValidate=VAR
                                                                VATRegNoFormat@1000 : Record 381;
                                                              BEGIN
                                                                VATRegNoFormat.Test("VAT Registration No.","Country/Region Code","No.",DATABASE::Customer);
                                                              END;

                                                   CaptionML=ENU=VAT Registration No. }
    { 87  ;   ;Combine Shipments   ;Boolean       ;CaptionML=ENU=Combine Shipments }
    { 88  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 89  ;   ;Picture             ;BLOB          ;CaptionML=ENU=Picture;
                                                   SubType=Bitmap }
    { 91  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code }
    { 92  ;   ;County              ;Text30        ;CaptionML=ENU=County }
    { 97  ;   ;Debit Amount        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Debit Amount" WHERE (Customer No.=FIELD(No.),
                                                                                                                      Entry Type=FILTER(<>Application),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Debit Amount;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 98  ;   ;Credit Amount       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Credit Amount" WHERE (Customer No.=FIELD(No.),
                                                                                                                       Entry Type=FILTER(<>Application),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Credit Amount;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 99  ;   ;Debit Amount (LCY)  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Debit Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                            Entry Type=FILTER(<>Application),
                                                                                                                            Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                            Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                            Posting Date=FIELD(Date Filter),
                                                                                                                            Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Debit Amount (LCY);
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 100 ;   ;Credit Amount (LCY) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Credit Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                             Entry Type=FILTER(<>Application),
                                                                                                                             Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                             Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                             Posting Date=FIELD(Date Filter),
                                                                                                                             Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Credit Amount (LCY);
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 102 ;   ;E-Mail              ;Text80        ;ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=E-Mail }
    { 103 ;   ;Home Page           ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=ENU=Home Page }
    { 104 ;   ;Reminder Terms Code ;Code10        ;TableRelation="Reminder Terms";
                                                   CaptionML=ENU=Reminder Terms Code }
    { 105 ;   ;Reminder Amounts    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Reminder),
                                                                                                              Entry Type=CONST(Initial Entry),
                                                                                                              Customer No.=FIELD(No.),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Reminder Amounts;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 106 ;   ;Reminder Amounts (LCY);Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Reminder),
                                                                                                                      Entry Type=CONST(Initial Entry),
                                                                                                                      Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Reminder Amounts (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 107 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 108 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=ENU=Tax Area Code }
    { 109 ;   ;Tax Liable          ;Boolean       ;CaptionML=ENU=Tax Liable }
    { 110 ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 111 ;   ;Currency Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Currency;
                                                   CaptionML=ENU=Currency Filter }
    { 113 ;   ;Outstanding Orders (LCY);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Outstanding Amount (LCY)" WHERE (Document Type=CONST(Order),
                                                                                                                  Bill-to Customer No.=FIELD(No.),
                                                                                                                  Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                  Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                  Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Outstanding Orders (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 114 ;   ;Shipped Not Invoiced (LCY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Shipped Not Invoiced (LCY)" WHERE (Document Type=CONST(Order),
                                                                                                                    Bill-to Customer No.=FIELD(No.),
                                                                                                                    Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                    Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                    Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Shipped Not Invoiced (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 115 ;   ;Reserve             ;Option        ;InitValue=Optional;
                                                   CaptionML=ENU=Reserve;
                                                   OptionCaptionML=ENU=Never,Optional,Always;
                                                   OptionString=Never,Optional,Always }
    { 116 ;   ;Block Payment Tolerance;Boolean    ;CaptionML=ENU=Block Payment Tolerance }
    { 117 ;   ;Pmt. Disc. Tolerance (LCY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                       Entry Type=FILTER(Payment Discount Tolerance|'Payment Discount Tolerance (VAT Adjustment)'|'Payment Discount Tolerance (VAT Excl.)'),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Pmt. Disc. Tolerance (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 118 ;   ;Pmt. Tolerance (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Customer No.=FIELD(No.),
                                                                                                                       Entry Type=FILTER(Payment Tolerance|'Payment Tolerance (VAT Adjustment)'|'Payment Tolerance (VAT Excl.)'),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Pmt. Tolerance (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 119 ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   OnValidate=VAR
                                                                CustLedgEntry@1001 : Record 21;
                                                                AccountingPeriod@1000 : Record 50;
                                                                ICPartner@1002 : Record 413;
                                                              BEGIN
                                                                IF xRec."IC Partner Code" <> "IC Partner Code" THEN BEGIN
                                                                  CustLedgEntry.SETCURRENTKEY("Customer No.","Posting Date");
                                                                  CustLedgEntry.SETRANGE("Customer No.","No.");
                                                                  AccountingPeriod.SETRANGE(Closed,FALSE);
                                                                  IF AccountingPeriod.FINDFIRST THEN
                                                                    CustLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
                                                                  IF CustLedgEntry.FINDFIRST THEN
                                                                    IF NOT CONFIRM(Text011,FALSE,TABLECAPTION) THEN
                                                                      "IC Partner Code" := xRec."IC Partner Code";

                                                                  CustLedgEntry.RESET;
                                                                  IF NOT CustLedgEntry.SETCURRENTKEY("Customer No.",Open) THEN
                                                                    CustLedgEntry.SETCURRENTKEY("Customer No.");
                                                                  CustLedgEntry.SETRANGE("Customer No.","No.");
                                                                  CustLedgEntry.SETRANGE(Open,TRUE);
                                                                  IF CustLedgEntry.FINDLAST THEN
                                                                    ERROR(Text012,FIELDCAPTION("IC Partner Code"),TABLECAPTION);
                                                                END;

                                                                IF "IC Partner Code" <> '' THEN BEGIN
                                                                  ICPartner.GET("IC Partner Code");
                                                                  IF (ICPartner."Customer No." <> '') AND (ICPartner."Customer No." <> "No.") THEN
                                                                    ERROR(Text010,FIELDCAPTION("IC Partner Code"),"IC Partner Code",TABLECAPTION,ICPartner."Customer No.");
                                                                  ICPartner."Customer No." := "No.";
                                                                  ICPartner.MODIFY;
                                                                END;

                                                                IF (xRec."IC Partner Code" <> "IC Partner Code") AND ICPartner.GET(xRec."IC Partner Code") THEN BEGIN
                                                                  ICPartner."Customer No." := '';
                                                                  ICPartner.MODIFY;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=IC Partner Code }
    { 120 ;   ;Refunds             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Refund),
                                                                                                              Entry Type=CONST(Initial Entry),
                                                                                                              Customer No.=FIELD(No.),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Refunds }
    { 121 ;   ;Refunds (LCY)       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Refund),
                                                                                                                      Entry Type=CONST(Initial Entry),
                                                                                                                      Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Refunds (LCY) }
    { 122 ;   ;Other Amounts       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry".Amount WHERE (Initial Document Type=CONST(" "),
                                                                                                              Entry Type=CONST(Initial Entry),
                                                                                                              Customer No.=FIELD(No.),
                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Other Amounts }
    { 123 ;   ;Other Amounts (LCY) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(" "),
                                                                                                                      Entry Type=CONST(Initial Entry),
                                                                                                                      Customer No.=FIELD(No.),
                                                                                                                      Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Posting Date=FIELD(Date Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Other Amounts (LCY) }
    { 124 ;   ;Prepayment %        ;Decimal       ;CaptionML=ENU=Prepayment %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 125 ;   ;Outstanding Invoices (LCY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Outstanding Amount (LCY)" WHERE (Document Type=CONST(Invoice),
                                                                                                                  Bill-to Customer No.=FIELD(No.),
                                                                                                                  Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                  Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                  Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Outstanding Invoices (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 126 ;   ;Outstanding Invoices;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Outstanding Amount" WHERE (Document Type=CONST(Invoice),
                                                                                                            Bill-to Customer No.=FIELD(No.),
                                                                                                            Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                            Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                            Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Outstanding Invoices;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 130 ;   ;Bill-to No. Of Archived Doc.;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header Archive" WHERE (Document Type=CONST(Order),
                                                                                                   Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=Bill-to No. Of Archived Doc. }
    { 131 ;   ;Sell-to No. Of Archived Doc.;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header Archive" WHERE (Document Type=CONST(Order),
                                                                                                   Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=Sell-to No. Of Archived Doc. }
    { 200 ;   ;SipAddress          ;Text250        }
    { 840 ;   ;Cash Flow Payment Terms Code;Code10;TableRelation="Payment Terms";
                                                   CaptionML=ENU=Cash Flow Payment Terms Code }
    { 5049;   ;Primary Contact No. ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                Cont@1000 : Record 5050;
                                                                ContBusRel@1001 : Record 5054;
                                                              BEGIN
                                                                Contact := '';
                                                                IF "Primary Contact No." <> '' THEN BEGIN
                                                                  Cont.GET("Primary Contact No.");

                                                                  ContBusRel.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
                                                                  ContBusRel.SETRANGE("No.","No.");
                                                                  ContBusRel.FINDFIRST;

                                                                  IF Cont."Company No." <> ContBusRel."Contact No." THEN
                                                                    ERROR(Text003,Cont."No.",Cont.Name,"No.",Name);

                                                                  IF Cont.Type = Cont.Type::Person THEN
                                                                    Contact := Cont.Name
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1000 : Record 5050;
                                                              ContBusRel@1001 : Record 5054;
                                                            BEGIN
                                                              ContBusRel.SETCURRENTKEY("Link to Table","No.");
                                                              ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
                                                              ContBusRel.SETRANGE("No.","No.");
                                                              IF ContBusRel.FINDFIRST THEN
                                                                Cont.SETRANGE("Company No.",ContBusRel."Contact No.")
                                                              ELSE
                                                                Cont.SETRANGE("No.",'');

                                                              IF "Primary Contact No." <> '' THEN
                                                                IF Cont.GET("Primary Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN
                                                                VALIDATE("Primary Contact No.",Cont."No.");
                                                            END;

                                                   CaptionML=ENU=Primary Contact No. }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   CaptionML=ENU=Responsibility Center }
    { 5750;   ;Shipping Advice     ;Option        ;CaptionML=ENU=Shipping Advice;
                                                   OptionCaptionML=ENU=Partial,Complete;
                                                   OptionString=Partial,Complete }
    { 5790;   ;Shipping Time       ;DateFormula   ;CaptionML=ENU=Shipping Time }
    { 5792;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   OnValidate=BEGIN
                                                                IF ("Shipping Agent Code" <> '') AND
                                                                   ("Shipping Agent Service Code" <> '')
                                                                THEN
                                                                  IF ShippingAgentService.GET("Shipping Agent Code","Shipping Agent Service Code") THEN
                                                                    "Shipping Time" := ShippingAgentService."Shipping Time"
                                                                  ELSE
                                                                    EVALUATE("Shipping Time",'<>');
                                                              END;

                                                   CaptionML=ENU=Shipping Agent Service Code }
    { 5900;   ;Service Zone Code   ;Code10        ;TableRelation="Service Zone";
                                                   CaptionML=ENU=Service Zone Code }
    { 5902;   ;Contract Gain/Loss Amount;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Contract Gain/Loss Entry".Amount WHERE (Customer No.=FIELD(No.),
                                                                                                            Ship-to Code=FIELD(Ship-to Filter),
                                                                                                            Change Date=FIELD(Date Filter)));
                                                   CaptionML=ENU=Contract Gain/Loss Amount;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5903;   ;Ship-to Filter      ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(No.));
                                                   CaptionML=ENU=Ship-to Filter }
    { 5910;   ;Outstanding Serv. Orders (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Line"."Outstanding Amount (LCY)" WHERE (Document Type=CONST(Order),
                                                                                                                    Bill-to Customer No.=FIELD(No.),
                                                                                                                    Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                    Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                    Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Outstanding Serv. Orders (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5911;   ;Serv Shipped Not Invoiced(LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Line"."Shipped Not Invoiced (LCY)" WHERE (Document Type=CONST(Order),
                                                                                                                      Bill-to Customer No.=FIELD(No.),
                                                                                                                      Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                      Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                      Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Serv Shipped Not Invoiced(LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5912;   ;Outstanding Serv.Invoices(LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Line"."Outstanding Amount (LCY)" WHERE (Document Type=CONST(Invoice),
                                                                                                                    Bill-to Customer No.=FIELD(No.),
                                                                                                                    Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                    Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                    Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Outstanding Serv. Invoices (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;InitValue=Yes;
                                                   CaptionML=ENU=Allow Line Disc. }
    { 7171;   ;No. of Quotes       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Quote),
                                                                                           Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Quotes;
                                                   Editable=No }
    { 7172;   ;No. of Blanket Orders;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Blanket Order),
                                                                                           Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Blanket Orders;
                                                   Editable=No }
    { 7173;   ;No. of Orders       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Order),
                                                                                           Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Orders;
                                                   Editable=No }
    { 7174;   ;No. of Invoices     ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Invoice),
                                                                                           Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Invoices;
                                                   Editable=No }
    { 7175;   ;No. of Return Orders;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Return Order),
                                                                                           Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Return Orders;
                                                   Editable=No }
    { 7176;   ;No. of Credit Memos ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Credit Memo),
                                                                                           Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Credit Memos;
                                                   Editable=No }
    { 7177;   ;No. of Pstd. Shipments;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Shipment Header" WHERE (Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Pstd. Shipments;
                                                   Editable=No }
    { 7178;   ;No. of Pstd. Invoices;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Invoice Header" WHERE (Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Pstd. Invoices;
                                                   Editable=No }
    { 7179;   ;No. of Pstd. Return Receipts;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Return Receipt Header" WHERE (Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Pstd. Return Receipts;
                                                   Editable=No }
    { 7180;   ;No. of Pstd. Credit Memos;Integer  ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Cr.Memo Header" WHERE (Sell-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Pstd. Credit Memos;
                                                   Editable=No }
    { 7181;   ;No. of Ship-to Addresses;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Count("Ship-to Address" WHERE (Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Ship-to Addresses;
                                                   Editable=No }
    { 7182;   ;Bill-To No. of Quotes;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Quote),
                                                                                           Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=Bill-To No. of Quotes;
                                                   Editable=No }
    { 7183;   ;Bill-To No. of Blanket Orders;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Blanket Order),
                                                                                           Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=Bill-To No. of Blanket Orders;
                                                   Editable=No }
    { 7184;   ;Bill-To No. of Orders;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Order),
                                                                                           Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=Bill-To No. of Orders;
                                                   Editable=No }
    { 7185;   ;Bill-To No. of Invoices;Integer    ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Invoice),
                                                                                           Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=Bill-To No. of Invoices;
                                                   Editable=No }
    { 7186;   ;Bill-To No. of Return Orders;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Return Order),
                                                                                           Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=Bill-To No. of Return Orders;
                                                   Editable=No }
    { 7187;   ;Bill-To No. of Credit Memos;Integer;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Credit Memo),
                                                                                           Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=Bill-To No. of Credit Memos;
                                                   Editable=No }
    { 7188;   ;Bill-To No. of Pstd. Shipments;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Shipment Header" WHERE (Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=Bill-To No. of Pstd. Shipments;
                                                   Editable=No }
    { 7189;   ;Bill-To No. of Pstd. Invoices;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Invoice Header" WHERE (Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=Bill-To No. of Pstd. Invoices;
                                                   Editable=No }
    { 7190;   ;Bill-To No. of Pstd. Return R.;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Return Receipt Header" WHERE (Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=Bill-To No. of Pstd. Return R.;
                                                   Editable=No }
    { 7191;   ;Bill-To No. of Pstd. Cr. Memos;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Cr.Memo Header" WHERE (Bill-to Customer No.=FIELD(No.)));
                                                   CaptionML=ENU=Bill-To No. of Pstd. Cr. Memos;
                                                   Editable=No }
    { 7600;   ;Base Calendar Code  ;Code10        ;TableRelation="Base Calendar";
                                                   CaptionML=ENU=Base Calendar Code }
    { 7601;   ;Copy Sell-to Addr. to Qte From;Option;
                                                   CaptionML=ENU=Copy Sell-to Addr. to Qte From;
                                                   OptionCaptionML=ENU=Company,Person;
                                                   OptionString=Company,Person }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Search Name                              }
    {    ;Customer Posting Group                   }
    {    ;Currency Code                            }
    {    ;Country/Region Code                      }
    {    ;Gen. Bus. Posting Group                  }
    {    ;Name,Address,City                        }
    {    ;VAT Registration No.                     }
    {    ;Name                                    ;KeyGroups=SearchCol }
    {    ;City                                    ;KeyGroups=SearchCol }
    {    ;Post Code                               ;KeyGroups=SearchCol }
    {    ;Phone No.                               ;KeyGroups=SearchCol }
    {    ;Contact                                 ;KeyGroups=SearchCol }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Name,City,Post Code,Phone No.,Contact }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot delete %1 %2 because there is at least one outstanding Sales %3 for this customer.';
      Text002@1001 : TextConst 'ENU=Do you wish to create a contact for %1 %2?';
      SalesSetup@1002 : Record 311;
      CommentLine@1004 : Record 97;
      SalesOrderLine@1005 : Record 37;
      CustBankAcc@1006 : Record 287;
      ShipToAddr@1007 : Record 222;
      PostCode@1008 : Record 225;
      GenBusPostingGrp@1009 : Record 250;
      ShippingAgentService@1010 : Record 5790;
      ItemCrossReference@1016 : Record 5717;
      RMSetup@1018 : Record 5079;
      SalesPrice@1021 : Record 7002;
      SalesLineDisc@1022 : Record 7004;
      SalesPrepmtPct@1003 : Record 459;
      ServContract@1026 : Record 5965;
      ServHeader@1034 : Record 5900;
      ServiceItem@1027 : Record 5940;
      NoSeriesMgt@1011 : Codeunit 396;
      MoveEntries@1012 : Codeunit 361;
      UpdateContFromCust@1013 : Codeunit 5056;
      DimMgt@1014 : Codeunit 408;
      InsertFromContact@1015 : Boolean;
      Text003@1020 : TextConst 'ENU=Contact %1 %2 is not related to customer %3 %4.';
      Text004@1023 : TextConst 'ENU=post';
      Text005@1024 : TextConst 'ENU=create';
      Text006@1025 : TextConst 'ENU=You cannot %1 this type of document when Customer %2 is blocked with type %3';
      Text007@1028 : TextConst 'ENU=You cannot delete %1 %2 because there is at least one not cancelled Service Contract for this customer.';
      Text008@1029 : TextConst 'ENU=Deleting the %1 %2 will cause the %3 to be deleted for the associated Service Items. Do you want to continue?';
      Text009@1030 : TextConst 'ENU=Cannot delete customer.';
      Text010@1031 : TextConst 'ENU=The %1 %2 has been assigned to %3 %4.\The same %1 cannot be entered on more than one %3. Enter another code.';
      Text011@1033 : TextConst 'ENU=Reconciling IC transactions may be difficult if you change IC Partner Code because this %1 has ledger entries in a fiscal year that has not yet been closed.\ Do you still want to change the IC Partner Code?';
      Text012@1032 : TextConst 'ENU=You cannot change the contents of the %1 field because this %2 has one or more open ledger entries.';
      Text013@1035 : TextConst 'ENU=You cannot delete %1 %2 because there is at least one outstanding Service %3 for this customer.';
      Text014@1017 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      Text015@1036 : TextConst 'ENU=You cannot delete %1 %2 because there is at least one %3 associated to this customer.';

    PROCEDURE AssistEdit@2(OldCust@1000 : Record 18) : Boolean;
    VAR
      Cust@1001 : Record 18;
    BEGIN
      WITH Cust DO BEGIN
        Cust := Rec;
        SalesSetup.GET;
        SalesSetup.TESTFIELD("Customer Nos.");
        IF NoSeriesMgt.SelectSeries(SalesSetup."Customer Nos.",OldCust."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := Cust;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.SaveDefaultDim(DATABASE::Customer,"No.",FieldNumber,ShortcutDimCode);
      MODIFY;
    END;

    PROCEDURE ShowContact@1();
    VAR
      ContBusRel@1000 : Record 5054;
      Cont@1001 : Record 5050;
    BEGIN
      IF "No." = '' THEN
        EXIT;

      ContBusRel.SETCURRENTKEY("Link to Table","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
      ContBusRel.SETRANGE("No.","No.");
      IF NOT ContBusRel.FINDFIRST THEN BEGIN
        IF NOT CONFIRM(Text002,FALSE,TABLECAPTION,"No.") THEN
          EXIT;
        UpdateContFromCust.InsertNewContact(Rec,FALSE);
        ContBusRel.FINDFIRST;
      END;
      COMMIT;

      Cont.SETCURRENTKEY("Company Name","Company No.",Type,Name);
      Cont.SETRANGE("Company No.",ContBusRel."Contact No.");
      PAGE.RUN(PAGE::"Contact List",Cont);
    END;

    PROCEDURE SetInsertFromContact@3(FromContact@1000 : Boolean);
    BEGIN
      InsertFromContact := FromContact;
    END;

    PROCEDURE CheckBlockedCustOnDocs@5(Cust2@1000 : Record 18;DocType@1001 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';Shipment@1005 : Boolean;Transaction@1003 : Boolean);
    BEGIN
      WITH Cust2 DO BEGIN
        IF ((Blocked = Blocked::All) OR
            ((Blocked = Blocked::Invoice) AND (DocType IN [DocType::Quote,DocType::Order,DocType::Invoice,DocType::"Blanket Order"])) OR
            ((Blocked = Blocked::Ship) AND (DocType IN [DocType::Quote,DocType::Order,DocType::"Blanket Order"]) AND
             (NOT Transaction)) OR
            ((Blocked = Blocked::Ship) AND (DocType IN [DocType::Quote,DocType::Order,DocType::Invoice,DocType::"Blanket Order"]) AND
             Shipment AND Transaction))
        THEN
          CustBlockedErrorMessage(Cust2,Transaction);
      END;
    END;

    PROCEDURE CheckBlockedCustOnJnls@7(Cust2@1003 : Record 18;DocType@1002 : ' ,Payment,Invoice,Credit Memo,Finance Charge,Reminder,Refund';Transaction@1000 : Boolean);
    BEGIN
      WITH Cust2 DO BEGIN
        IF (Blocked = Blocked::All) OR
           ((Blocked = Blocked::Invoice) AND (DocType IN [DocType::Invoice,DocType::" "]))
        THEN
          CustBlockedErrorMessage(Cust2,Transaction)
      END;
    END;

    PROCEDURE CustBlockedErrorMessage@4(Cust2@1001 : Record 18;Transaction@1000 : Boolean);
    VAR
      Action@1002 : Text[30];
    BEGIN
      IF Transaction THEN
        Action := Text004
      ELSE
        Action := Text005;
      ERROR(Text006,Action,Cust2."No.",Cust2.Blocked);
    END;

    PROCEDURE LookUpAdjmtValueEntries@6(CustDateFilter@1002 : Text[30]);
    VAR
      ValueEntry@1001 : Record 5802;
    BEGIN
      ValueEntry.SETCURRENTKEY("Source Type","Source No.");
      ValueEntry.SETRANGE("Source Type",ValueEntry."Source Type"::Customer);
      ValueEntry.SETRANGE("Source No.","No.");
      ValueEntry.SETFILTER("Posting Date",CustDateFilter);
      ValueEntry.SETFILTER("Global Dimension 1 Code",GETFILTER("Global Dimension 1 Filter"));
      ValueEntry.SETFILTER("Global Dimension 2 Code",GETFILTER("Global Dimension 2 Filter"));
      ValueEntry.SETRANGE(Adjustment,TRUE);
      ValueEntry.SETRANGE("Expected Cost",FALSE);
      PAGE.RUNMODAL(0,ValueEntry);
    END;

    PROCEDURE DisplayMap@8();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::Customer,GETPOSITION)
      ELSE
        MESSAGE(Text014);
    END;

    PROCEDURE GetTotalAmountLCY@10() : Decimal;
    BEGIN
      CALCFIELDS("Balance (LCY)","Outstanding Orders (LCY)","Shipped Not Invoiced (LCY)","Outstanding Invoices (LCY)",
        "Outstanding Serv. Orders (LCY)","Serv Shipped Not Invoiced(LCY)","Outstanding Serv.Invoices(LCY)");

      EXIT(GetTotalAmountLCYCommon);
    END;

    PROCEDURE GetTotalAmountLCYUI@16() : Decimal;
    BEGIN
      SETAUTOCALCFIELDS("Balance (LCY)","Outstanding Orders (LCY)","Shipped Not Invoiced (LCY)","Outstanding Invoices (LCY)",
        "Outstanding Serv. Orders (LCY)","Serv Shipped Not Invoiced(LCY)","Outstanding Serv.Invoices(LCY)");

      EXIT(GetTotalAmountLCYCommon);
    END;

    LOCAL PROCEDURE GetTotalAmountLCYCommon@17() : Decimal;
    VAR
      SalesLine@1000 : Record 37;
      ServiceLine@1002 : Record 5902;
      SalesOutstandingAmountFromShipment@1001 : Decimal;
      ServOutstandingAmountFromShipment@1003 : Decimal;
    BEGIN
      SalesOutstandingAmountFromShipment := SalesLine.OutstandingInvoiceAmountFromShipment("No.");
      ServOutstandingAmountFromShipment := ServiceLine.OutstandingInvoiceAmountFromShipment("No.");

      EXIT("Balance (LCY)" + "Outstanding Orders (LCY)" + "Shipped Not Invoiced (LCY)" + "Outstanding Invoices (LCY)" +
        "Outstanding Serv. Orders (LCY)" + "Serv Shipped Not Invoiced(LCY)" + "Outstanding Serv.Invoices(LCY)" -
        SalesOutstandingAmountFromShipment - ServOutstandingAmountFromShipment);
    END;

    PROCEDURE GetSalesLCY@13() : Decimal;
    VAR
      CustomerSalesYTD@1005 : Record 18;
      AccountingPeriod@1004 : Record 50;
      StartDate@1001 : Date;
      EndDate@1000 : Date;
    BEGIN
      StartDate := AccountingPeriod.GetFiscalYearStartDate(WORKDATE);
      EndDate := AccountingPeriod.GetFiscalYearEndDate(WORKDATE);
      CustomerSalesYTD := Rec;
      CustomerSalesYTD."SECURITYFILTERING"("SECURITYFILTERING");
      CustomerSalesYTD.SETRANGE("Date Filter",StartDate,EndDate);
      CustomerSalesYTD.CALCFIELDS("Sales (LCY)");
      EXIT(CustomerSalesYTD."Sales (LCY)");
    END;

    PROCEDURE CalcAvailableCredit@9() : Decimal;
    BEGIN
      EXIT(CalcAvailableCreditCommon(FALSE));
    END;

    PROCEDURE CalcAvailableCreditUI@15() : Decimal;
    BEGIN
      EXIT(CalcAvailableCreditCommon(TRUE));
    END;

    LOCAL PROCEDURE CalcAvailableCreditCommon@14(CalledFromUI@1000 : Boolean) : Decimal;
    BEGIN
      IF "Credit Limit (LCY)" = 0 THEN
        EXIT(0);
      IF CalledFromUI THEN
        EXIT("Credit Limit (LCY)" - GetTotalAmountLCYUI);
      EXIT("Credit Limit (LCY)" - GetTotalAmountLCY);
    END;

    PROCEDURE CalcOverdueBalance@11() OverDueBalance : Decimal;
    VAR
      CustLedgerEntry@1000 : Record 21 SECURITYFILTERING(Filtered);
    BEGIN
      CustLedgerEntry.SETCURRENTKEY("Customer No.",Open,Positive,"Due Date","Currency Code");
      CustLedgerEntry.SETRANGE("Customer No.","No.");
      CustLedgerEntry.SETRANGE(Open,TRUE);
      CustLedgerEntry.SETFILTER("Due Date",'<%1',WORKDATE);
      CustLedgerEntry.SETAUTOCALCFIELDS("Amount (LCY)");
      IF CustLedgerEntry.FINDSET THEN
        REPEAT
          OverDueBalance += CustLedgerEntry."Amount (LCY)";
        UNTIL CustLedgerEntry.NEXT = 0;
    END;

    PROCEDURE SetStyle@12() : Text;
    BEGIN
      IF CalcAvailableCredit < 0 THEN
        EXIT('Unfavorable');
      EXIT('');
    END;

    BEGIN
    END.
  }
}

OBJECT Table 23 Vendor
{
  OBJECT-PROPERTIES
  {
    Date=10/10/12;
    Time=[ 2:49:16 AM];
    Modified=Yes;
    Version List=NAVW17.00,Lync;
  }
  PROPERTIES
  {
    Permissions=TableData 25=r;
    DataCaptionFields=No.,Name;
    OnInsert=BEGIN
               IF "No." = '' THEN BEGIN
                 PurchSetup.GET;
                 PurchSetup.TESTFIELD("Vendor Nos.");
                 NoSeriesMgt.InitSeries(PurchSetup."Vendor Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;
               IF "Invoice Disc. Code" = '' THEN
                 "Invoice Disc. Code" := "No.";

               IF NOT InsertFromContact THEN
                 UpdateContFromVend.OnInsert(Rec);

               DimMgt.UpdateDefaultDim(
                 DATABASE::Vendor,"No.",
                 "Global Dimension 1 Code","Global Dimension 2 Code");
             END;

    OnModify=BEGIN
               "Last Date Modified" := TODAY;

               IF (Name <> xRec.Name) OR
                  ("Search Name" <> xRec."Search Name") OR
                  ("Name 2" <> xRec."Name 2") OR
                  (Address <> xRec.Address) OR
                  ("Address 2" <> xRec."Address 2") OR
                  (City <> xRec.City) OR
                  ("Phone No." <> xRec."Phone No.") OR
                  ("Telex No." <> xRec."Telex No.") OR
                  ("Territory Code" <> xRec."Territory Code") OR
                  ("Currency Code" <> xRec."Currency Code") OR
                  ("Language Code" <> xRec."Language Code") OR
                  ("Purchaser Code" <> xRec."Purchaser Code") OR
                  ("Country/Region Code" <> xRec."Country/Region Code") OR
                  ("Fax No." <> xRec."Fax No.") OR
                  ("Telex Answer Back" <> xRec."Telex Answer Back") OR
                  ("VAT Registration No." <> xRec."VAT Registration No.") OR
                  ("Post Code" <> xRec."Post Code") OR
                  (County <> xRec.County) OR
                  ("E-Mail" <> xRec."E-Mail") OR
                  ("Home Page" <> xRec."Home Page")
               THEN BEGIN
                 MODIFY;
                 UpdateContFromVend.OnModify(Rec);
               END;
             END;

    OnDelete=VAR
               ItemVendor@1000 : Record 99;
               PurchPrice@1001 : Record 7012;
               PurchLineDiscount@1002 : Record 7014;
               PurchPrepmtPct@1003 : Record 460;
             BEGIN
               MoveEntries.MoveVendorEntries(Rec);

               CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::Vendor);
               CommentLine.SETRANGE("No.","No.");
               CommentLine.DELETEALL;

               VendBankAcc.SETRANGE("Vendor No.","No.");
               VendBankAcc.DELETEALL;

               OrderAddr.SETRANGE("Vendor No.","No.");
               OrderAddr.DELETEALL;

               ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
               ItemCrossReference.SETRANGE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Vendor);
               ItemCrossReference.SETRANGE("Cross-Reference Type No.","No.");
               ItemCrossReference.DELETEALL;

               PurchOrderLine.SETCURRENTKEY("Document Type","Pay-to Vendor No.");
               PurchOrderLine.SETFILTER(
                 "Document Type",'%1|%2',
                 PurchOrderLine."Document Type"::Order,
                 PurchOrderLine."Document Type"::"Return Order");
               PurchOrderLine.SETRANGE("Pay-to Vendor No.","No.");
               IF PurchOrderLine.FINDFIRST THEN
                 ERROR(
                   Text000,
                   TABLECAPTION,"No.",
                   PurchOrderLine."Document Type");

               PurchOrderLine.SETRANGE("Pay-to Vendor No.");
               PurchOrderLine.SETRANGE("Buy-from Vendor No.","No.");
               IF PurchOrderLine.FINDFIRST THEN
                 ERROR(
                   Text000,
                   TABLECAPTION,"No.");

               UpdateContFromVend.OnDelete(Rec);

               DimMgt.DeleteDefaultDim(DATABASE::Vendor,"No.");

               ServiceItem.SETRANGE("Vendor No.","No.");
               ServiceItem.MODIFYALL("Vendor No.",'');

               ItemVendor.SETRANGE("Vendor No.","No.");
               ItemVendor.DELETEALL(TRUE);

               PurchPrice.SETCURRENTKEY("Vendor No.");
               PurchPrice.SETRANGE("Vendor No.","No.");
               PurchPrice.DELETEALL(TRUE);

               PurchLineDiscount.SETCURRENTKEY("Vendor No.");
               PurchLineDiscount.SETRANGE("Vendor No.","No.");
               PurchLineDiscount.DELETEALL(TRUE);

               PurchPrepmtPct.SETCURRENTKEY("Vendor No.");
               PurchPrepmtPct.SETRANGE("Vendor No.","No.");
               PurchPrepmtPct.DELETEALL(TRUE);
             END;

    OnRename=BEGIN
               "Last Date Modified" := TODAY;
             END;

    CaptionML=ENU=Vendor;
    LookupPageID=Page27;
    DrillDownPageID=Page27;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;AltSearchField=Search Name;
                                                   OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  NoSeriesMgt.TestManual(PurchSetup."Vendor Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                                IF "Invoice Disc. Code" = '' THEN
                                                                  "Invoice Disc. Code" := "No.";
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Name                ;Text50        ;OnValidate=BEGIN
                                                                IF ("Search Name" = UPPERCASE(xRec.Name)) OR ("Search Name" = '') THEN
                                                                  "Search Name" := Name;
                                                              END;

                                                   CaptionML=ENU=Name }
    { 3   ;   ;Search Name         ;Code50        ;CaptionML=ENU=Search Name }
    { 4   ;   ;Name 2              ;Text50        ;CaptionML=ENU=Name 2 }
    { 5   ;   ;Address             ;Text50        ;CaptionML=ENU=Address }
    { 6   ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2 }
    { 7   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=City }
    { 8   ;   ;Contact             ;Text50        ;OnValidate=BEGIN
                                                                IF RMSetup.GET THEN
                                                                  IF RMSetup."Bus. Rel. Code for Vendors" <> '' THEN
                                                                    IF (xRec.Contact = '') AND (xRec."Primary Contact No." = '') THEN BEGIN
                                                                      MODIFY;
                                                                      UpdateContFromVend.OnModify(Rec);
                                                                      UpdateContFromVend.InsertNewContactPerson(Rec,FALSE);
                                                                      MODIFY(TRUE);
                                                                    END
                                                              END;

                                                   CaptionML=ENU=Contact }
    { 9   ;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. }
    { 10  ;   ;Telex No.           ;Text20        ;CaptionML=ENU=Telex No. }
    { 14  ;   ;Our Account No.     ;Text20        ;CaptionML=ENU=Our Account No. }
    { 15  ;   ;Territory Code      ;Code10        ;TableRelation=Territory;
                                                   CaptionML=ENU=Territory Code }
    { 16  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 17  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Global Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 19  ;   ;Budgeted Amount     ;Decimal       ;CaptionML=ENU=Budgeted Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 21  ;   ;Vendor Posting Group;Code10        ;TableRelation="Vendor Posting Group";
                                                   CaptionML=ENU=Vendor Posting Group }
    { 22  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code }
    { 24  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=ENU=Language Code }
    { 26  ;   ;Statistics Group    ;Integer       ;CaptionML=ENU=Statistics Group }
    { 27  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   CaptionML=ENU=Payment Terms Code }
    { 28  ;   ;Fin. Charge Terms Code;Code10      ;TableRelation="Finance Charge Terms";
                                                   CaptionML=ENU=Fin. Charge Terms Code }
    { 29  ;   ;Purchaser Code      ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=ENU=Purchaser Code }
    { 30  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   CaptionML=ENU=Shipment Method Code }
    { 31  ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   CaptionML=ENU=Shipping Agent Code }
    { 33  ;   ;Invoice Disc. Code  ;Code20        ;TableRelation=Vendor;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Invoice Disc. Code }
    { 35  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                IF ("Country/Region Code" <> xRec."Country/Region Code") AND (xRec."Country/Region Code" <> '') THEN
                                                                  PostCode.ClearFields(City,"Post Code",County);
                                                              END;

                                                   CaptionML=ENU=Country/Region Code }
    { 38  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE (Table Name=CONST(Vendor),
                                                                                           No.=FIELD(No.)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 39  ;   ;Blocked             ;Option        ;CaptionML=ENU=Blocked;
                                                   OptionCaptionML=ENU=" ,Payment,All";
                                                   OptionString=[ ,Payment,All] }
    { 45  ;   ;Pay-to Vendor No.   ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Pay-to Vendor No. }
    { 46  ;   ;Priority            ;Integer       ;CaptionML=ENU=Priority }
    { 47  ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   CaptionML=ENU=Payment Method Code }
    { 54  ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=No }
    { 55  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 56  ;   ;Global Dimension 1 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=ENU=Global Dimension 1 Filter;
                                                   CaptionClass='1,3,1' }
    { 57  ;   ;Global Dimension 2 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Global Dimension 2 Filter;
                                                   CaptionClass='1,3,2' }
    { 58  ;   ;Balance             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Vendor No.=FIELD(No.),
                                                                                                                Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Balance;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 59  ;   ;Balance (LCY)       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Vendor No.=FIELD(No.),
                                                                                                                        Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                        Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                        Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Balance (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 60  ;   ;Net Change          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Vendor No.=FIELD(No.),
                                                                                                                Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                Posting Date=FIELD(Date Filter),
                                                                                                                Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Net Change;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Net Change (LCY)    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Vendor No.=FIELD(No.),
                                                                                                                        Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                        Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                        Posting Date=FIELD(Date Filter),
                                                                                                                        Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Net Change (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 62  ;   ;Purchases (LCY)     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Vendor Ledger Entry"."Purchase (LCY)" WHERE (Vendor No.=FIELD(No.),
                                                                                                                  Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                  Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                  Posting Date=FIELD(Date Filter),
                                                                                                                  Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Purchases (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 64  ;   ;Inv. Discounts (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Vendor Ledger Entry"."Inv. Discount (LCY)" WHERE (Vendor No.=FIELD(No.),
                                                                                                                       Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                       Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Inv. Discounts (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 65  ;   ;Pmt. Discounts (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Vendor No.=FIELD(No.),
                                                                                                                       Entry Type=FILTER(Payment Discount..'Payment Discount (VAT Adjustment)'),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Pmt. Discounts (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 66  ;   ;Balance Due         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Vendor No.=FIELD(No.),
                                                                                                                Posting Date=FIELD(UPPERLIMIT(Date Filter)),
                                                                                                                Initial Entry Due Date=FIELD(Date Filter),
                                                                                                                Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Balance Due;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 67  ;   ;Balance Due (LCY)   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Vendor No.=FIELD(No.),
                                                                                                                        Posting Date=FIELD(UPPERLIMIT(Date Filter)),
                                                                                                                        Initial Entry Due Date=FIELD(Date Filter),
                                                                                                                        Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                        Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                        Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Balance Due (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 69  ;   ;Payments            ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Payment),
                                                                                                               Entry Type=CONST(Initial Entry),
                                                                                                               Vendor No.=FIELD(No.),
                                                                                                               Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                               Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                               Posting Date=FIELD(Date Filter),
                                                                                                               Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Payments;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 70  ;   ;Invoice Amounts     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Invoice),
                                                                                                                Entry Type=CONST(Initial Entry),
                                                                                                                Vendor No.=FIELD(No.),
                                                                                                                Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                Posting Date=FIELD(Date Filter),
                                                                                                                Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Invoice Amounts;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 71  ;   ;Cr. Memo Amounts    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Credit Memo),
                                                                                                               Entry Type=CONST(Initial Entry),
                                                                                                               Vendor No.=FIELD(No.),
                                                                                                               Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                               Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                               Posting Date=FIELD(Date Filter),
                                                                                                               Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Cr. Memo Amounts;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 72  ;   ;Finance Charge Memo Amounts;Decimal;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Finance Charge Memo),
                                                                                                                Entry Type=CONST(Initial Entry),
                                                                                                                Vendor No.=FIELD(No.),
                                                                                                                Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                Posting Date=FIELD(Date Filter),
                                                                                                                Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Finance Charge Memo Amounts;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 74  ;   ;Payments (LCY)      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Payment),
                                                                                                                       Entry Type=CONST(Initial Entry),
                                                                                                                       Vendor No.=FIELD(No.),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Payments (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 75  ;   ;Inv. Amounts (LCY)  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Invoice),
                                                                                                                        Entry Type=CONST(Initial Entry),
                                                                                                                        Vendor No.=FIELD(No.),
                                                                                                                        Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                        Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                        Posting Date=FIELD(Date Filter),
                                                                                                                        Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Inv. Amounts (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 76  ;   ;Cr. Memo Amounts (LCY);Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Credit Memo),
                                                                                                                       Entry Type=CONST(Initial Entry),
                                                                                                                       Vendor No.=FIELD(No.),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Cr. Memo Amounts (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 77  ;   ;Fin. Charge Memo Amounts (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Finance Charge Memo),
                                                                                                                        Entry Type=CONST(Initial Entry),
                                                                                                                        Vendor No.=FIELD(No.),
                                                                                                                        Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                        Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                        Posting Date=FIELD(Date Filter),
                                                                                                                        Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Fin. Charge Memo Amounts (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 78  ;   ;Outstanding Orders  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Outstanding Amount" WHERE (Document Type=CONST(Order),
                                                                                                               Pay-to Vendor No.=FIELD(No.),
                                                                                                               Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                               Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                               Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Outstanding Orders;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 79  ;   ;Amt. Rcd. Not Invoiced;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Amt. Rcd. Not Invoiced" WHERE (Document Type=CONST(Order),
                                                                                                                   Pay-to Vendor No.=FIELD(No.),
                                                                                                                   Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                   Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                   Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Amt. Rcd. Not Invoiced;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 80  ;   ;Application Method  ;Option        ;CaptionML=ENU=Application Method;
                                                   OptionCaptionML=ENU=Manual,Apply to Oldest;
                                                   OptionString=Manual,Apply to Oldest }
    { 82  ;   ;Prices Including VAT;Boolean       ;OnValidate=VAR
                                                                PurchPrice@1000 : Record 7012;
                                                                Item@1001 : Record 27;
                                                                VATPostingSetup@1002 : Record 325;
                                                                Currency@1003 : Record 4;
                                                              BEGIN
                                                                PurchPrice.SETCURRENTKEY("Vendor No.");
                                                                PurchPrice.SETRANGE("Vendor No.","No.");
                                                                IF PurchPrice.FIND('-') THEN BEGIN
                                                                  IF VATPostingSetup.GET('','') THEN;
                                                                  IF CONFIRM(
                                                                       STRSUBSTNO(
                                                                         Text002,
                                                                         FIELDCAPTION("Prices Including VAT"),"Prices Including VAT",PurchPrice.TABLECAPTION),TRUE)
                                                                  THEN
                                                                    REPEAT
                                                                      IF PurchPrice."Item No." <> Item."No." THEN
                                                                        Item.GET(PurchPrice."Item No.");
                                                                      IF ("VAT Bus. Posting Group" <> VATPostingSetup."VAT Bus. Posting Group") OR
                                                                         (Item."VAT Prod. Posting Group" <> VATPostingSetup."VAT Prod. Posting Group")
                                                                      THEN
                                                                        VATPostingSetup.GET("VAT Bus. Posting Group",Item."VAT Prod. Posting Group");
                                                                      IF PurchPrice."Currency Code" = '' THEN
                                                                        Currency.InitRoundingPrecision
                                                                      ELSE
                                                                        IF PurchPrice."Currency Code" <> Currency.Code THEN
                                                                          Currency.GET(PurchPrice."Currency Code");
                                                                      IF VATPostingSetup."VAT %" <> 0 THEN BEGIN
                                                                        IF "Prices Including VAT" THEN
                                                                          PurchPrice."Direct Unit Cost" :=
                                                                            ROUND(
                                                                              PurchPrice."Direct Unit Cost" * (1 + VATPostingSetup."VAT %" / 100),
                                                                              Currency."Unit-Amount Rounding Precision")
                                                                        ELSE
                                                                          PurchPrice."Direct Unit Cost" :=
                                                                            ROUND(
                                                                              PurchPrice."Direct Unit Cost" / (1 + VATPostingSetup."VAT %" / 100),
                                                                              Currency."Unit-Amount Rounding Precision");
                                                                        PurchPrice.MODIFY;
                                                                      END;
                                                                    UNTIL PurchPrice.NEXT = 0;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Prices Including VAT }
    { 84  ;   ;Fax No.             ;Text30        ;CaptionML=ENU=Fax No. }
    { 85  ;   ;Telex Answer Back   ;Text20        ;CaptionML=ENU=Telex Answer Back }
    { 86  ;   ;VAT Registration No.;Text20        ;OnValidate=VAR
                                                                VATRegNoFormat@1000 : Record 381;
                                                              BEGIN
                                                                VATRegNoFormat.Test("VAT Registration No.","Country/Region Code","No.",DATABASE::Vendor);
                                                              END;

                                                   CaptionML=ENU=VAT Registration No. }
    { 88  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 89  ;   ;Picture             ;BLOB          ;CaptionML=ENU=Picture;
                                                   SubType=Bitmap }
    { 91  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code }
    { 92  ;   ;County              ;Text30        ;CaptionML=ENU=County }
    { 97  ;   ;Debit Amount        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Debit Amount" WHERE (Vendor No.=FIELD(No.),
                                                                                                                       Entry Type=FILTER(<>Application),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Debit Amount;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 98  ;   ;Credit Amount       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Credit Amount" WHERE (Vendor No.=FIELD(No.),
                                                                                                                        Entry Type=FILTER(<>Application),
                                                                                                                        Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                        Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                        Posting Date=FIELD(Date Filter),
                                                                                                                        Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Credit Amount;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 99  ;   ;Debit Amount (LCY)  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Debit Amount (LCY)" WHERE (Vendor No.=FIELD(No.),
                                                                                                                             Entry Type=FILTER(<>Application),
                                                                                                                             Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                             Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                             Posting Date=FIELD(Date Filter),
                                                                                                                             Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Debit Amount (LCY);
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 100 ;   ;Credit Amount (LCY) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Credit Amount (LCY)" WHERE (Vendor No.=FIELD(No.),
                                                                                                                              Entry Type=FILTER(<>Application),
                                                                                                                              Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                              Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                              Posting Date=FIELD(Date Filter),
                                                                                                                              Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Credit Amount (LCY);
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 102 ;   ;E-Mail              ;Text80        ;ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=E-Mail }
    { 103 ;   ;Home Page           ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=ENU=Home Page }
    { 104 ;   ;Reminder Amounts    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Reminder),
                                                                                                                Entry Type=CONST(Initial Entry),
                                                                                                                Vendor No.=FIELD(No.),
                                                                                                                Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                Posting Date=FIELD(Date Filter),
                                                                                                                Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Reminder Amounts;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 105 ;   ;Reminder Amounts (LCY);Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Reminder),
                                                                                                                        Entry Type=CONST(Initial Entry),
                                                                                                                        Vendor No.=FIELD(No.),
                                                                                                                        Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                        Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                        Posting Date=FIELD(Date Filter),
                                                                                                                        Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Reminder Amounts (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 107 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 108 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=ENU=Tax Area Code }
    { 109 ;   ;Tax Liable          ;Boolean       ;CaptionML=ENU=Tax Liable }
    { 110 ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 111 ;   ;Currency Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Currency;
                                                   CaptionML=ENU=Currency Filter }
    { 113 ;   ;Outstanding Orders (LCY);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Outstanding Amount (LCY)" WHERE (Document Type=CONST(Order),
                                                                                                                     Pay-to Vendor No.=FIELD(No.),
                                                                                                                     Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                     Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                     Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Outstanding Orders (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 114 ;   ;Amt. Rcd. Not Invoiced (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Amt. Rcd. Not Invoiced (LCY)" WHERE (Document Type=CONST(Order),
                                                                                                                         Pay-to Vendor No.=FIELD(No.),
                                                                                                                         Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                         Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                         Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Amt. Rcd. Not Invoiced (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 116 ;   ;Block Payment Tolerance;Boolean    ;CaptionML=ENU=Block Payment Tolerance }
    { 117 ;   ;Pmt. Disc. Tolerance (LCY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Vendor No.=FIELD(No.),
                                                                                                                       Entry Type=FILTER(Payment Discount Tolerance|'Payment Discount Tolerance (VAT Adjustment)'|'Payment Discount Tolerance (VAT Excl.)'),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Pmt. Disc. Tolerance (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 118 ;   ;Pmt. Tolerance (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Vendor No.=FIELD(No.),
                                                                                                                       Entry Type=FILTER(Payment Tolerance|'Payment Tolerance (VAT Adjustment)'|'Payment Tolerance (VAT Excl.)'),
                                                                                                                       Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                       Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                       Posting Date=FIELD(Date Filter),
                                                                                                                       Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Pmt. Tolerance (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 119 ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   OnValidate=VAR
                                                                VendLedgEntry@1001 : Record 25;
                                                                AccountingPeriod@1000 : Record 50;
                                                                ICPartner@1002 : Record 413;
                                                              BEGIN
                                                                IF xRec."IC Partner Code" <> "IC Partner Code" THEN BEGIN
                                                                  VendLedgEntry.SETCURRENTKEY("Vendor No.","Posting Date");
                                                                  VendLedgEntry.SETRANGE("Vendor No.","No.");
                                                                  AccountingPeriod.SETRANGE(Closed,FALSE);
                                                                  IF AccountingPeriod.FINDFIRST THEN
                                                                    VendLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
                                                                  IF VendLedgEntry.FINDFIRST THEN
                                                                    IF NOT CONFIRM(Text009,FALSE,TABLECAPTION) THEN
                                                                      "IC Partner Code" := xRec."IC Partner Code";

                                                                  VendLedgEntry.RESET;
                                                                  IF NOT VendLedgEntry.SETCURRENTKEY("Vendor No.",Open) THEN
                                                                    VendLedgEntry.SETCURRENTKEY("Vendor No.");
                                                                  VendLedgEntry.SETRANGE("Vendor No.","No.");
                                                                  VendLedgEntry.SETRANGE(Open,TRUE);
                                                                  IF VendLedgEntry.FINDLAST THEN
                                                                    ERROR(Text010,FIELDCAPTION("IC Partner Code"),TABLECAPTION);
                                                                END;

                                                                IF "IC Partner Code" <> '' THEN BEGIN
                                                                  ICPartner.GET("IC Partner Code");
                                                                  IF (ICPartner."Vendor No." <> '') AND (ICPartner."Vendor No." <> "No.") THEN
                                                                    ERROR(Text008,FIELDCAPTION("IC Partner Code"),"IC Partner Code",TABLECAPTION,ICPartner."Vendor No.");
                                                                  ICPartner."Vendor No." := "No.";
                                                                  ICPartner.MODIFY;
                                                                END;

                                                                IF (xRec."IC Partner Code" <> "IC Partner Code") AND ICPartner.GET(xRec."IC Partner Code") THEN BEGIN
                                                                  ICPartner."Vendor No." := '';
                                                                  ICPartner.MODIFY;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=IC Partner Code }
    { 120 ;   ;Refunds             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Initial Document Type=CONST(Refund),
                                                                                                                Entry Type=CONST(Initial Entry),
                                                                                                                Vendor No.=FIELD(No.),
                                                                                                                Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                Posting Date=FIELD(Date Filter),
                                                                                                                Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Refunds }
    { 121 ;   ;Refunds (LCY)       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(Refund),
                                                                                                                        Entry Type=CONST(Initial Entry),
                                                                                                                        Vendor No.=FIELD(No.),
                                                                                                                        Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                        Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                        Posting Date=FIELD(Date Filter),
                                                                                                                        Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Refunds (LCY) }
    { 122 ;   ;Other Amounts       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry".Amount WHERE (Initial Document Type=CONST(" "),
                                                                                                                Entry Type=CONST(Initial Entry),
                                                                                                                Vendor No.=FIELD(No.),
                                                                                                                Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                Posting Date=FIELD(Date Filter),
                                                                                                                Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Other Amounts }
    { 123 ;   ;Other Amounts (LCY) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Initial Document Type=CONST(" "),
                                                                                                                        Entry Type=CONST(Initial Entry),
                                                                                                                        Vendor No.=FIELD(No.),
                                                                                                                        Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                        Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                        Posting Date=FIELD(Date Filter),
                                                                                                                        Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Other Amounts (LCY) }
    { 124 ;   ;Prepayment %        ;Decimal       ;CaptionML=ENU=Prepayment %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 125 ;   ;Outstanding Invoices;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Outstanding Amount" WHERE (Document Type=CONST(Invoice),
                                                                                                               Pay-to Vendor No.=FIELD(No.),
                                                                                                               Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                               Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                               Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Outstanding Invoices;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 126 ;   ;Outstanding Invoices (LCY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Outstanding Amount (LCY)" WHERE (Document Type=CONST(Invoice),
                                                                                                                     Pay-to Vendor No.=FIELD(No.),
                                                                                                                     Shortcut Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                     Shortcut Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                     Currency Code=FIELD(Currency Filter)));
                                                   CaptionML=ENU=Outstanding Invoices (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 130 ;   ;Pay-to No. Of Archived Doc.;Integer;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header Archive" WHERE (Document Type=CONST(Order),
                                                                                                      Pay-to Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=Pay-to No. Of Archived Doc. }
    { 131 ;   ;Buy-from No. Of Archived Doc.;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header Archive" WHERE (Document Type=CONST(Order),
                                                                                                      Buy-from Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=Buy-from No. Of Archived Doc. }
    { 200 ;   ;SipAddress          ;Text250        }
    { 840 ;   ;Cash Flow Payment Terms Code;Code10;TableRelation="Payment Terms";
                                                   CaptionML=ENU=Cash Flow Payment Terms Code }
    { 5049;   ;Primary Contact No. ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                Cont@1001 : Record 5050;
                                                                ContBusRel@1000 : Record 5054;
                                                              BEGIN
                                                                Contact := '';
                                                                IF "Primary Contact No." <> '' THEN BEGIN
                                                                  Cont.GET("Primary Contact No.");

                                                                  ContBusRel.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
                                                                  ContBusRel.SETRANGE("No.","No.");
                                                                  ContBusRel.FINDFIRST;

                                                                  IF Cont."Company No." <> ContBusRel."Contact No." THEN
                                                                    ERROR(Text004,Cont."No.",Cont.Name,"No.",Name);

                                                                  IF Cont.Type = Cont.Type::Person THEN
                                                                    Contact := Cont.Name
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1001 : Record 5050;
                                                              ContBusRel@1000 : Record 5054;
                                                            BEGIN
                                                              ContBusRel.SETCURRENTKEY("Link to Table","No.");
                                                              ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
                                                              ContBusRel.SETRANGE("No.","No.");
                                                              IF ContBusRel.FINDFIRST THEN
                                                                Cont.SETRANGE("Company No.",ContBusRel."Contact No.")
                                                              ELSE
                                                                Cont.SETRANGE("No.",'');

                                                              IF "Primary Contact No." <> '' THEN
                                                                IF Cont.GET("Primary Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN
                                                                VALIDATE("Primary Contact No.",Cont."No.");
                                                            END;

                                                   CaptionML=ENU=Primary Contact No. }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   CaptionML=ENU=Responsibility Center }
    { 5701;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=ENU=Location Code }
    { 5790;   ;Lead Time Calculation;DateFormula  ;CaptionML=ENU=Lead Time Calculation }
    { 7177;   ;No. of Pstd. Receipts;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purch. Rcpt. Header" WHERE (Buy-from Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Pstd. Receipts;
                                                   Editable=No }
    { 7178;   ;No. of Pstd. Invoices;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purch. Inv. Header" WHERE (Buy-from Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Pstd. Invoices;
                                                   Editable=No }
    { 7179;   ;No. of Pstd. Return Shipments;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Return Shipment Header" WHERE (Buy-from Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Pstd. Return Shipments;
                                                   Editable=No }
    { 7180;   ;No. of Pstd. Credit Memos;Integer  ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purch. Cr. Memo Hdr." WHERE (Buy-from Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Pstd. Credit Memos;
                                                   Editable=No }
    { 7181;   ;Pay-to No. of Orders;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Order),
                                                                                              Pay-to Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=Pay-to No. of Orders;
                                                   Editable=No }
    { 7182;   ;Pay-to No. of Invoices;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Invoice),
                                                                                              Pay-to Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=Pay-to No. of Invoices;
                                                   Editable=No }
    { 7183;   ;Pay-to No. of Return Orders;Integer;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Return Order),
                                                                                              Pay-to Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=Pay-to No. of Return Orders;
                                                   Editable=No }
    { 7184;   ;Pay-to No. of Credit Memos;Integer ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Credit Memo),
                                                                                              Pay-to Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=Pay-to No. of Credit Memos;
                                                   Editable=No }
    { 7185;   ;Pay-to No. of Pstd. Receipts;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Purch. Rcpt. Header" WHERE (Pay-to Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=Pay-to No. of Pstd. Receipts;
                                                   Editable=No }
    { 7186;   ;Pay-to No. of Pstd. Invoices;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Purch. Inv. Header" WHERE (Pay-to Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=Pay-to No. of Pstd. Invoices;
                                                   Editable=No }
    { 7187;   ;Pay-to No. of Pstd. Return S.;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Return Shipment Header" WHERE (Pay-to Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=Pay-to No. of Pstd. Return S.;
                                                   Editable=No }
    { 7188;   ;Pay-to No. of Pstd. Cr. Memos;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Purch. Cr. Memo Hdr." WHERE (Pay-to Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=Pay-to No. of Pstd. Cr. Memos;
                                                   Editable=No }
    { 7189;   ;No. of Quotes       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Quote),
                                                                                              Buy-from Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Quotes;
                                                   Editable=No }
    { 7190;   ;No. of Blanket Orders;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Blanket Order),
                                                                                              Buy-from Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Blanket Orders;
                                                   Editable=No }
    { 7191;   ;No. of Orders       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Order),
                                                                                              Buy-from Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Orders }
    { 7192;   ;No. of Invoices     ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Invoice),
                                                                                              Buy-from Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Invoices;
                                                   Editable=No }
    { 7193;   ;No. of Return Orders;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Return Order),
                                                                                              Buy-from Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Return Orders;
                                                   Editable=No }
    { 7194;   ;No. of Credit Memos ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Credit Memo),
                                                                                              Buy-from Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Credit Memos;
                                                   Editable=No }
    { 7195;   ;No. of Order Addresses;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Count("Order Address" WHERE (Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Order Addresses;
                                                   Editable=No }
    { 7196;   ;Pay-to No. of Quotes;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Quote),
                                                                                              Pay-to Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=Pay-to No. of Quotes;
                                                   Editable=No }
    { 7197;   ;Pay-to No. of Blanket Orders;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Blanket Order),
                                                                                              Pay-to Vendor No.=FIELD(No.)));
                                                   CaptionML=ENU=Pay-to No. of Blanket Orders }
    { 7600;   ;Base Calendar Code  ;Code10        ;TableRelation="Base Calendar";
                                                   CaptionML=ENU=Base Calendar Code }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Search Name                              }
    {    ;Vendor Posting Group                     }
    {    ;Currency Code                            }
    {    ;Priority                                 }
    {    ;Country/Region Code                      }
    {    ;Gen. Bus. Posting Group                  }
    {    ;VAT Registration No.                     }
    {    ;Name                                    ;KeyGroups=SearchCol }
    {    ;City                                    ;KeyGroups=SearchCol }
    {    ;Post Code                               ;KeyGroups=SearchCol }
    {    ;Phone No.                               ;KeyGroups=SearchCol }
    {    ;Contact                                 ;KeyGroups=SearchCol }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Name,City,Post Code,Phone No.,Contact }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot delete %1 %2 because there is at least one outstanding Purchase %3 for this vendor.';
      Text002@1001 : TextConst 'ENU=You have set %1 to %2. Do you want to update the %3 price list accordingly?';
      Text003@1002 : TextConst 'ENU=Do you wish to create a contact for %1 %2?';
      PurchSetup@1003 : Record 312;
      CommentLine@1005 : Record 97;
      PurchOrderLine@1006 : Record 39;
      PostCode@1007 : Record 225;
      VendBankAcc@1008 : Record 288;
      OrderAddr@1009 : Record 224;
      GenBusPostingGrp@1010 : Record 250;
      ItemCrossReference@1016 : Record 5717;
      RMSetup@1020 : Record 5079;
      ServiceItem@1024 : Record 5940;
      NoSeriesMgt@1011 : Codeunit 396;
      MoveEntries@1012 : Codeunit 361;
      UpdateContFromVend@1013 : Codeunit 5057;
      DimMgt@1014 : Codeunit 408;
      InsertFromContact@1015 : Boolean;
      Text004@1019 : TextConst 'ENU=Contact %1 %2 is not related to vendor %3 %4.';
      Text005@1021 : TextConst 'ENU=post';
      Text006@1022 : TextConst 'ENU=create';
      Text007@1023 : TextConst 'ENU=You cannot %1 this type of document when Vendor %2 is blocked with type %3';
      Text008@1025 : TextConst 'ENU=The %1 %2 has been assigned to %3 %4.\The same %1 cannot be entered on more than one %3.';
      Text009@1027 : TextConst 'ENU=Reconciling IC transactions may be difficult if you change IC Partner Code because this %1 has ledger entries in a fiscal year that has not yet been closed.\ Do you still want to change the IC Partner Code?';
      Text010@1026 : TextConst 'ENU=You cannot change the contents of the %1 field because this %2 has one or more open ledger entries.';
      Text011@1004 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';

    PROCEDURE AssistEdit@2(OldVend@1000 : Record 23) : Boolean;
    VAR
      Vend@1001 : Record 23;
    BEGIN
      WITH Vend DO BEGIN
        Vend := Rec;
        PurchSetup.GET;
        PurchSetup.TESTFIELD("Vendor Nos.");
        IF NoSeriesMgt.SelectSeries(PurchSetup."Vendor Nos.",OldVend."No. Series","No. Series") THEN BEGIN
          PurchSetup.GET;
          PurchSetup.TESTFIELD("Vendor Nos.");
          NoSeriesMgt.SetSeries("No.");
          Rec := Vend;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.SaveDefaultDim(DATABASE::Vendor,"No.",FieldNumber,ShortcutDimCode);
      MODIFY;
    END;

    PROCEDURE LookupShortcutDimCode@28(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.SaveDefaultDim(DATABASE::Vendor,"No.",FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE ShowContact@1();
    VAR
      ContBusRel@1000 : Record 5054;
      Cont@1001 : Record 5050;
    BEGIN
      IF "No." = '' THEN
        EXIT;

      ContBusRel.SETCURRENTKEY("Link to Table","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
      ContBusRel.SETRANGE("No.","No.");
      IF NOT ContBusRel.FINDFIRST THEN BEGIN
        IF NOT CONFIRM(Text003,FALSE,TABLECAPTION,"No.") THEN
          EXIT;
        UpdateContFromVend.InsertNewContact(Rec,FALSE);
        ContBusRel.FINDFIRST;
      END;
      COMMIT;

      Cont.SETCURRENTKEY("Company Name","Company No.",Type,Name);
      Cont.SETRANGE("Company No.",ContBusRel."Contact No.");
      PAGE.RUN(PAGE::"Contact List",Cont);
    END;

    PROCEDURE SetInsertFromContact@3(FromContact@1000 : Boolean);
    BEGIN
      InsertFromContact := FromContact;
    END;

    PROCEDURE CheckBlockedVendOnDocs@4(Vend2@1003 : Record 23;Transaction@1000 : Boolean);
    BEGIN
      IF Vend2.Blocked = Vend2.Blocked::All THEN
        VendBlockedErrorMessage(Vend2,Transaction);
    END;

    PROCEDURE CheckBlockedVendOnJnls@5(Vend2@1005 : Record 23;DocType@1004 : ' ,Payment,Invoice,Credit Memo,Finance Charge,Reminder,Refund';Transaction@1003 : Boolean);
    BEGIN
      WITH Vend2 DO BEGIN
        IF (Blocked = Blocked::All) OR
           (Blocked = Blocked::Payment) AND (DocType = DocType::Payment)
        THEN
          VendBlockedErrorMessage(Vend2,Transaction);
      END;
    END;

    PROCEDURE VendBlockedErrorMessage@6(Vend2@1001 : Record 23;Transaction@1002 : Boolean);
    VAR
      Action@1000 : Text[30];
    BEGIN
      IF Transaction THEN
        Action := Text005
      ELSE
        Action := Text006;
      ERROR(Text007,Action,Vend2."No.",Vend2.Blocked);
    END;

    PROCEDURE DisplayMap@7();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::Vendor,GETPOSITION)
      ELSE
        MESSAGE(Text011);
    END;

    PROCEDURE CalcOverDueBalance@8() OverDueBalance : Decimal;
    VAR
      VendLedgerEntry@1000 : Record 25;
    BEGIN
      VendLedgerEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date","Currency Code");
      VendLedgerEntry.SETRANGE("Vendor No.","No.");
      VendLedgerEntry.SETRANGE(Open,TRUE);
      VendLedgerEntry.SETFILTER("Due Date",'<%1',WORKDATE);
      VendLedgerEntry.SETAUTOCALCFIELDS("Amount (LCY)");
      IF VendLedgerEntry.FINDSET THEN
        REPEAT
          OverDueBalance += VendLedgerEntry."Amount (LCY)";
        UNTIL VendLedgerEntry.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

OBJECT Table 36 Sales Header
{
  OBJECT-PROPERTIES
  {
    Date=10/10/12;
    Time=[ 2:49:58 AM];
    Modified=Yes;
    Version List=NAVW17.00,Lync;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Sell-to Customer Name;
    OnInsert=BEGIN
               IF "No." = '' THEN BEGIN
                 TestNoSeries;
                 NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series","Posting Date","No.","No. Series");
               END;

               InitRecord;
               InsertMode := TRUE;

               IF GETFILTER("Sell-to Customer No.") <> '' THEN
                 IF GETRANGEMIN("Sell-to Customer No.") = GETRANGEMAX("Sell-to Customer No.") THEN
                   VALIDATE("Sell-to Customer No.",GETRANGEMIN("Sell-to Customer No."));

               IF GETFILTER("Sell-to Contact No.") <> '' THEN
                 IF GETRANGEMIN("Sell-to Contact No.") = GETRANGEMAX("Sell-to Contact No.") THEN
                   VALIDATE("Sell-to Contact No.",GETRANGEMIN("Sell-to Contact No."));

               "Doc. No. Occurrence" := ArchiveManagement.GetNextOccurrenceNo(DATABASE::"Sales Header","Document Type","No.");
             END;

    OnDelete=VAR
               Opp@1000 : Record 5092;
               TempOpportunityEntry@1001 : TEMPORARY Record 5093;
             BEGIN
               DOPaymentTransLogMgt.ValidateCanDeleteDocument("Payment Method Code","Document Type",FORMAT("Document Type"),"No.");

               IF NOT UserSetupMgt.CheckRespCenter(0,"Responsibility Center") THEN
                 ERROR(
                   Text022,
                   RespCenter.TABLECAPTION,UserSetupMgt.GetSalesFilter);

               IF ("Opportunity No." <> '') AND
                  ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order])
               THEN BEGIN
                 IF Opp.GET("Opportunity No.") THEN BEGIN
                   IF "Document Type" = "Document Type"::Order THEN BEGIN
                     IF NOT CONFIRM(Text040,TRUE) THEN
                       ERROR(Text044);
                     TempOpportunityEntry.INIT;
                     TempOpportunityEntry.VALIDATE("Opportunity No.",Opp."No.");
                     TempOpportunityEntry."Sales Cycle Code" := Opp."Sales Cycle Code";
                     TempOpportunityEntry."Contact No." := Opp."Contact No.";
                     TempOpportunityEntry."Contact Company No." := Opp."Contact Company No.";
                     TempOpportunityEntry."Salesperson Code" := Opp."Salesperson Code";
                     TempOpportunityEntry."Campaign No." := Opp."Campaign No.";
                     TempOpportunityEntry."Action Taken" := TempOpportunityEntry."Action Taken"::Lost;
                     TempOpportunityEntry.INSERT;
                     TempOpportunityEntry.SETRANGE("Action Taken",TempOpportunityEntry."Action Taken"::Lost);
                     PAGE.RUNMODAL(PAGE::"Close Opportunity",TempOpportunityEntry);
                     IF Opp.GET("Opportunity No.") THEN
                       IF Opp.Status <> Opp.Status::Lost THEN
                         ERROR(Text043);
                   END;
                   Opp."Sales Document Type" := Opp."Sales Document Type"::" ";
                   Opp."Sales Document No." := '';
                   Opp.MODIFY;
                   "Opportunity No." := '';
                 END;
               END;

               SalesPost.DeleteHeader(
                 Rec,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,SalesInvHeaderPrepmt,SalesCrMemoHeaderPrepmt);
               VALIDATE("Applies-to ID",'');

               ApprovalMgt.DeleteApprovalEntry(DATABASE::"Sales Header","Document Type","No.");
               SalesLine.RESET;
               SalesLine.LOCKTABLE;

               WhseRequest.SETRANGE("Source Type",DATABASE::"Sales Line");
               WhseRequest.SETRANGE("Source Subtype","Document Type");
               WhseRequest.SETRANGE("Source No.","No.");
               WhseRequest.DELETEALL(TRUE);

               SalesLine.SETRANGE("Document Type","Document Type");
               SalesLine.SETRANGE("Document No.","No.");
               SalesLine.SETRANGE(Type,SalesLine.Type::"Charge (Item)");

               DeleteSalesLines;
               SalesLine.SETRANGE(Type);
               DeleteSalesLines;

               SalesCommentLine.SETRANGE("Document Type","Document Type");
               SalesCommentLine.SETRANGE("No.","No.");
               SalesCommentLine.DELETEALL;

               IF (SalesShptHeader."No." <> '') OR
                  (SalesInvHeader."No." <> '') OR
                  (SalesCrMemoHeader."No." <> '') OR
                  (ReturnRcptHeader."No." <> '') OR
                  (SalesInvHeaderPrepmt."No." <> '') OR
                  (SalesCrMemoHeaderPrepmt."No." <> '')
               THEN BEGIN
                 DELETE;
                 COMMIT;

                 IF SalesShptHeader."No." <> '' THEN
                   IF CONFIRM(
                        Text000,TRUE,
                        SalesShptHeader."No.")
                   THEN BEGIN
                     SalesShptHeader.SETRECFILTER;
                     SalesShptHeader.PrintRecords(TRUE);
                   END;

                 IF SalesInvHeader."No." <> '' THEN
                   IF CONFIRM(
                        Text001,TRUE,
                        SalesInvHeader."No.")
                   THEN BEGIN
                     SalesInvHeader.SETRECFILTER;
                     SalesInvHeader.PrintRecords(TRUE);
                   END;

                 IF SalesCrMemoHeader."No." <> '' THEN
                   IF CONFIRM(
                        Text002,TRUE,
                        SalesCrMemoHeader."No.")
                   THEN BEGIN
                     SalesCrMemoHeader.SETRECFILTER;
                     SalesCrMemoHeader.PrintRecords(TRUE);
                   END;

                 IF ReturnRcptHeader."No." <> '' THEN
                   IF CONFIRM(
                        Text023,TRUE,
                        ReturnRcptHeader."No.")
                   THEN BEGIN
                     ReturnRcptHeader.SETRECFILTER;
                     ReturnRcptHeader.PrintRecords(TRUE);
                   END;

                 IF SalesInvHeaderPrepmt."No." <> '' THEN
                   IF CONFIRM(
                        Text055,TRUE,
                        SalesInvHeader."No.")
                   THEN BEGIN
                     SalesInvHeaderPrepmt.SETRECFILTER;
                     SalesInvHeaderPrepmt.PrintRecords(TRUE);
                   END;

                 IF SalesCrMemoHeaderPrepmt."No." <> '' THEN
                   IF CONFIRM(
                        Text054,TRUE,
                        SalesCrMemoHeaderPrepmt."No.")
                   THEN BEGIN
                     SalesCrMemoHeaderPrepmt.SETRECFILTER;
                     SalesCrMemoHeaderPrepmt.PrintRecords(TRUE);
                   END;
               END;
             END;

    OnRename=BEGIN
               ERROR(Text003,TABLECAPTION);
             END;

    CaptionML=ENU=Sales Header;
    LookupPageID=Page45;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order }
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Sell-to Customer No." <> xRec."Sell-to Customer No.") AND
                                                                   (xRec."Sell-to Customer No." <> '')
                                                                THEN BEGIN
                                                                  IF ("Opportunity No." <> '') AND ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) THEN
                                                                    ERROR(
                                                                      Text062,
                                                                      FIELDCAPTION("Sell-to Customer No."),
                                                                      FIELDCAPTION("Opportunity No."),
                                                                      "Opportunity No.",
                                                                      "Document Type");
                                                                  IF HideValidationDialog OR NOT GUIALLOWED THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Sell-to Customer No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF "Sell-to Customer No." = '' THEN BEGIN
                                                                      IF SalesLine.FINDFIRST THEN
                                                                        ERROR(
                                                                          Text005,
                                                                          FIELDCAPTION("Sell-to Customer No."));
                                                                      INIT;
                                                                      SalesSetup.GET;
                                                                      "No. Series" := xRec."No. Series";
                                                                      InitRecord;
                                                                      IF xRec."Shipping No." <> '' THEN BEGIN
                                                                        "Shipping No. Series" := xRec."Shipping No. Series";
                                                                        "Shipping No." := xRec."Shipping No.";
                                                                      END;
                                                                      IF xRec."Posting No." <> '' THEN BEGIN
                                                                        "Posting No. Series" := xRec."Posting No. Series";
                                                                        "Posting No." := xRec."Posting No.";
                                                                      END;
                                                                      IF xRec."Return Receipt No." <> '' THEN BEGIN
                                                                        "Return Receipt No. Series" := xRec."Return Receipt No. Series";
                                                                        "Return Receipt No." := xRec."Return Receipt No.";
                                                                      END;
                                                                      IF xRec."Prepayment No." <> '' THEN BEGIN
                                                                        "Prepayment No. Series" := xRec."Prepayment No. Series";
                                                                        "Prepayment No." := xRec."Prepayment No.";
                                                                      END;
                                                                      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
                                                                        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
                                                                      END;
                                                                      EXIT;
                                                                    END;
                                                                    IF "Document Type" = "Document Type"::Order THEN
                                                                      SalesLine.SETFILTER("Quantity Shipped",'<>0')
                                                                    ELSE
                                                                      IF "Document Type" = "Document Type"::Invoice THEN BEGIN
                                                                        SalesLine.SETRANGE("Sell-to Customer No.",xRec."Sell-to Customer No.");
                                                                        SalesLine.SETFILTER("Shipment No.",'<>%1','');
                                                                      END;

                                                                    IF SalesLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::Order THEN
                                                                        SalesLine.TESTFIELD("Quantity Shipped",0)
                                                                      ELSE
                                                                        SalesLine.TESTFIELD("Shipment No.",'');
                                                                    SalesLine.SETRANGE("Shipment No.");
                                                                    SalesLine.SETRANGE("Quantity Shipped");

                                                                    IF "Document Type" = "Document Type"::Order THEN BEGIN
                                                                      SalesLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
                                                                      IF SalesLine.FIND('-') THEN
                                                                        SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      SalesLine.SETRANGE("Prepmt. Amt. Inv.");
                                                                    END;

                                                                    IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                      SalesLine.SETFILTER("Return Qty. Received",'<>0')
                                                                    ELSE
                                                                      IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                                                                        SalesLine.SETRANGE("Sell-to Customer No.",xRec."Sell-to Customer No.");
                                                                        SalesLine.SETFILTER("Return Receipt No.",'<>%1','');
                                                                      END;

                                                                    IF SalesLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                        SalesLine.TESTFIELD("Return Qty. Received",0)
                                                                      ELSE
                                                                        SalesLine.TESTFIELD("Return Receipt No.",'');
                                                                    SalesLine.RESET
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Sell-to Customer No." <> "Sell-to Customer No.")
                                                                THEN BEGIN
                                                                  SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Purch. Order Line No.",'<>0');
                                                                  IF NOT SalesLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Sell-to Customer No."));
                                                                  SalesLine.RESET;
                                                                END;

                                                                GetCust("Sell-to Customer No.");

                                                                Cust.CheckBlockedCustOnDocs(Cust,"Document Type",FALSE,FALSE);
                                                                Cust.TESTFIELD("Gen. Bus. Posting Group");
                                                                "Sell-to Customer Template Code" := '';
                                                                "Sell-to Customer Name" := Cust.Name;
                                                                "Sell-to Customer Name 2" := Cust."Name 2";
                                                                "Sell-to Address" := Cust.Address;
                                                                "Sell-to Address 2" := Cust."Address 2";
                                                                "Sell-to City" := Cust.City;
                                                                "Sell-to Post Code" := Cust."Post Code";
                                                                "Sell-to County" := Cust.County;
                                                                "Sell-to Country/Region Code" := Cust."Country/Region Code";
                                                                IF NOT SkipSellToContact THEN
                                                                  "Sell-to Contact" := Cust.Contact;
                                                                "Gen. Bus. Posting Group" := Cust."Gen. Bus. Posting Group";
                                                                "VAT Bus. Posting Group" := Cust."VAT Bus. Posting Group";
                                                                "Tax Area Code" := Cust."Tax Area Code";
                                                                "Tax Liable" := Cust."Tax Liable";
                                                                "VAT Registration No." := Cust."VAT Registration No.";
                                                                "VAT Country/Region Code" := Cust."Country/Region Code";
                                                                "Shipping Advice" := Cust."Shipping Advice";
                                                                "Responsibility Center" := UserSetupMgt.GetRespCenter(0,Cust."Responsibility Center");
                                                                VALIDATE("Location Code",UserSetupMgt.GetLocation(0,Cust."Location Code","Responsibility Center"));

                                                                IF "Sell-to Customer No." = xRec."Sell-to Customer No." THEN BEGIN
                                                                  IF ShippedSalesLinesExist OR ReturnReceiptExist THEN BEGIN
                                                                    TESTFIELD("VAT Bus. Posting Group",xRec."VAT Bus. Posting Group");
                                                                    TESTFIELD("Gen. Bus. Posting Group",xRec."Gen. Bus. Posting Group");
                                                                  END;
                                                                END;

                                                                "Sell-to IC Partner Code" := Cust."IC Partner Code";
                                                                "Send IC Document" := ("Sell-to IC Partner Code" <> '') AND ("IC Direction" = "IC Direction"::Outgoing);

                                                                IF Cust."Bill-to Customer No." <> '' THEN
                                                                  VALIDATE("Bill-to Customer No.",Cust."Bill-to Customer No.")
                                                                ELSE BEGIN
                                                                  IF "Bill-to Customer No." = "Sell-to Customer No." THEN
                                                                    SkipBillToContact := TRUE;
                                                                  VALIDATE("Bill-to Customer No.","Sell-to Customer No.");
                                                                  SkipBillToContact := FALSE;
                                                                END;
                                                                VALIDATE("Ship-to Code",'');

                                                                GetShippingTime(FIELDNO("Sell-to Customer No."));

                                                                IF (xRec."Sell-to Customer No." <> "Sell-to Customer No.") OR
                                                                   (xRec."Currency Code" <> "Currency Code") OR
                                                                   (xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group") OR
                                                                   (xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group")
                                                                THEN
                                                                  RecreateSalesLines(FIELDCAPTION("Sell-to Customer No."));

                                                                IF NOT SkipSellToContact THEN
                                                                  UpdateSellToCont("Sell-to Customer No.");
                                                              END;

                                                   CaptionML=ENU=Sell-to Customer No. }
    { 3   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  NoSeriesMgt.TestManual(GetNoSeriesCode);
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 4   ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                BilltoCustomerNoChanged := xRec."Bill-to Customer No." <> "Bill-to Customer No.";
                                                                IF BilltoCustomerNoChanged AND
                                                                   (xRec."Bill-to Customer No." <> '')
                                                                THEN BEGIN
                                                                  VALIDATE("Credit Card No.",'');
                                                                  IF HideValidationDialog OR NOT GUIALLOWED THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Bill-to Customer No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF "Document Type" = "Document Type"::Order THEN
                                                                      SalesLine.SETFILTER("Quantity Shipped",'<>0')
                                                                    ELSE
                                                                      IF "Document Type" = "Document Type"::Invoice THEN
                                                                        SalesLine.SETFILTER("Shipment No.",'<>%1','');

                                                                    IF SalesLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::Order THEN
                                                                        SalesLine.TESTFIELD("Quantity Shipped",0)
                                                                      ELSE
                                                                        SalesLine.TESTFIELD("Shipment No.",'');
                                                                    SalesLine.SETRANGE("Shipment No.");
                                                                    SalesLine.SETRANGE("Quantity Shipped");

                                                                    IF "Document Type" = "Document Type"::Order THEN BEGIN
                                                                      SalesLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
                                                                      IF SalesLine.FIND('-') THEN
                                                                        SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      SalesLine.SETRANGE("Prepmt. Amt. Inv.");
                                                                    END;

                                                                    IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                      SalesLine.SETFILTER("Return Qty. Received",'<>0')
                                                                    ELSE
                                                                      IF "Document Type" = "Document Type"::"Credit Memo" THEN
                                                                        SalesLine.SETFILTER("Return Receipt No.",'<>%1','');

                                                                    IF SalesLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                        SalesLine.TESTFIELD("Return Qty. Received",0)
                                                                      ELSE
                                                                        SalesLine.TESTFIELD("Return Receipt No.",'');
                                                                    SalesLine.RESET
                                                                  END ELSE
                                                                    "Bill-to Customer No." := xRec."Bill-to Customer No.";
                                                                END;

                                                                GetCust("Bill-to Customer No.");
                                                                Cust.CheckBlockedCustOnDocs(Cust,"Document Type",FALSE,FALSE);
                                                                Cust.TESTFIELD("Customer Posting Group");
                                                                CheckCrLimit;
                                                                "Bill-to Customer Template Code" := '';
                                                                "Bill-to Name" := Cust.Name;
                                                                "Bill-to Name 2" := Cust."Name 2";
                                                                "Bill-to Address" := Cust.Address;
                                                                "Bill-to Address 2" := Cust."Address 2";
                                                                "Bill-to City" := Cust.City;
                                                                "Bill-to Post Code" := Cust."Post Code";
                                                                "Bill-to County" := Cust.County;
                                                                "Bill-to Country/Region Code" := Cust."Country/Region Code";
                                                                IF NOT SkipBillToContact THEN
                                                                  "Bill-to Contact" := Cust.Contact;
                                                                "Payment Terms Code" := Cust."Payment Terms Code";
                                                                "Prepmt. Payment Terms Code" := Cust."Payment Terms Code";

                                                                IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                                                                  "Payment Method Code" := '';
                                                                  IF PaymentTerms.GET("Payment Terms Code") THEN
                                                                    IF PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN
                                                                      "Payment Method Code" := Cust."Payment Method Code"
                                                                END ELSE
                                                                  "Payment Method Code" := Cust."Payment Method Code";

                                                                "Gen. Bus. Posting Group" := Cust."Gen. Bus. Posting Group";
                                                                GLSetup.GET;
                                                                IF GLSetup."Bill-to/Sell-to VAT Calc." = GLSetup."Bill-to/Sell-to VAT Calc."::"Bill-to/Pay-to No." THEN BEGIN
                                                                  "VAT Bus. Posting Group" := Cust."VAT Bus. Posting Group";
                                                                  "VAT Country/Region Code" := Cust."Country/Region Code";
                                                                  "VAT Registration No." := Cust."VAT Registration No.";
                                                                END;
                                                                "Customer Posting Group" := Cust."Customer Posting Group";
                                                                "Currency Code" := Cust."Currency Code";
                                                                "Customer Price Group" := Cust."Customer Price Group";
                                                                "Prices Including VAT" := Cust."Prices Including VAT";
                                                                "Allow Line Disc." := Cust."Allow Line Disc.";
                                                                "Invoice Disc. Code" := Cust."Invoice Disc. Code";
                                                                "Customer Disc. Group" := Cust."Customer Disc. Group";
                                                                "Language Code" := Cust."Language Code";
                                                                "Salesperson Code" := Cust."Salesperson Code";
                                                                "Combine Shipments" := Cust."Combine Shipments";
                                                                Reserve := Cust.Reserve;
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  "Prepayment %" := Cust."Prepayment %";

                                                                IF NOT BilltoCustomerNoChanged THEN BEGIN
                                                                  IF ShippedSalesLinesExist THEN BEGIN
                                                                    TESTFIELD("Customer Disc. Group",xRec."Customer Disc. Group");
                                                                    TESTFIELD("Currency Code",xRec."Currency Code");
                                                                  END;
                                                                END;

                                                                CreateDim(
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");

                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Prepmt. Payment Terms Code");
                                                                VALIDATE("Payment Method Code");
                                                                VALIDATE("Currency Code");
                                                                VALIDATE("Prepayment %");

                                                                IF (xRec."Sell-to Customer No." = "Sell-to Customer No.") AND
                                                                   BilltoCustomerNoChanged
                                                                THEN BEGIN
                                                                  RecreateSalesLines(FIELDCAPTION("Bill-to Customer No."));
                                                                  BilltoCustomerNoChanged := FALSE;
                                                                END;
                                                                IF NOT SkipBillToContact THEN
                                                                  UpdateBillToCont("Bill-to Customer No.");

                                                                "Bill-to IC Partner Code" := Cust."IC Partner Code";
                                                                "Send IC Document" := ("Bill-to IC Partner Code" <> '') AND ("IC Direction" = "IC Direction"::Outgoing);
                                                              END;

                                                   CaptionML=ENU=Bill-to Customer No.;
                                                   NotBlank=Yes }
    { 5   ;   ;Bill-to Name        ;Text50        ;CaptionML=ENU=Bill-to Name }
    { 6   ;   ;Bill-to Name 2      ;Text50        ;CaptionML=ENU=Bill-to Name 2 }
    { 7   ;   ;Bill-to Address     ;Text50        ;CaptionML=ENU=Bill-to Address }
    { 8   ;   ;Bill-to Address 2   ;Text50        ;CaptionML=ENU=Bill-to Address 2 }
    { 9   ;   ;Bill-to City        ;Text30        ;TableRelation="Post Code".City;
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Bill-to City }
    { 10  ;   ;Bill-to Contact     ;Text50        ;CaptionML=ENU=Bill-to Contact }
    { 11  ;   ;Your Reference      ;Text35        ;CaptionML=ENU=Your Reference }
    { 12  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Sell-to Customer No.));
                                                   OnValidate=BEGIN
                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Ship-to Code" <> "Ship-to Code")
                                                                THEN BEGIN
                                                                  SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Purch. Order Line No.",'<>0');
                                                                  IF NOT SalesLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Ship-to Code"));
                                                                  SalesLine.RESET;
                                                                END;

                                                                IF ("Document Type" <> "Document Type"::"Return Order") AND
                                                                   ("Document Type" <> "Document Type"::"Credit Memo")
                                                                THEN BEGIN
                                                                  IF "Ship-to Code" <> '' THEN BEGIN
                                                                    IF xRec."Ship-to Code" <> '' THEN
                                                                      BEGIN
                                                                      GetCust("Sell-to Customer No.");
                                                                      IF Cust."Location Code" <> '' THEN
                                                                        VALIDATE("Location Code",Cust."Location Code");
                                                                      "Tax Area Code" := Cust."Tax Area Code";
                                                                    END;
                                                                    ShipToAddr.GET("Sell-to Customer No.","Ship-to Code");
                                                                    "Ship-to Name" := ShipToAddr.Name;
                                                                    "Ship-to Name 2" := ShipToAddr."Name 2";
                                                                    "Ship-to Address" := ShipToAddr.Address;
                                                                    "Ship-to Address 2" := ShipToAddr."Address 2";
                                                                    "Ship-to City" := ShipToAddr.City;
                                                                    "Ship-to Post Code" := ShipToAddr."Post Code";
                                                                    "Ship-to County" := ShipToAddr.County;
                                                                    VALIDATE("Ship-to Country/Region Code",ShipToAddr."Country/Region Code");
                                                                    "Ship-to Contact" := ShipToAddr.Contact;
                                                                    "Shipment Method Code" := ShipToAddr."Shipment Method Code";
                                                                    IF ShipToAddr."Location Code" <> '' THEN
                                                                      VALIDATE("Location Code",ShipToAddr."Location Code");
                                                                    "Shipping Agent Code" := ShipToAddr."Shipping Agent Code";
                                                                    "Shipping Agent Service Code" := ShipToAddr."Shipping Agent Service Code";
                                                                    IF ShipToAddr."Tax Area Code" <> '' THEN
                                                                      "Tax Area Code" := ShipToAddr."Tax Area Code";
                                                                    "Tax Liable" := ShipToAddr."Tax Liable";
                                                                  END ELSE
                                                                    IF "Sell-to Customer No." <> '' THEN BEGIN
                                                                      GetCust("Sell-to Customer No.");
                                                                      "Ship-to Name" := Cust.Name;
                                                                      "Ship-to Name 2" := Cust."Name 2";
                                                                      "Ship-to Address" := Cust.Address;
                                                                      "Ship-to Address 2" := Cust."Address 2";
                                                                      "Ship-to City" := Cust.City;
                                                                      "Ship-to Post Code" := Cust."Post Code";
                                                                      "Ship-to County" := Cust.County;
                                                                      VALIDATE("Ship-to Country/Region Code",Cust."Country/Region Code");
                                                                      "Ship-to Contact" := Cust.Contact;
                                                                      "Shipment Method Code" := Cust."Shipment Method Code";
                                                                      "Tax Area Code" := Cust."Tax Area Code";
                                                                      "Tax Liable" := Cust."Tax Liable";
                                                                      IF Cust."Location Code" <> '' THEN
                                                                        VALIDATE("Location Code",Cust."Location Code");
                                                                      "Shipping Agent Code" := Cust."Shipping Agent Code";
                                                                      "Shipping Agent Service Code" := Cust."Shipping Agent Service Code";
                                                                    END;
                                                                END;

                                                                GetShippingTime(FIELDNO("Ship-to Code"));

                                                                IF (xRec."Sell-to Customer No." = "Sell-to Customer No.") AND
                                                                   (xRec."Ship-to Code" <> "Ship-to Code")
                                                                THEN
                                                                  IF (xRec."VAT Country/Region Code" <> "VAT Country/Region Code") OR
                                                                     (xRec."Tax Area Code" <> "Tax Area Code")
                                                                  THEN
                                                                    RecreateSalesLines(FIELDCAPTION("Ship-to Code"))
                                                                  ELSE BEGIN
                                                                    IF xRec."Shipping Agent Code" <> "Shipping Agent Code" THEN
                                                                      MessageIfSalesLinesExist(FIELDCAPTION("Shipping Agent Code"));
                                                                    IF xRec."Shipping Agent Service Code" <> "Shipping Agent Service Code" THEN
                                                                      MessageIfSalesLinesExist(FIELDCAPTION("Shipping Agent Service Code"));
                                                                    IF xRec."Tax Liable" <> "Tax Liable" THEN
                                                                      VALIDATE("Tax Liable");
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=Ship-to Code }
    { 13  ;   ;Ship-to Name        ;Text50        ;CaptionML=ENU=Ship-to Name }
    { 14  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=ENU=Ship-to Name 2 }
    { 15  ;   ;Ship-to Address     ;Text50        ;CaptionML=ENU=Ship-to Address }
    { 16  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=ENU=Ship-to Address 2 }
    { 17  ;   ;Ship-to City        ;Text30        ;TableRelation="Post Code".City;
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Ship-to City }
    { 18  ;   ;Ship-to Contact     ;Text50        ;CaptionML=ENU=Ship-to Contact }
    { 19  ;   ;Order Date          ;Date          ;OnValidate=BEGIN
                                                                IF ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND
                                                                   NOT ("Order Date" = xRec."Order Date")
                                                                THEN
                                                                  PriceMessageIfSalesLinesExist(FIELDCAPTION("Order Date"));
                                                              END;

                                                   CaptionML=ENU=Order Date }
    { 20  ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                TestNoSeriesDate(
                                                                  "Posting No.","Posting No. Series",
                                                                  FIELDCAPTION("Posting No."),FIELDCAPTION("Posting No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepayment No.","Prepayment No. Series",
                                                                  FIELDCAPTION("Prepayment No."),FIELDCAPTION("Prepayment No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepmt. Cr. Memo No.","Prepmt. Cr. Memo No. Series",
                                                                  FIELDCAPTION("Prepmt. Cr. Memo No."),FIELDCAPTION("Prepmt. Cr. Memo No. Series"));

                                                                VALIDATE("Document Date","Posting Date");

                                                                IF ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) AND
                                                                   NOT ("Posting Date" = xRec."Posting Date")
                                                                THEN
                                                                  PriceMessageIfSalesLinesExist(FIELDCAPTION("Posting Date"));

                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  UpdateCurrencyFactor;
                                                                  IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                    ConfirmUpdateCurrencyFactor;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Posting Date }
    { 21  ;   ;Shipment Date       ;Date          ;OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Shipment Date"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=ENU=Shipment Date }
    { 22  ;   ;Posting Description ;Text50        ;CaptionML=ENU=Posting Description }
    { 23  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   OnValidate=BEGIN
                                                                IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                  PaymentTerms.GET("Payment Terms Code");
                                                                  IF (("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
                                                                      NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos")
                                                                  THEN BEGIN
                                                                    VALIDATE("Due Date","Document Date");
                                                                    VALIDATE("Pmt. Discount Date",0D);
                                                                    VALIDATE("Payment Discount %",0);
                                                                  END ELSE BEGIN
                                                                    "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    "Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    IF NOT UpdateDocumentDate THEN
                                                                      VALIDATE("Payment Discount %",PaymentTerms."Discount %")
                                                                  END;
                                                                END ELSE BEGIN
                                                                  VALIDATE("Due Date","Document Date");
                                                                  IF NOT UpdateDocumentDate THEN BEGIN
                                                                    VALIDATE("Pmt. Discount Date",0D);
                                                                    VALIDATE("Payment Discount %",0);
                                                                  END;
                                                                END;
                                                                IF xRec."Payment Terms Code" = "Prepmt. Payment Terms Code" THEN BEGIN
                                                                  IF xRec."Prepayment Due Date" = 0D THEN
                                                                    "Prepayment Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                  VALIDATE("Prepmt. Payment Terms Code","Payment Terms Code");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Payment Terms Code }
    { 24  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 25  ;   ;Payment Discount %  ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF "Payment Discount %" < GLSetup."VAT Tolerance %" THEN
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                ELSE
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                              END;

                                                   CaptionML=ENU=Payment Discount %;
                                                   DecimalPlaces=0:5 }
    { 26  ;   ;Pmt. Discount Date  ;Date          ;CaptionML=ENU=Pmt. Discount Date }
    { 27  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=ENU=Shipment Method Code }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Location Code" <> xRec."Location Code") AND
                                                                   (xRec."Sell-to Customer No." = "Sell-to Customer No.")
                                                                THEN
                                                                  MessageIfSalesLinesExist(FIELDCAPTION("Location Code"));

                                                                UpdateShipToAddress;

                                                                IF "Location Code" <> '' THEN BEGIN
                                                                  IF Location.GET("Location Code") THEN
                                                                    "Outbound Whse. Handling Time" := Location."Outbound Whse. Handling Time";
                                                                END ELSE BEGIN
                                                                  IF InvtSetup.GET THEN
                                                                    "Outbound Whse. Handling Time" := InvtSetup."Outbound Whse. Handling Time";
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 29  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 30  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 31  ;   ;Customer Posting Group;Code10      ;TableRelation="Customer Posting Group";
                                                   CaptionML=ENU=Customer Posting Group;
                                                   Editable=No }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date")]) OR ("Currency Code" <> xRec."Currency Code") THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                DOPaymentTransLogMgt.ValidateHasNoValidTransactions("Document Type",FORMAT("Document Type"),"No.");
                                                                IF (CurrFieldNo <> FIELDNO("Currency Code")) AND ("Currency Code" = xRec."Currency Code") THEN
                                                                  UpdateCurrencyFactor
                                                                ELSE BEGIN
                                                                  IF "Currency Code" <> xRec."Currency Code" THEN BEGIN
                                                                    UpdateCurrencyFactor;
                                                                    RecreateSalesLines(FIELDCAPTION("Currency Code"));
                                                                  END ELSE
                                                                    IF "Currency Code" <> '' THEN BEGIN
                                                                      UpdateCurrencyFactor;
                                                                      IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                        ConfirmUpdateCurrencyFactor;
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 33  ;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Currency Factor"),FALSE);
                                                              END;

                                                   CaptionML=ENU=Currency Factor;
                                                   DecimalPlaces=0:15;
                                                   MinValue=0;
                                                   Editable=No }
    { 34  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   OnValidate=BEGIN
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Customer Price Group"));
                                                              END;

                                                   CaptionML=ENU=Customer Price Group }
    { 35  ;   ;Prices Including VAT;Boolean       ;OnValidate=VAR
                                                                SalesLine@1000 : Record 37;
                                                                Currency@1001 : Record 4;
                                                                RecalculatePrice@1002 : Boolean;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF "Prices Including VAT" <> xRec."Prices Including VAT" THEN BEGIN
                                                                  SalesLine.SETRANGE("Document Type","Document Type");
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Job Contract Entry No.",'<>%1',0);
                                                                  IF SalesLine.FIND('-') THEN BEGIN
                                                                    SalesLine.TESTFIELD("Job No.",'');
                                                                    SalesLine.TESTFIELD("Job Contract Entry No.",0);
                                                                  END;

                                                                  SalesLine.RESET;
                                                                  SalesLine.SETRANGE("Document Type","Document Type");
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Unit Price",'<>%1',0);
                                                                  SalesLine.SETFILTER("VAT %",'<>%1',0);
                                                                  IF SalesLine.FINDFIRST THEN BEGIN
                                                                    RecalculatePrice :=
                                                                      CONFIRM(
                                                                        STRSUBSTNO(
                                                                          Text024,
                                                                          FIELDCAPTION("Prices Including VAT"),SalesLine.FIELDCAPTION("Unit Price")),
                                                                        TRUE);
                                                                    SalesLine.SetSalesHeader(Rec);

                                                                    IF "Currency Code" = '' THEN
                                                                      Currency.InitRoundingPrecision
                                                                    ELSE
                                                                      Currency.GET("Currency Code");
                                                                    SalesLine.LOCKTABLE;
                                                                    LOCKTABLE;
                                                                    SalesLine.FINDSET;
                                                                    REPEAT
                                                                      SalesLine.TESTFIELD("Quantity Invoiced",0);
                                                                      SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      IF NOT RecalculatePrice THEN BEGIN
                                                                        SalesLine."VAT Difference" := 0;
                                                                        SalesLine.InitOutstandingAmount;
                                                                      END ELSE
                                                                        IF "Prices Including VAT" THEN BEGIN
                                                                          SalesLine."Unit Price" :=
                                                                            ROUND(
                                                                              SalesLine."Unit Price" * (1 + (SalesLine."VAT %" / 100)),
                                                                              Currency."Unit-Amount Rounding Precision");
                                                                          IF SalesLine.Quantity <> 0 THEN BEGIN
                                                                            SalesLine."Line Discount Amount" :=
                                                                              ROUND(
                                                                                SalesLine.Quantity * SalesLine."Unit Price" * SalesLine."Line Discount %" / 100,
                                                                                Currency."Amount Rounding Precision");
                                                                            SalesLine.VALIDATE("Inv. Discount Amount",
                                                                              ROUND(
                                                                                SalesLine."Inv. Discount Amount" * (1 + (SalesLine."VAT %" / 100)),
                                                                                Currency."Amount Rounding Precision"));
                                                                          END;
                                                                        END ELSE BEGIN
                                                                          SalesLine."Unit Price" :=
                                                                            ROUND(
                                                                              SalesLine."Unit Price" / (1 + (SalesLine."VAT %" / 100)),
                                                                              Currency."Unit-Amount Rounding Precision");
                                                                          IF SalesLine.Quantity <> 0 THEN BEGIN
                                                                            SalesLine."Line Discount Amount" :=
                                                                              ROUND(
                                                                                SalesLine.Quantity * SalesLine."Unit Price" * SalesLine."Line Discount %" / 100,
                                                                                Currency."Amount Rounding Precision");
                                                                            SalesLine.VALIDATE("Inv. Discount Amount",
                                                                              ROUND(
                                                                                SalesLine."Inv. Discount Amount" / (1 + (SalesLine."VAT %" / 100)),
                                                                                Currency."Amount Rounding Precision"));
                                                                          END;
                                                                        END;
                                                                      SalesLine.MODIFY;
                                                                    UNTIL SalesLine.NEXT = 0;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Prices Including VAT }
    { 37  ;   ;Invoice Disc. Code  ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Invoice Disc. Code"));
                                                              END;

                                                   CaptionML=ENU=Invoice Disc. Code }
    { 40  ;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Customer Disc. Group"));
                                                              END;

                                                   CaptionML=ENU=Customer Disc. Group }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   OnValidate=BEGIN
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Language Code"));
                                                              END;

                                                   CaptionML=ENU=Language Code }
    { 43  ;   ;Salesperson Code    ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=VAR
                                                                ApprovalEntry@1001 : Record 454;
                                                              BEGIN
                                                                ApprovalEntry.SETRANGE("Table ID",DATABASE::"Sales Header");
                                                                ApprovalEntry.SETRANGE("Document Type","Document Type");
                                                                ApprovalEntry.SETRANGE("Document No.","No.");
                                                                ApprovalEntry.SETFILTER(Status,'<>%1&<>%2',ApprovalEntry.Status::Canceled,ApprovalEntry.Status::Rejected);
                                                                IF NOT ApprovalEntry.ISEMPTY THEN
                                                                  ERROR(Text053,FIELDCAPTION("Salesperson Code"));

                                                                CreateDim(
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");
                                                              END;

                                                   CaptionML=ENU=Salesperson Code }
    { 45  ;   ;Order Class         ;Code10        ;CaptionML=ENU=Order Class }
    { 46  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Comment Line" WHERE (Document Type=FIELD(Document Type),
                                                                                                 No.=FIELD(No.),
                                                                                                 Document Line No.=CONST(0)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 47  ;   ;No. Printed         ;Integer       ;CaptionML=ENU=No. Printed;
                                                   Editable=No }
    { 51  ;   ;On Hold             ;Code3         ;CaptionML=ENU=On Hold }
    { 52  ;   ;Applies-to Doc. Type;Option        ;CaptionML=ENU=Applies-to Doc. Type;
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 53  ;   ;Applies-to Doc. No. ;Code20        ;OnValidate=BEGIN
                                                                IF "Applies-to Doc. No." <> '' THEN
                                                                  TESTFIELD("Bal. Account No.",'');

                                                                IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec."Applies-to Doc. No." <> '') AND
                                                                   ("Applies-to Doc. No." <> '')
                                                                THEN BEGIN
                                                                  SetAmountToApply("Applies-to Doc. No.","Bill-to Customer No.");
                                                                  SetAmountToApply(xRec."Applies-to Doc. No.","Bill-to Customer No.");
                                                                END ELSE
                                                                  IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec."Applies-to Doc. No." = '') THEN
                                                                    SetAmountToApply("Applies-to Doc. No.","Bill-to Customer No.")
                                                                  ELSE
                                                                    IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND ("Applies-to Doc. No." = '') THEN
                                                                      SetAmountToApply(xRec."Applies-to Doc. No.","Bill-to Customer No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD("Bal. Account No.",'');
                                                              CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive,"Due Date");
                                                              CustLedgEntry.SETRANGE("Customer No.","Bill-to Customer No.");
                                                              CustLedgEntry.SETRANGE(Open,TRUE);
                                                              IF "Applies-to Doc. No." <> '' THEN BEGIN
                                                                CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                                IF CustLedgEntry.FINDFIRST THEN;
                                                                CustLedgEntry.SETRANGE("Document Type");
                                                                CustLedgEntry.SETRANGE("Document No.");
                                                              END ELSE
                                                                IF "Applies-to Doc. Type" <> 0 THEN BEGIN
                                                                  CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                  IF CustLedgEntry.FINDFIRST THEN;
                                                                  CustLedgEntry.SETRANGE("Document Type");
                                                                END ELSE
                                                                  IF Amount <> 0 THEN BEGIN
                                                                    CustLedgEntry.SETRANGE(Positive,Amount < 0);
                                                                    IF CustLedgEntry.FINDFIRST THEN;
                                                                    CustLedgEntry.SETRANGE(Positive);
                                                                  END;

                                                              ApplyCustEntries.SetSales(Rec,CustLedgEntry,SalesHeader.FIELDNO("Applies-to Doc. No."));
                                                              ApplyCustEntries.SETTABLEVIEW(CustLedgEntry);
                                                              ApplyCustEntries.SETRECORD(CustLedgEntry);
                                                              ApplyCustEntries.LOOKUPMODE(TRUE);
                                                              IF ApplyCustEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                ApplyCustEntries.GetCustLedgEntry(CustLedgEntry);
                                                                GenJnlApply.CheckAgainstApplnCurrency(
                                                                  "Currency Code",CustLedgEntry."Currency Code",GenJnILine."Account Type"::Customer,TRUE);
                                                                "Applies-to Doc. Type" := CustLedgEntry."Document Type";
                                                                "Applies-to Doc. No." := CustLedgEntry."Document No.";
                                                              END;
                                                              CLEAR(ApplyCustEntries);
                                                            END;

                                                   CaptionML=ENU=Applies-to Doc. No. }
    { 55  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account No." <> '' THEN
                                                                  CASE "Bal. Account Type" OF
                                                                    "Bal. Account Type"::"G/L Account":
                                                                      BEGIN
                                                                        GLAcc.GET("Bal. Account No.");
                                                                        GLAcc.CheckGLAcc;
                                                                        GLAcc.TESTFIELD("Direct Posting",TRUE);
                                                                      END;
                                                                    "Bal. Account Type"::"Bank Account":
                                                                      BEGIN
                                                                        BankAcc.GET("Bal. Account No.");
                                                                        BankAcc.TESTFIELD(Blocked,FALSE);
                                                                        BankAcc.TESTFIELD("Currency Code","Currency Code");
                                                                      END;
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=Bal. Account No. }
    { 57  ;   ;Ship                ;Boolean       ;CaptionML=ENU=Ship;
                                                   Editable=No }
    { 58  ;   ;Invoice             ;Boolean       ;CaptionML=ENU=Invoice }
    { 59  ;   ;Print Posted Documents;Boolean     ;CaptionML=ENU=Print Posted Documents }
    { 60  ;   ;Amount              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line".Amount WHERE (Document Type=FIELD(Document Type),
                                                                                              Document No.=FIELD(No.)));
                                                   CaptionML=ENU=Amount;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Amount Including VAT;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Amount Including VAT" WHERE (Document Type=FIELD(Document Type),
                                                                                                              Document No.=FIELD(No.)));
                                                   CaptionML=ENU=Amount Including VAT;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 62  ;   ;Shipping No.        ;Code20        ;CaptionML=ENU=Shipping No. }
    { 63  ;   ;Posting No.         ;Code20        ;CaptionML=ENU=Posting No. }
    { 64  ;   ;Last Shipping No.   ;Code20        ;TableRelation="Sales Shipment Header";
                                                   CaptionML=ENU=Last Shipping No.;
                                                   Editable=No }
    { 65  ;   ;Last Posting No.    ;Code20        ;TableRelation="Sales Invoice Header";
                                                   CaptionML=ENU=Last Posting No.;
                                                   Editable=No }
    { 66  ;   ;Prepayment No.      ;Code20        ;CaptionML=ENU=Prepayment No. }
    { 67  ;   ;Last Prepayment No. ;Code20        ;TableRelation="Sales Invoice Header";
                                                   CaptionML=ENU=Last Prepayment No. }
    { 68  ;   ;Prepmt. Cr. Memo No.;Code20        ;CaptionML=ENU=Prepmt. Cr. Memo No. }
    { 69  ;   ;Last Prepmt. Cr. Memo No.;Code20   ;TableRelation="Sales Cr.Memo Header";
                                                   CaptionML=ENU=Last Prepmt. Cr. Memo No. }
    { 70  ;   ;VAT Registration No.;Text20        ;CaptionML=ENU=VAT Registration No. }
    { 71  ;   ;Combine Shipments   ;Boolean       ;CaptionML=ENU=Combine Shipments }
    { 73  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=ENU=Reason Code }
    { 74  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN BEGIN
                                                                    "VAT Bus. Posting Group" := GenBusPostingGrp."Def. VAT Bus. Posting Group";
                                                                    RecreateSalesLines(FIELDCAPTION("Gen. Bus. Posting Group"));
                                                                  END;
                                                              END;

                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 75  ;   ;EU 3-Party Trade    ;Boolean       ;CaptionML=ENU=EU 3-Party Trade }
    { 76  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Transaction Type"),FALSE);
                                                              END;

                                                   CaptionML=ENU=Transaction Type }
    { 77  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Transport Method"),FALSE);
                                                              END;

                                                   CaptionML=ENU=Transport Method }
    { 78  ;   ;VAT Country/Region Code;Code10     ;TableRelation=Country/Region;
                                                   CaptionML=ENU=VAT Country/Region Code }
    { 79  ;   ;Sell-to Customer Name;Text50       ;CaptionML=ENU=Sell-to Customer Name }
    { 80  ;   ;Sell-to Customer Name 2;Text50     ;CaptionML=ENU=Sell-to Customer Name 2 }
    { 81  ;   ;Sell-to Address     ;Text50        ;CaptionML=ENU=Sell-to Address }
    { 82  ;   ;Sell-to Address 2   ;Text50        ;CaptionML=ENU=Sell-to Address 2 }
    { 83  ;   ;Sell-to City        ;Text30        ;TableRelation="Post Code".City;
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Sell-to City","Sell-to Post Code","Sell-to County","Sell-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Sell-to City }
    { 84  ;   ;Sell-to Contact     ;Text50        ;CaptionML=ENU=Sell-to Contact }
    { 85  ;   ;Bill-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Bill-to Post Code }
    { 86  ;   ;Bill-to County      ;Text30        ;CaptionML=ENU=Bill-to County }
    { 87  ;   ;Bill-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                IF ("Bill-to Country/Region Code" <> xRec."Bill-to Country/Region Code") AND (xRec."Bill-to Country/Region Code" <> '') THEN
                                                                  PostCode.ClearFields("Bill-to City","Bill-to Post Code","Bill-to County");
                                                              END;

                                                   CaptionML=ENU=Bill-to Country/Region Code }
    { 88  ;   ;Sell-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Sell-to City","Sell-to Post Code","Sell-to County","Sell-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Sell-to Post Code }
    { 89  ;   ;Sell-to County      ;Text30        ;CaptionML=ENU=Sell-to County }
    { 90  ;   ;Sell-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                IF ("Sell-to Country/Region Code" <> xRec."Sell-to Country/Region Code") AND (xRec."Sell-to Country/Region Code" <> '') THEN
                                                                  PostCode.ClearFields("Sell-to City","Sell-to Post Code","Sell-to County");
                                                              END;

                                                   CaptionML=ENU=Sell-to Country/Region Code }
    { 91  ;   ;Ship-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Ship-to Post Code }
    { 92  ;   ;Ship-to County      ;Text30        ;CaptionML=ENU=Ship-to County }
    { 93  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                IF ("Ship-to Country/Region Code" <> xRec."Ship-to Country/Region Code") AND (xRec."Ship-to Country/Region Code" <> '') THEN
                                                                  PostCode.ClearFields("Ship-to City","Ship-to Post Code","Ship-to County");
                                                              END;

                                                   CaptionML=ENU=Ship-to Country/Region Code }
    { 94  ;   ;Bal. Account Type   ;Option        ;CaptionML=ENU=Bal. Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Bank Account;
                                                   OptionString=G/L Account,Bank Account }
    { 97  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Exit Point"),FALSE);
                                                              END;

                                                   CaptionML=ENU=Exit Point }
    { 98  ;   ;Correction          ;Boolean       ;CaptionML=ENU=Correction }
    { 99  ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                IF xRec."Document Date" <> "Document Date" THEN
                                                                  UpdateDocumentDate := TRUE;
                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Prepmt. Payment Terms Code");
                                                              END;

                                                   CaptionML=ENU=Document Date }
    { 100 ;   ;External Document No.;Code35       ;CaptionML=ENU=External Document No. }
    { 101 ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION(Area),FALSE);
                                                              END;

                                                   CaptionML=ENU=Area }
    { 102 ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Transaction Specification"),FALSE);
                                                              END;

                                                   CaptionML=ENU=Transaction Specification }
    { 104 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   OnValidate=BEGIN
                                                                DOPaymentTransLogMgt.ValidateHasNoValidTransactions("Document Type",FORMAT("Document Type"),"No.");
                                                                IF DOPaymentMgt.IsValidPaymentMethod(xRec."Payment Method Code") AND NOT DOPaymentMgt.IsValidPaymentMethod("Payment Method Code")
                                                                THEN
                                                                  TESTFIELD("Credit Card No.",'');
                                                                PaymentMethod.INIT;
                                                                IF "Payment Method Code" <> '' THEN
                                                                  PaymentMethod.GET("Payment Method Code");
                                                                "Bal. Account Type" := PaymentMethod."Bal. Account Type";
                                                                "Bal. Account No." := PaymentMethod."Bal. Account No.";
                                                                IF "Bal. Account No." <> '' THEN BEGIN
                                                                  TESTFIELD("Applies-to Doc. No.",'');
                                                                  TESTFIELD("Applies-to ID",'');
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Payment Method Code }
    { 105 ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF xRec."Shipping Agent Code" = "Shipping Agent Code" THEN
                                                                  EXIT;

                                                                "Shipping Agent Service Code" := '';
                                                                GetShippingTime(FIELDNO("Shipping Agent Code"));
                                                                UpdateSalesLines(FIELDCAPTION("Shipping Agent Code"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=ENU=Shipping Agent Code }
    { 106 ;   ;Package Tracking No.;Text30        ;CaptionML=ENU=Package Tracking No. }
    { 107 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=No }
    { 108 ;   ;Posting No. Series  ;Code10        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Posting No. Series" <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  TestNoSeries;
                                                                  NoSeriesMgt.TestSeries(GetPostingNoSeriesCode,"Posting No. Series");
                                                                END;
                                                                TESTFIELD("Posting No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                TestNoSeries;
                                                                IF NoSeriesMgt.LookupSeries(GetPostingNoSeriesCode,"Posting No. Series") THEN
                                                                  VALIDATE("Posting No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Posting No. Series }
    { 109 ;   ;Shipping No. Series ;Code10        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Shipping No. Series" <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Posted Shipment Nos.");
                                                                  NoSeriesMgt.TestSeries(SalesSetup."Posted Shipment Nos.","Shipping No. Series");
                                                                END;
                                                                TESTFIELD("Shipping No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Posted Shipment Nos.");
                                                                IF NoSeriesMgt.LookupSeries(SalesSetup."Posted Shipment Nos.","Shipping No. Series") THEN
                                                                  VALIDATE("Shipping No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Shipping No. Series }
    { 114 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Tax Area Code"));
                                                              END;

                                                   CaptionML=ENU=Tax Area Code }
    { 115 ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Tax Liable"));
                                                              END;

                                                   CaptionML=ENU=Tax Liable }
    { 116 ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group" THEN
                                                                  RecreateSalesLines(FIELDCAPTION("VAT Bus. Posting Group"));
                                                              END;

                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 117 ;   ;Reserve             ;Option        ;CaptionML=ENU=Reserve;
                                                   OptionCaptionML=ENU=Never,Optional,Always;
                                                   OptionString=Never,Optional,Always }
    { 118 ;   ;Applies-to ID       ;Code50        ;OnValidate=VAR
                                                                TempCustLedgEntry@1000 : Record 21;
                                                              BEGIN
                                                                IF "Applies-to ID" <> '' THEN
                                                                  TESTFIELD("Bal. Account No.",'');
                                                                IF ("Applies-to ID" <> xRec."Applies-to ID") AND (xRec."Applies-to ID" <> '') THEN BEGIN
                                                                  CustLedgEntry.SETCURRENTKEY("Customer No.",Open);
                                                                  CustLedgEntry.SETRANGE("Customer No.","Bill-to Customer No.");
                                                                  CustLedgEntry.SETRANGE(Open,TRUE);
                                                                  CustLedgEntry.SETRANGE("Applies-to ID",xRec."Applies-to ID");
                                                                  IF CustLedgEntry.FINDFIRST THEN
                                                                    CustEntrySetApplID.SetApplId(CustLedgEntry,TempCustLedgEntry,'');
                                                                  CustLedgEntry.RESET;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Applies-to ID }
    { 119 ;   ;VAT Base Discount % ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF "VAT Base Discount %" > GLSetup."VAT Tolerance %" THEN
                                                                  ERROR(
                                                                    Text007,
                                                                    FIELDCAPTION("VAT Base Discount %"),
                                                                    GLSetup.FIELDCAPTION("VAT Tolerance %"),
                                                                    GLSetup.TABLECAPTION);

                                                                IF ("VAT Base Discount %" = xRec."VAT Base Discount %") AND
                                                                   (CurrFieldNo <> 0)
                                                                THEN
                                                                  EXIT;

                                                                SalesLine.SETRANGE("Document Type","Document Type");
                                                                SalesLine.SETRANGE("Document No.","No.");
                                                                SalesLine.SETFILTER(Type,'<>%1',SalesLine.Type::" ");
                                                                SalesLine.SETFILTER(Quantity,'<>0');
                                                                SalesLine.LOCKTABLE;
                                                                LOCKTABLE;
                                                                IF SalesLine.FINDSET THEN BEGIN
                                                                  MODIFY;
                                                                  REPEAT
                                                                    IF (SalesLine."Quantity Invoiced" <> SalesLine.Quantity) OR
                                                                       ("Shipping Advice" <> "Shipping Advice"::Partial) OR
                                                                       (SalesLine.Type <> SalesLine.Type::"Charge (Item)") OR
                                                                       (CurrFieldNo <> 0)
                                                                    THEN BEGIN
                                                                      SalesLine.UpdateAmounts;
                                                                      SalesLine.MODIFY;
                                                                    END;
                                                                  UNTIL SalesLine.NEXT = 0;
                                                                END;
                                                                SalesLine.RESET;
                                                              END;

                                                   CaptionML=ENU=VAT Base Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 120 ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Open,Released,Pending Approval,Pending Prepayment;
                                                   OptionString=Open,Released,Pending Approval,Pending Prepayment;
                                                   Editable=No }
    { 121 ;   ;Invoice Discount Calculation;Option;CaptionML=ENU=Invoice Discount Calculation;
                                                   OptionCaptionML=ENU=None,%,Amount;
                                                   OptionString=None,%,Amount;
                                                   Editable=No }
    { 122 ;   ;Invoice Discount Value;Decimal     ;CaptionML=ENU=Invoice Discount Value;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 123 ;   ;Send IC Document    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Send IC Document" THEN BEGIN
                                                                  IF "Bill-to IC Partner Code" = '' THEN
                                                                    TESTFIELD("Sell-to IC Partner Code");
                                                                  TESTFIELD("IC Direction","IC Direction"::Outgoing);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Send IC Document }
    { 124 ;   ;IC Status           ;Option        ;CaptionML=ENU=IC Status;
                                                   OptionCaptionML=ENU=New,Pending,Sent;
                                                   OptionString=New,Pending,Sent }
    { 125 ;   ;Sell-to IC Partner Code;Code20     ;TableRelation="IC Partner";
                                                   CaptionML=ENU=Sell-to IC Partner Code;
                                                   Editable=No }
    { 126 ;   ;Bill-to IC Partner Code;Code20     ;TableRelation="IC Partner";
                                                   CaptionML=ENU=Bill-to IC Partner Code;
                                                   Editable=No }
    { 129 ;   ;IC Direction        ;Option        ;OnValidate=BEGIN
                                                                IF "IC Direction" = "IC Direction"::Incoming THEN
                                                                  "Send IC Document" := FALSE;
                                                              END;

                                                   CaptionML=ENU=IC Direction;
                                                   OptionCaptionML=ENU=Outgoing,Incoming;
                                                   OptionString=Outgoing,Incoming }
    { 130 ;   ;Prepayment %        ;Decimal       ;OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Prepayment %"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=ENU=Prepayment %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 131 ;   ;Prepayment No. Series;Code10       ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Prepayment No. Series" <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                  NoSeriesMgt.TestSeries(SalesSetup."Posted Prepmt. Inv. Nos.","Prepayment No. Series");
                                                                END;
                                                                TESTFIELD("Prepayment No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                IF NoSeriesMgt.LookupSeries(SalesSetup."Posted Prepmt. Inv. Nos.","Prepayment No. Series") THEN
                                                                  VALIDATE("Prepayment No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Prepayment No. Series }
    { 132 ;   ;Compress Prepayment ;Boolean       ;InitValue=Yes;
                                                   CaptionML=ENU=Compress Prepayment }
    { 133 ;   ;Prepayment Due Date ;Date          ;CaptionML=ENU=Prepayment Due Date }
    { 134 ;   ;Prepmt. Cr. Memo No. Series;Code10 ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                  NoSeriesMgt.TestSeries(SalesSetup."Posted Prepmt. Cr. Memo Nos.","Prepmt. Cr. Memo No.");
                                                                END;
                                                                TESTFIELD("Prepmt. Cr. Memo No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                IF NoSeriesMgt.LookupSeries(GetPostingNoSeriesCode,"Prepmt. Cr. Memo No.") THEN
                                                                  VALIDATE("Prepmt. Cr. Memo No.");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Prepmt. Cr. Memo No. Series }
    { 135 ;   ;Prepmt. Posting Description;Text50 ;CaptionML=ENU=Prepmt. Posting Description }
    { 138 ;   ;Prepmt. Pmt. Discount Date;Date    ;CaptionML=ENU=Prepmt. Pmt. Discount Date }
    { 139 ;   ;Prepmt. Payment Terms Code;Code10  ;TableRelation="Payment Terms";
                                                   OnValidate=VAR
                                                                PaymentTerms@1000 : Record 3;
                                                              BEGIN
                                                                IF ("Prepmt. Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                  PaymentTerms.GET("Prepmt. Payment Terms Code");
                                                                  IF (("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
                                                                      NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos")
                                                                  THEN BEGIN
                                                                    VALIDATE("Prepayment Due Date","Document Date");
                                                                    VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                    VALIDATE("Prepmt. Payment Discount %",0);
                                                                  END ELSE BEGIN
                                                                    "Prepayment Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    "Prepmt. Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    IF NOT UpdateDocumentDate THEN
                                                                      VALIDATE("Prepmt. Payment Discount %",PaymentTerms."Discount %")
                                                                  END;
                                                                END ELSE BEGIN
                                                                  VALIDATE("Prepayment Due Date","Document Date");
                                                                  IF NOT UpdateDocumentDate THEN BEGIN
                                                                    VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                    VALIDATE("Prepmt. Payment Discount %",0);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Prepmt. Payment Terms Code }
    { 140 ;   ;Prepmt. Payment Discount %;Decimal ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF "Payment Discount %" < GLSetup."VAT Tolerance %" THEN
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                ELSE
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                              END;

                                                   CaptionML=ENU=Prepmt. Payment Discount %;
                                                   DecimalPlaces=0:5 }
    { 151 ;   ;Quote No.           ;Code20        ;CaptionML=ENU=Quote No.;
                                                   Editable=No }
    { 160 ;   ;Job Queue Status    ;Option        ;OnLookup=VAR
                                                              JobQueueEntry@1000 : Record 472;
                                                            BEGIN
                                                              IF "Job Queue Status" = "Job Queue Status"::" " THEN
                                                                EXIT;
                                                              JobQueueEntry.ShowStatusMsg("Job Queue Entry ID");
                                                            END;

                                                   CaptionML=ENU=Job Queue Status;
                                                   OptionCaptionML=ENU=" ,Scheduled for Posting,Error,Posting";
                                                   OptionString=[ ,Scheduled for Posting,Error,Posting];
                                                   Editable=No }
    { 161 ;   ;Job Queue Entry ID  ;GUID          ;CaptionML=ENU=Job Queue Entry ID;
                                                   Editable=No }
    { 200 ;   ;Sell-to SipAddress  ;Text200        }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDocDim;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=No }
    { 825 ;   ;Authorization Required;Boolean     ;CaptionML=ENU=Authorization Required }
    { 827 ;   ;Credit Card No.     ;Code20        ;TableRelation="DO Payment Credit Card" WHERE (Customer No.=FIELD(Bill-to Customer No.));
                                                   OnValidate=BEGIN
                                                                DOPaymentTransLogMgt.ValidateHasNoValidTransactions("Document Type",FORMAT("Document Type"),"No.");

                                                                IF "Credit Card No." = '' THEN
                                                                  EXIT;

                                                                DOPaymentMgt.CheckCreditCardData("Credit Card No.");

                                                                IF NOT DOPaymentMgt.IsValidPaymentMethod("Payment Method Code") THEN
                                                                  FIELDERROR("Payment Method Code");
                                                              END;

                                                   CaptionML=ENU=Credit Card No. }
    { 5043;   ;No. of Archived Versions;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Max("Sales Header Archive"."Version No." WHERE (Document Type=FIELD(Document Type),
                                                                                                               No.=FIELD(No.),
                                                                                                               Doc. No. Occurrence=FIELD(Doc. No. Occurrence)));
                                                   CaptionML=ENU=No. of Archived Versions;
                                                   Editable=No }
    { 5048;   ;Doc. No. Occurrence ;Integer       ;CaptionML=ENU=Doc. No. Occurrence }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");
                                                              END;

                                                   CaptionML=ENU=Campaign No. }
    { 5051;   ;Sell-to Customer Template Code;Code10;
                                                   TableRelation="Customer Template";
                                                   OnValidate=VAR
                                                                SellToCustTemplate@1000 : Record 5105;
                                                              BEGIN
                                                                TESTFIELD("Document Type","Document Type"::Quote);
                                                                TESTFIELD(Status,Status::Open);

                                                                IF NOT InsertMode AND
                                                                   ("Sell-to Customer Template Code" <> xRec."Sell-to Customer Template Code") AND
                                                                   (xRec."Sell-to Customer Template Code" <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Sell-to Customer Template Code"));
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.RESET;
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF "Sell-to Customer Template Code" = '' THEN BEGIN
                                                                      IF NOT SalesLine.ISEMPTY THEN
                                                                        ERROR(Text005,FIELDCAPTION("Sell-to Customer Template Code"));
                                                                      INIT;
                                                                      SalesSetup.GET;
                                                                      InitRecord;
                                                                      "No. Series" := xRec."No. Series";
                                                                      IF xRec."Shipping No." <> '' THEN BEGIN
                                                                        "Shipping No. Series" := xRec."Shipping No. Series";
                                                                        "Shipping No." := xRec."Shipping No.";
                                                                      END;
                                                                      IF xRec."Posting No." <> '' THEN BEGIN
                                                                        "Posting No. Series" := xRec."Posting No. Series";
                                                                        "Posting No." := xRec."Posting No.";
                                                                      END;
                                                                      IF xRec."Return Receipt No." <> '' THEN BEGIN
                                                                        "Return Receipt No. Series" := xRec."Return Receipt No. Series";
                                                                        "Return Receipt No." := xRec."Return Receipt No.";
                                                                      END;
                                                                      IF xRec."Prepayment No." <> '' THEN BEGIN
                                                                        "Prepayment No. Series" := xRec."Prepayment No. Series";
                                                                        "Prepayment No." := xRec."Prepayment No.";
                                                                      END;
                                                                      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
                                                                        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
                                                                      END;
                                                                      EXIT;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    "Sell-to Customer Template Code" := xRec."Sell-to Customer Template Code";
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF SellToCustTemplate.GET("Sell-to Customer Template Code") THEN BEGIN
                                                                  SellToCustTemplate.TESTFIELD("Gen. Bus. Posting Group");
                                                                  "Gen. Bus. Posting Group" := SellToCustTemplate."Gen. Bus. Posting Group";
                                                                  "VAT Bus. Posting Group" := SellToCustTemplate."VAT Bus. Posting Group";
                                                                  IF "Bill-to Customer No." = '' THEN
                                                                    VALIDATE("Bill-to Customer Template Code","Sell-to Customer Template Code");
                                                                END;

                                                                IF NOT InsertMode AND
                                                                   ((xRec."Sell-to Customer Template Code" <> "Sell-to Customer Template Code") OR
                                                                    (xRec."Currency Code" <> "Currency Code"))
                                                                THEN
                                                                  RecreateSalesLines(FIELDCAPTION("Sell-to Customer Template Code"));
                                                              END;

                                                   CaptionML=ENU=Sell-to Customer Template Code }
    { 5052;   ;Sell-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1004 : Record 5054;
                                                                Cont@1002 : Record 5050;
                                                                Opportunity@1000 : Record 5092;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF ("Sell-to Contact No." <> xRec."Sell-to Contact No.") AND
                                                                   (xRec."Sell-to Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF ("Sell-to Contact No." = '') AND ("Opportunity No." <> '') THEN
                                                                    ERROR(Text049,FIELDCAPTION("Sell-to Contact No."));
                                                                  IF HideValidationDialog OR NOT GUIALLOWED THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Sell-to Contact No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.RESET;
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF ("Sell-to Contact No." = '') AND ("Sell-to Customer No." = '') THEN BEGIN
                                                                      IF NOT SalesLine.ISEMPTY THEN
                                                                        ERROR(Text005,FIELDCAPTION("Sell-to Contact No."));
                                                                      INIT;
                                                                      SalesSetup.GET;
                                                                      InitRecord;
                                                                      "No. Series" := xRec."No. Series";
                                                                      IF xRec."Shipping No." <> '' THEN BEGIN
                                                                        "Shipping No. Series" := xRec."Shipping No. Series";
                                                                        "Shipping No." := xRec."Shipping No.";
                                                                      END;
                                                                      IF xRec."Posting No." <> '' THEN BEGIN
                                                                        "Posting No. Series" := xRec."Posting No. Series";
                                                                        "Posting No." := xRec."Posting No.";
                                                                      END;
                                                                      IF xRec."Return Receipt No." <> '' THEN BEGIN
                                                                        "Return Receipt No. Series" := xRec."Return Receipt No. Series";
                                                                        "Return Receipt No." := xRec."Return Receipt No.";
                                                                      END;
                                                                      IF xRec."Prepayment No." <> '' THEN BEGIN
                                                                        "Prepayment No. Series" := xRec."Prepayment No. Series";
                                                                        "Prepayment No." := xRec."Prepayment No.";
                                                                      END;
                                                                      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
                                                                        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
                                                                      END;
                                                                      EXIT;
                                                                    END;
                                                                    IF "Opportunity No." <> '' THEN BEGIN
                                                                      Opportunity.GET("Opportunity No.");
                                                                      IF Opportunity."Contact No." <> "Sell-to Contact No." THEN BEGIN
                                                                        MODIFY;
                                                                        Opportunity.VALIDATE("Contact No.","Sell-to Contact No.");
                                                                        Opportunity.MODIFY;
                                                                      END
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Sell-to Customer No." <> '') AND ("Sell-to Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Sell-to Contact No.");
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Sell-to Customer No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Sell-to Customer No.");
                                                                END;

                                                                UpdateSellToCust("Sell-to Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1001 : Record 5050;
                                                              ContBusinessRelation@1000 : Record 5054;
                                                            BEGIN
                                                              IF "Sell-to Customer No." <> '' THEN BEGIN
                                                                IF Cont.GET("Sell-to Contact No.") THEN
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                ELSE BEGIN
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Sell-to Customer No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  ELSE
                                                                    Cont.SETRANGE("No.",'');
                                                                END;
                                                              END;

                                                              IF "Sell-to Contact No." <> '' THEN
                                                                IF Cont.GET("Sell-to Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Sell-to Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Sell-to Contact No. }
    { 5053;   ;Bill-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1004 : Record 5054;
                                                                Cont@1002 : Record 5050;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF ("Bill-to Contact No." <> xRec."Bill-to Contact No.") AND
                                                                   (xRec."Bill-to Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Bill-to Contact No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.RESET;
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF ("Bill-to Contact No." = '') AND ("Bill-to Customer No." = '') THEN BEGIN
                                                                      IF NOT SalesLine.ISEMPTY THEN
                                                                        ERROR(Text005,FIELDCAPTION("Bill-to Contact No."));
                                                                      INIT;
                                                                      SalesSetup.GET;
                                                                      InitRecord;
                                                                      "No. Series" := xRec."No. Series";
                                                                      IF xRec."Shipping No." <> '' THEN BEGIN
                                                                        "Shipping No. Series" := xRec."Shipping No. Series";
                                                                        "Shipping No." := xRec."Shipping No.";
                                                                      END;
                                                                      IF xRec."Posting No." <> '' THEN BEGIN
                                                                        "Posting No. Series" := xRec."Posting No. Series";
                                                                        "Posting No." := xRec."Posting No.";
                                                                      END;
                                                                      IF xRec."Return Receipt No." <> '' THEN BEGIN
                                                                        "Return Receipt No. Series" := xRec."Return Receipt No. Series";
                                                                        "Return Receipt No." := xRec."Return Receipt No.";
                                                                      END;
                                                                      IF xRec."Prepayment No." <> '' THEN BEGIN
                                                                        "Prepayment No. Series" := xRec."Prepayment No. Series";
                                                                        "Prepayment No." := xRec."Prepayment No.";
                                                                      END;
                                                                      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
                                                                        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
                                                                      END;
                                                                      EXIT;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    "Bill-to Contact No." := xRec."Bill-to Contact No.";
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Bill-to Customer No." <> '') AND ("Bill-to Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Bill-to Contact No.");
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Bill-to Customer No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Bill-to Customer No.");
                                                                END;

                                                                UpdateBillToCust("Bill-to Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1001 : Record 5050;
                                                              ContBusinessRelation@1000 : Record 5054;
                                                            BEGIN
                                                              IF "Bill-to Customer No." <> '' THEN BEGIN
                                                                IF Cont.GET("Bill-to Contact No.") THEN
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                ELSE BEGIN
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Bill-to Customer No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  ELSE
                                                                    Cont.SETRANGE("No.",'');
                                                                END;
                                                              END;

                                                              IF "Bill-to Contact No." <> '' THEN
                                                                IF Cont.GET("Bill-to Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Bill-to Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Bill-to Contact No. }
    { 5054;   ;Bill-to Customer Template Code;Code10;
                                                   TableRelation="Customer Template";
                                                   OnValidate=VAR
                                                                BillToCustTemplate@1001 : Record 5105;
                                                              BEGIN
                                                                TESTFIELD("Document Type","Document Type"::Quote);
                                                                TESTFIELD(Status,Status::Open);

                                                                IF NOT InsertMode AND
                                                                   ("Bill-to Customer Template Code" <> xRec."Bill-to Customer Template Code") AND
                                                                   (xRec."Bill-to Customer Template Code" <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Bill-to Customer Template Code"));
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.RESET;
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF "Bill-to Customer Template Code" = '' THEN BEGIN
                                                                      IF NOT SalesLine.ISEMPTY THEN
                                                                        ERROR(Text005,FIELDCAPTION("Bill-to Customer Template Code"));
                                                                      INIT;
                                                                      SalesSetup.GET;
                                                                      InitRecord;
                                                                      "No. Series" := xRec."No. Series";
                                                                      IF xRec."Shipping No." <> '' THEN BEGIN
                                                                        "Shipping No. Series" := xRec."Shipping No. Series";
                                                                        "Shipping No." := xRec."Shipping No.";
                                                                      END;
                                                                      IF xRec."Posting No." <> '' THEN BEGIN
                                                                        "Posting No. Series" := xRec."Posting No. Series";
                                                                        "Posting No." := xRec."Posting No.";
                                                                      END;
                                                                      IF xRec."Return Receipt No." <> '' THEN BEGIN
                                                                        "Return Receipt No. Series" := xRec."Return Receipt No. Series";
                                                                        "Return Receipt No." := xRec."Return Receipt No.";
                                                                      END;
                                                                      IF xRec."Prepayment No." <> '' THEN BEGIN
                                                                        "Prepayment No. Series" := xRec."Prepayment No. Series";
                                                                        "Prepayment No." := xRec."Prepayment No.";
                                                                      END;
                                                                      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
                                                                        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
                                                                      END;
                                                                      EXIT;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    "Bill-to Customer Template Code" := xRec."Bill-to Customer Template Code";
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                VALIDATE("Ship-to Code",'');
                                                                IF BillToCustTemplate.GET("Bill-to Customer Template Code") THEN BEGIN
                                                                  BillToCustTemplate.TESTFIELD("Customer Posting Group");
                                                                  "Customer Posting Group" := BillToCustTemplate."Customer Posting Group";
                                                                  "Invoice Disc. Code" := BillToCustTemplate."Invoice Disc. Code";
                                                                  "Customer Price Group" := BillToCustTemplate."Customer Price Group";
                                                                  "Customer Disc. Group" := BillToCustTemplate."Customer Disc. Group";
                                                                  "Allow Line Disc." := BillToCustTemplate."Allow Line Disc.";
                                                                  VALIDATE("Payment Terms Code",BillToCustTemplate."Payment Terms Code");
                                                                  VALIDATE("Payment Method Code",BillToCustTemplate."Payment Method Code");
                                                                  "Shipment Method Code" := BillToCustTemplate."Shipment Method Code";
                                                                END;

                                                                CreateDim(
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");

                                                                IF NOT InsertMode AND
                                                                   (xRec."Sell-to Customer Template Code" = "Sell-to Customer Template Code") AND
                                                                   (xRec."Bill-to Customer Template Code" <> "Bill-to Customer Template Code")
                                                                THEN
                                                                  RecreateSalesLines(FIELDCAPTION("Bill-to Customer Template Code"));
                                                              END;

                                                   CaptionML=ENU=Bill-to Customer Template Code }
    { 5055;   ;Opportunity No.     ;Code20        ;TableRelation=IF (Document Type=FILTER(<>Order)) Opportunity.No. WHERE (Contact No.=FIELD(Sell-to Contact No.),
                                                                                                                           Closed=CONST(No))
                                                                                                                           ELSE IF (Document Type=CONST(Order)) Opportunity.No. WHERE (Contact No.=FIELD(Sell-to Contact No.),
                                                                                                                                                                                       Sales Document No.=FIELD(No.),
                                                                                                                                                                                       Sales Document Type=CONST(Order));
                                                   OnValidate=VAR
                                                                Opportunity@1000 : Record 5092;
                                                                SalesHeader@1001 : Record 36;
                                                              BEGIN
                                                                IF xRec."Opportunity No." <> "Opportunity No." THEN BEGIN
                                                                  IF "Opportunity No." <> '' THEN
                                                                    IF Opportunity.GET("Opportunity No.") THEN BEGIN
                                                                      Opportunity.TESTFIELD(Status,Opportunity.Status::"In Progress");
                                                                      IF Opportunity."Sales Document No." <> '' THEN BEGIN
                                                                        IF CONFIRM(Text048,FALSE,Opportunity."Sales Document No.",Opportunity."No.") THEN BEGIN
                                                                          IF SalesHeader.GET("Document Type"::Quote,Opportunity."Sales Document No.") THEN BEGIN
                                                                            SalesHeader."Opportunity No." := '';
                                                                            SalesHeader.MODIFY;
                                                                          END;
                                                                          Opportunity."Sales Document Type" := Opportunity."Sales Document Type"::Quote;
                                                                          Opportunity."Sales Document No." := "No.";
                                                                          Opportunity.MODIFY;
                                                                        END ELSE
                                                                          "Opportunity No." := xRec."Opportunity No.";
                                                                      END ELSE BEGIN
                                                                        Opportunity."Sales Document Type" := Opportunity."Sales Document Type"::Quote;
                                                                        Opportunity."Sales Document No." := "No.";
                                                                        Opportunity.MODIFY;
                                                                      END
                                                                    END;
                                                                  IF xRec."Opportunity No." <> '' THEN
                                                                    IF Opportunity.GET(xRec."Opportunity No.") THEN BEGIN
                                                                      Opportunity."Sales Document No." := '';
                                                                      Opportunity."Sales Document Type" := Opportunity."Sales Document Type"::" ";
                                                                      Opportunity.MODIFY;
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Opportunity No. }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF NOT UserSetupMgt.CheckRespCenter(0,"Responsibility Center") THEN
                                                                  ERROR(
                                                                    Text027,
                                                                    RespCenter.TABLECAPTION,UserSetupMgt.GetSalesFilter);

                                                                "Location Code" := UserSetupMgt.GetLocation(0,'',"Responsibility Center");
                                                                IF "Location Code" <> '' THEN BEGIN
                                                                  IF Location.GET("Location Code") THEN
                                                                    "Outbound Whse. Handling Time" := Location."Outbound Whse. Handling Time";
                                                                END ELSE BEGIN
                                                                  IF InvtSetup.GET THEN
                                                                    "Outbound Whse. Handling Time" := InvtSetup."Outbound Whse. Handling Time";
                                                                END;

                                                                UpdateShipToAddress;

                                                                CreateDim(
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");

                                                                IF xRec."Responsibility Center" <> "Responsibility Center" THEN BEGIN
                                                                  RecreateSalesLines(FIELDCAPTION("Responsibility Center"));
                                                                  "Assigned User ID" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Responsibility Center }
    { 5750;   ;Shipping Advice     ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF InventoryPickConflict("Document Type","No.","Shipping Advice") THEN
                                                                  ERROR(Text066,FIELDCAPTION("Shipping Advice"),FORMAT("Shipping Advice"),TABLECAPTION);
                                                                IF WhseShpmntConflict("Document Type","No.","Shipping Advice") THEN
                                                                  ERROR(STRSUBSTNO(Text070,FIELDCAPTION("Shipping Advice"),FORMAT("Shipping Advice"),TABLECAPTION));
                                                                WhseSourceHeader.SalesHeaderVerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=ENU=Shipping Advice;
                                                   OptionCaptionML=ENU=Partial,Complete;
                                                   OptionString=Partial,Complete }
    { 5751;   ;Shipped Not Invoiced;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE (Document Type=FIELD(Document Type),
                                                                                         Document No.=FIELD(No.),
                                                                                         Qty. Shipped Not Invoiced=FILTER(<>0)));
                                                   CaptionML=ENU=Shipped Not Invoiced;
                                                   Editable=No }
    { 5752;   ;Completely Shipped  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Min("Sales Line"."Completely Shipped" WHERE (Document Type=FIELD(Document Type),
                                                                                                            Document No.=FIELD(No.),
                                                                                                            Type=FILTER(<>' '),
                                                                                                            Location Code=FIELD(Location Filter)));
                                                   CaptionML=ENU=Completely Shipped;
                                                   Editable=No }
    { 5753;   ;Posting from Whse. Ref.;Integer    ;CaptionML=ENU=Posting from Whse. Ref. }
    { 5754;   ;Location Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Location;
                                                   CaptionML=ENU=Location Filter }
    { 5790;   ;Requested Delivery Date;Date       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Promised Delivery Date" <> 0D THEN
                                                                  ERROR(
                                                                    Text028,
                                                                    FIELDCAPTION("Requested Delivery Date"),
                                                                    FIELDCAPTION("Promised Delivery Date"));

                                                                IF "Requested Delivery Date" <> xRec."Requested Delivery Date" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Requested Delivery Date"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=ENU=Requested Delivery Date }
    { 5791;   ;Promised Delivery Date;Date        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Promised Delivery Date" <> xRec."Promised Delivery Date" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Promised Delivery Date"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=ENU=Promised Delivery Date }
    { 5792;   ;Shipping Time       ;DateFormula   ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Shipping Time" <> xRec."Shipping Time" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Shipping Time"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=ENU=Shipping Time }
    { 5793;   ;Outbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Outbound Whse. Handling Time" <> xRec."Outbound Whse. Handling Time") AND
                                                                   (xRec."Sell-to Customer No." = "Sell-to Customer No.")
                                                                THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Outbound Whse. Handling Time"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=ENU=Outbound Whse. Handling Time }
    { 5794;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                GetShippingTime(FIELDNO("Shipping Agent Service Code"));
                                                                UpdateSalesLines(FIELDCAPTION("Shipping Agent Service Code"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=ENU=Shipping Agent Service Code }
    { 5795;   ;Late Order Shipping ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE (Document Type=FIELD(Document Type),
                                                                                         Sell-to Customer No.=FIELD(Sell-to Customer No.),
                                                                                         Document No.=FIELD(No.),
                                                                                         Shipment Date=FIELD(Date Filter),
                                                                                         Outstanding Quantity=FILTER(<>0)));
                                                   CaptionML=ENU=Late Order Shipping;
                                                   Editable=No }
    { 5796;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 5800;   ;Receive             ;Boolean       ;CaptionML=ENU=Receive }
    { 5801;   ;Return Receipt No.  ;Code20        ;CaptionML=ENU=Return Receipt No. }
    { 5802;   ;Return Receipt No. Series;Code10   ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Return Receipt No. Series" <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Posted Return Receipt Nos.");
                                                                  NoSeriesMgt.TestSeries(SalesSetup."Posted Return Receipt Nos.","Return Receipt No. Series");
                                                                END;
                                                                TESTFIELD("Return Receipt No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Posted Return Receipt Nos.");
                                                                IF NoSeriesMgt.LookupSeries(SalesSetup."Posted Return Receipt Nos.","Return Receipt No. Series") THEN
                                                                  VALIDATE("Return Receipt No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=ENU=Return Receipt No. Series }
    { 5803;   ;Last Return Receipt No.;Code20     ;TableRelation="Return Receipt Header";
                                                   CaptionML=ENU=Last Return Receipt No.;
                                                   Editable=No }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Allow Line Disc."));
                                                              END;

                                                   CaptionML=ENU=Allow Line Disc. }
    { 7200;   ;Get Shipment Used   ;Boolean       ;CaptionML=ENU=Get Shipment Used;
                                                   Editable=No }
    { 9000;   ;Assigned User ID    ;Code50        ;TableRelation="User Setup";
                                                   OnValidate=BEGIN
                                                                IF NOT UserSetupMgt.CheckRespCenter2(0,"Responsibility Center","Assigned User ID") THEN
                                                                  ERROR(
                                                                    Text061,"Assigned User ID",
                                                                    RespCenter.TABLECAPTION,UserSetupMgt.GetSalesFilter2("Assigned User ID"));
                                                              END;

                                                   CaptionML=ENU=Assigned User ID }
  }
  KEYS
  {
    {    ;Document Type,No.                       ;Clustered=Yes }
    {    ;No.,Document Type                        }
    {    ;Document Type,Sell-to Customer No.       }
    {    ;Document Type,Bill-to Customer No.       }
    {    ;Document Type,Combine Shipments,Bill-to Customer No.,Currency Code,EU 3-Party Trade }
    {    ;Sell-to Customer No.,External Document No. }
    {    ;Document Type,Sell-to Contact No.       ;KeyGroups=SOP(CRM) }
    {    ;Bill-to Contact No.                     ;KeyGroups=SOP(CRM) }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Do you want to print shipment %1?';
      Text001@1001 : TextConst 'ENU=Do you want to print invoice %1?';
      Text002@1002 : TextConst 'ENU=Do you want to print credit memo %1?';
      Text003@1003 : TextConst 'ENU=You cannot rename a %1.';
      Text004@1004 : TextConst 'ENU=Do you want to change %1?';
      Text005@1005 : TextConst 'ENU=You cannot reset %1 because the document still has one or more lines.';
      Text006@1006 : TextConst 'ENU=You cannot change %1 because the order is associated with one or more purchase orders.';
      Text007@1007 : TextConst 'ENU=%1 cannot be greater than %2 in the %3 table.';
      Text009@1009 : TextConst 'ENU=Deleting this document will cause a gap in the number series for shipments. An empty shipment %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text012@1012 : TextConst 'ENU=Deleting this document will cause a gap in the number series for posted invoices. An empty posted invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text014@1014 : TextConst 'ENU=Deleting this document will cause a gap in the number series for posted credit memos. An empty posted credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text015@1015 : TextConst 'ENU=If you change %1, the existing sales lines will be deleted and new sales lines based on the new information on the header will be created.\\Do you want to change %1?';
      Text017@1017 : TextConst 'ENU=You must delete the existing sales lines before you can change %1.';
      Text018@1018 : TextConst 'ENU=You have changed %1 on the sales header, but it has not been changed on the existing sales lines.\';
      Text019@1019 : TextConst 'ENU=You must update the existing sales lines manually.';
      Text020@1020 : TextConst 'ENU=The change may affect the exchange rate used in the price calculation of the sales lines.';
      Text021@1021 : TextConst 'ENU=Do you want to update the exchange rate?';
      Text022@1022 : TextConst 'ENU=You cannot delete this document. Your identification is set up to process from %1 %2 only.';
      Text023@1023 : TextConst 'ENU=Do you want to print return receipt %1?';
      Text024@1024 : TextConst 'ENU=You have modified the %1 field. The recalculation of VAT may cause penny differences, so you must check the amounts afterward. Do you want to update the %2 field on the lines to reflect the new value of %1?';
      Text027@1027 : TextConst 'ENU=Your identification is set up to process from %1 %2 only.';
      Text028@1028 : TextConst 'ENU=You cannot change the %1 when the %2 has been filled in.';
      Text030@1030 : TextConst 'ENU=Deleting this document will cause a gap in the number series for return receipts. An empty return receipt %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text031@1031 : TextConst 'ENU=You have modified %1.\\';
      Text032@1032 : TextConst 'ENU=Do you want to update the lines?';
      Text067@2002 : TextConst 'ENU=%1 %4 with amount of %2 has already been authorized on %3 and is not expired yet. You must void the previous authorization before you can re-authorize this %1.';
      Text068@2003 : TextConst 'ENU=There is nothing to void.';
      Text069@2004 : TextConst 'ENU=The selected operation cannot complete with the specified %1.';
      SalesSetup@1033 : Record 311;
      GLSetup@1034 : Record 98;
      GLAcc@1035 : Record 15;
      SalesHeader@1036 : Record 36;
      SalesLine@1037 : Record 37;
      CustLedgEntry@1038 : Record 21;
      Cust@1039 : Record 18;
      PaymentTerms@1040 : Record 3;
      PaymentMethod@1041 : Record 289;
      CurrExchRate@1042 : Record 330;
      SalesCommentLine@1043 : Record 44;
      ShipToAddr@1044 : Record 222;
      PostCode@1045 : Record 225;
      BankAcc@1046 : Record 270;
      SalesShptHeader@1047 : Record 110;
      SalesInvHeader@1048 : Record 112;
      SalesCrMemoHeader@1049 : Record 114;
      ReturnRcptHeader@1050 : Record 6660;
      SalesInvHeaderPrepmt@1101 : Record 112;
      SalesCrMemoHeaderPrepmt@1100 : Record 114;
      GenBusPostingGrp@1051 : Record 250;
      GenJnILine@1052 : Record 81;
      RespCenter@1053 : Record 5714;
      InvtSetup@1054 : Record 313;
      Location@1055 : Record 14;
      WhseRequest@1056 : Record 5765;
      ShippingAgentService@1057 : Record 5790;
      TempReqLine@1089 : TEMPORARY Record 246;
      UserSetupMgt@1058 : Codeunit 5700;
      NoSeriesMgt@1059 : Codeunit 396;
      CustCheckCreditLimit@1060 : Codeunit 312;
      TransferExtendedText@1061 : Codeunit 378;
      GenJnlApply@1062 : Codeunit 225;
      SalesPost@1063 : Codeunit 80;
      CustEntrySetApplID@1064 : Codeunit 101;
      DimMgt@1065 : Codeunit 408;
      ApprovalMgt@1099 : Codeunit 439;
      WhseSourceHeader@1073 : Codeunit 5781;
      ArchiveManagement@1075 : Codeunit 5063;
      SalesLineReserve@1066 : Codeunit 99000832;
      DOPaymentMgt@2000 : Codeunit 825;
      DOPaymentTransLogMgt@2001 : Codeunit 829;
      ApplyCustEntries@1067 : Page 232;
      CurrencyDate@1068 : Date;
      HideValidationDialog@1069 : Boolean;
      Confirmed@1070 : Boolean;
      Text035@1076 : TextConst 'ENU=You cannot Release Quote or Make Order unless you specify a customer on the quote.\\Do you want to create customer(s) now?';
      Text037@1078 : TextConst 'ENU=Contact %1 %2 is not related to customer %3.';
      Text038@1074 : TextConst 'ENU=Contact %1 %2 is related to a different company than customer %3.';
      Text039@1086 : TextConst 'ENU=Contact %1 %2 is not related to a customer.';
      ReservEntry@1079 : Record 337;
      TempReservEntry@1080 : TEMPORARY Record 337;
      Text040@1083 : TextConst 'ENU=A won opportunity is linked to this order.\It has to be changed to status Lost before the Order can be deleted.\Do you want to change the status for this opportunity now?';
      Text043@1087 : TextConst 'ENU=Wizard Aborted';
      Text044@1088 : TextConst 'ENU=The status of the opportunity has not been changed. The program has aborted deleting the order.';
      SkipSellToContact@1016 : Boolean;
      SkipBillToContact@1025 : Boolean;
      Text045@1081 : TextConst 'ENU="You can not change the %1 field because %2 %3 has %4 = %5 and the %6 has already been assigned %7 %8."';
      Text048@1091 : TextConst 'ENU=Sales quote %1 has already been assigned to opportunity %2. Would you like to reassign this quote?';
      Text049@1092 : TextConst 'ENU=The %1 field cannot be blank because this quote is linked to an opportunity.';
      InsertMode@1093 : Boolean;
      CompanyInfo@1094 : Record 79;
      HideCreditCheckDialogue@1097 : Boolean;
      Text051@1071 : TextConst 'ENU=The sales %1 %2 already exists.';
      Text052@1098 : TextConst 'ENU=The sales %1 %2 has item tracking. Do you want to delete it anyway?';
      Text053@1102 : TextConst 'ENU=You must cancel the approval process if you wish to change the %1.';
      Text055@1008 : TextConst 'ENU=Do you want to print prepayment invoice %1?';
      Text054@1010 : TextConst 'ENU=Do you want to print prepayment credit memo %1?';
      Text056@1105 : TextConst 'ENU=Deleting this document will cause a gap in the number series for prepayment invoices. An empty prepayment invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text057@1108 : TextConst 'ENU=Deleting this document will cause a gap in the number series for prepayment credit memos. An empty prepayment credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text061@1110 : TextConst 'ENU=%1 is set up to process from %2 %3 only.';
      Text062@1072 : TextConst 'ENU=You cannot change %1 because the corresponding %2 %3 has been assigned to this %4.';
      Text063@1077 : TextConst 'ENU=Reservations exist for this order. These reservations will be canceled if a date conflict is caused by this change.\\Do you want to continue?';
      Text064@1090 : TextConst 'ENU=You may have changed a dimension.\\Do you want to update the lines?';
      UpdateDocumentDate@1120 : Boolean;
      Text066@1095 : TextConst 'ENU=You cannot change %1 to %2 because an open inventory pick on the %3.';
      Text070@1096 : TextConst 'ENU=You cannot change %1  to %2 because an open warehouse shipment exists for the %3.';
      BilltoCustomerNoChanged@1121 : Boolean;
      Text071@1011 : TextConst 'ENU=There are unpaid prepayment invoices that are related to the document of type %1 with the number %2.';
      Text072@1013 : TextConst 'ENU=There are unpaid prepayment invoices related to the document of type %1 with the number %2.';

    PROCEDURE InitRecord@10();
    BEGIN
      SalesSetup.GET;

      CASE "Document Type" OF
        "Document Type"::Quote,"Document Type"::Order:
          BEGIN
            NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Invoice Nos.");
            NoSeriesMgt.SetDefaultSeries("Shipping No. Series",SalesSetup."Posted Shipment Nos.");
            IF "Document Type" = "Document Type"::Order THEN BEGIN
              NoSeriesMgt.SetDefaultSeries("Prepayment No. Series",SalesSetup."Posted Prepmt. Inv. Nos.");
              NoSeriesMgt.SetDefaultSeries("Prepmt. Cr. Memo No. Series",SalesSetup."Posted Prepmt. Cr. Memo Nos.");
            END;
          END;
        "Document Type"::Invoice:
          BEGIN
            IF ("No. Series" <> '') AND
               (SalesSetup."Invoice Nos." = SalesSetup."Posted Invoice Nos.")
            THEN
              "Posting No. Series" := "No. Series"
            ELSE
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Invoice Nos.");
            IF SalesSetup."Shipment on Invoice" THEN
              NoSeriesMgt.SetDefaultSeries("Shipping No. Series",SalesSetup."Posted Shipment Nos.");
          END;
        "Document Type"::"Return Order":
          BEGIN
            NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Credit Memo Nos.");
            NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",SalesSetup."Posted Return Receipt Nos.");
          END;
        "Document Type"::"Credit Memo":
          BEGIN
            IF ("No. Series" <> '') AND
               (SalesSetup."Credit Memo Nos." = SalesSetup."Posted Credit Memo Nos.")
            THEN
              "Posting No. Series" := "No. Series"
            ELSE
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Credit Memo Nos.");
            IF SalesSetup."Return Receipt on Credit Memo" THEN
              NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",SalesSetup."Posted Return Receipt Nos.");
          END;
      END;

      IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::Quote] THEN
        BEGIN
        "Shipment Date" := WORKDATE;
        "Order Date" := WORKDATE;
      END;
      IF "Document Type" = "Document Type"::"Return Order" THEN
        "Order Date" := WORKDATE;

      IF NOT ("Document Type" IN ["Document Type"::"Blanket Order","Document Type"::Quote]) AND
         ("Posting Date" = 0D)
      THEN
        "Posting Date" := WORKDATE;

      IF SalesSetup."Default Posting Date" = SalesSetup."Default Posting Date"::"No Date" THEN
        "Posting Date" := 0D;

      "Document Date" := WORKDATE;

      VALIDATE("Location Code",UserSetupMgt.GetLocation(0,Cust."Location Code","Responsibility Center"));

      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        GLSetup.GET;
        Correction := GLSetup."Mark Cr. Memos as Corrections";
      END;

      "Posting Description" := FORMAT("Document Type") + ' ' + "No.";

      Reserve := Reserve::Optional;

      IF InvtSetup.GET THEN
        VALIDATE("Outbound Whse. Handling Time",InvtSetup."Outbound Whse. Handling Time");

      "Responsibility Center" := UserSetupMgt.GetRespCenter(0,"Responsibility Center");
    END;

    PROCEDURE AssistEdit@1(OldSalesHeader@1000 : Record 36) : Boolean;
    VAR
      SalesHeader2@1001 : Record 36;
    BEGIN
      WITH SalesHeader DO BEGIN
        COPY(Rec);
        SalesSetup.GET;
        TestNoSeries;
        IF NoSeriesMgt.SelectSeries(GetNoSeriesCode,OldSalesHeader."No. Series","No. Series") THEN BEGIN
          IF ("Sell-to Customer No." = '') AND ("Sell-to Contact No." = '') THEN BEGIN
            HideCreditCheckDialogue := FALSE;
            CheckCreditMaxBeforeInsert;
            HideCreditCheckDialogue := TRUE;
          END;
          NoSeriesMgt.SetSeries("No.");
          IF SalesHeader2.GET("Document Type","No.") THEN
            ERROR(Text051,LOWERCASE(FORMAT("Document Type")),"No.");
          Rec := SalesHeader;
          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE TestNoSeries@6() : Boolean;
    BEGIN
      SalesSetup.GET;

      CASE "Document Type" OF
        "Document Type"::Quote:
          SalesSetup.TESTFIELD("Quote Nos.");
        "Document Type"::Order:
          SalesSetup.TESTFIELD("Order Nos.");
        "Document Type"::Invoice:
          BEGIN
            SalesSetup.TESTFIELD("Invoice Nos.");
            SalesSetup.TESTFIELD("Posted Invoice Nos.");
          END;
        "Document Type"::"Return Order":
          SalesSetup.TESTFIELD("Return Order Nos.");
        "Document Type"::"Credit Memo":
          BEGIN
            SalesSetup.TESTFIELD("Credit Memo Nos.");
            SalesSetup.TESTFIELD("Posted Credit Memo Nos.");
          END;
        "Document Type"::"Blanket Order":
          SalesSetup.TESTFIELD("Blanket Order Nos.");
      END;
    END;

    LOCAL PROCEDURE GetNoSeriesCode@9() : Code[10];
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote:
          EXIT(SalesSetup."Quote Nos.");
        "Document Type"::Order:
          EXIT(SalesSetup."Order Nos.");
        "Document Type"::Invoice:
          EXIT(SalesSetup."Invoice Nos.");
        "Document Type"::"Return Order":
          EXIT(SalesSetup."Return Order Nos.");
        "Document Type"::"Credit Memo":
          EXIT(SalesSetup."Credit Memo Nos.");
        "Document Type"::"Blanket Order":
          EXIT(SalesSetup."Blanket Order Nos.");
      END;
    END;

    LOCAL PROCEDURE GetPostingNoSeriesCode@8() : Code[10];
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT(SalesSetup."Posted Credit Memo Nos.");
      EXIT(SalesSetup."Posted Invoice Nos.");
    END;

    LOCAL PROCEDURE TestNoSeriesDate@40(No@1000 : Code[20];NoSeriesCode@1001 : Code[10];NoCapt@1002 : Text[1024];NoSeriesCapt@1004 : Text[1024]);
    VAR
      NoSeries@1005 : Record 308;
    BEGIN
      IF (No <> '') AND (NoSeriesCode <> '') THEN BEGIN
        NoSeries.GET(NoSeriesCode);
        IF NoSeries."Date Order" THEN
          ERROR(
            Text045,
            FIELDCAPTION("Posting Date"),NoSeriesCapt,NoSeriesCode,
            NoSeries.FIELDCAPTION("Date Order"),NoSeries."Date Order","Document Type",
            NoCapt,No);
      END;
    END;

    PROCEDURE ConfirmDeletion@11() : Boolean;
    BEGIN
      SalesPost.TestDeleteHeader(
        Rec,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,
        SalesInvHeaderPrepmt,SalesCrMemoHeaderPrepmt);
      IF SalesShptHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text009,TRUE,
             SalesShptHeader."No.")
        THEN
          EXIT;
      IF SalesInvHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text012,TRUE,
             SalesInvHeader."No.")
        THEN
          EXIT;
      IF SalesCrMemoHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text014,TRUE,
             SalesCrMemoHeader."No.")
        THEN
          EXIT;
      IF ReturnRcptHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text030,TRUE,
             ReturnRcptHeader."No.")
        THEN
          EXIT;
      IF "Prepayment No." <> '' THEN
        IF NOT CONFIRM(
             Text056,TRUE,
             SalesInvHeaderPrepmt."No.")
        THEN
          EXIT;
      IF "Prepmt. Cr. Memo No." <> '' THEN
        IF NOT CONFIRM(
             Text057,TRUE,
             SalesCrMemoHeaderPrepmt."No.")
        THEN
          EXIT;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetCust@2(CustNo@1000 : Code[20]);
    BEGIN
      IF NOT (("Document Type" = "Document Type"::Quote) AND (CustNo = '')) THEN BEGIN
        IF CustNo <> Cust."No." THEN
          Cust.GET(CustNo);
      END ELSE
        CLEAR(Cust);
    END;

    PROCEDURE SalesLinesExist@3() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      EXIT(SalesLine.FINDFIRST);
    END;

    PROCEDURE RecreateSalesLines@4(ChangedFieldName@1000 : Text[100]);
    VAR
      SalesLineTmp@1001 : TEMPORARY Record 37;
      ItemChargeAssgntSales@1004 : Record 5809;
      TempItemChargeAssgntSales@1003 : TEMPORARY Record 5809;
      TempInteger@1006 : TEMPORARY Record 2000000026;
      TempATOLink@1009 : TEMPORARY Record 904;
      ATOLink@1010 : Record 904;
      ExtendedTextAdded@1002 : Boolean;
    BEGIN
      IF SalesLinesExist THEN BEGIN
        IF HideValidationDialog OR NOT GUIALLOWED THEN
          Confirmed := TRUE
        ELSE
          Confirmed :=
            CONFIRM(
              Text015,FALSE,ChangedFieldName);
        IF Confirmed THEN BEGIN
          SalesLine.LOCKTABLE;
          ItemChargeAssgntSales.LOCKTABLE;
          ReservEntry.LOCKTABLE;
          MODIFY;

          SalesLine.RESET;
          SalesLine.SETRANGE("Document Type","Document Type");
          SalesLine.SETRANGE("Document No.","No.");
          IF SalesLine.FINDSET THEN BEGIN
            TempReservEntry.DELETEALL;
            REPEAT
              SalesLine.TESTFIELD("Job No.",'');
              SalesLine.TESTFIELD("Job Contract Entry No.",0);
              SalesLine.TESTFIELD("Quantity Shipped",0);
              SalesLine.TESTFIELD("Quantity Invoiced",0);
              SalesLine.TESTFIELD("Return Qty. Received",0);
              SalesLine.TESTFIELD("Shipment No.",'');
              SalesLine.TESTFIELD("Return Receipt No.",'');
              SalesLine.TESTFIELD("Blanket Order No.",'');
              SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
              IF SalesLine."Location Code" <> "Location Code" THEN
                SalesLine.VALIDATE("Location Code","Location Code");
              SalesLineTmp := SalesLine;
              IF SalesLine.Nonstock THEN BEGIN
                SalesLine.Nonstock := FALSE;
                SalesLine.MODIFY;
              END;

              IF ATOLink.AsmExistsForSalesLine(SalesLineTmp) THEN BEGIN
                TempATOLink := ATOLink;
                TempATOLink.INSERT;
                ATOLink.DELETE;
              END;

              SalesLineTmp.INSERT;
              RecreateReservEntry(SalesLine,0,TRUE);
              RecreateReqLine(SalesLine,0,TRUE);
            UNTIL SalesLine.NEXT = 0;

            ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
            ItemChargeAssgntSales.SETRANGE("Document No.","No.");
            IF ItemChargeAssgntSales.FINDSET THEN BEGIN
              REPEAT
                TempItemChargeAssgntSales.INIT;
                TempItemChargeAssgntSales := ItemChargeAssgntSales;
                TempItemChargeAssgntSales.INSERT;
              UNTIL ItemChargeAssgntSales.NEXT = 0;
              ItemChargeAssgntSales.DELETEALL;
            END;

            SalesLine.DELETEALL(TRUE);
            SalesLine.INIT;
            SalesLine."Line No." := 0;
            SalesLineTmp.FINDSET;
            ExtendedTextAdded := FALSE;
            SalesLine.BlockDynamicTracking(TRUE);
            REPEAT
              IF SalesLineTmp."Attached to Line No." = 0 THEN BEGIN
                SalesLine.INIT;
                SalesLine."Line No." := SalesLine."Line No." + 10000;
                SalesLine.VALIDATE(Type,SalesLineTmp.Type);
                IF SalesLineTmp."No." = '' THEN BEGIN
                  SalesLine.VALIDATE(Description,SalesLineTmp.Description);
                  SalesLine.VALIDATE("Description 2",SalesLineTmp."Description 2");
                END ELSE BEGIN
                  SalesLine.VALIDATE("No.",SalesLineTmp."No.");
                  IF SalesLine.Type <> SalesLine.Type::" " THEN BEGIN
                    SalesLine.VALIDATE("Unit of Measure Code",SalesLineTmp."Unit of Measure Code");
                    SalesLine.VALIDATE("Variant Code",SalesLineTmp."Variant Code");
                    IF SalesLineTmp.Quantity <> 0 THEN BEGIN
                      SalesLine.VALIDATE(Quantity,SalesLineTmp.Quantity);
                      SalesLine.VALIDATE("Qty. to Assemble to Order",SalesLineTmp."Qty. to Assemble to Order");
                    END;
                    SalesLine."Purchase Order No." := SalesLineTmp."Purchase Order No.";
                    SalesLine."Purch. Order Line No." := SalesLineTmp."Purch. Order Line No.";
                    SalesLine."Drop Shipment" := SalesLine."Purch. Order Line No." <> 0;
                  END;
                END;

                SalesLine.INSERT;
                ExtendedTextAdded := FALSE;

                IF SalesLine.Type = SalesLine.Type::Item THEN BEGIN
                  ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
                  TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type",SalesLineTmp."Document Type");
                  TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.",SalesLineTmp."Document No.");
                  TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.",SalesLineTmp."Line No.");
                  IF TempItemChargeAssgntSales.FINDSET THEN
                    REPEAT
                      IF NOT TempItemChargeAssgntSales.MARK THEN BEGIN
                        TempItemChargeAssgntSales."Applies-to Doc. Line No." := SalesLine."Line No.";
                        TempItemChargeAssgntSales.Description := SalesLine.Description;
                        TempItemChargeAssgntSales.MODIFY;
                        TempItemChargeAssgntSales.MARK(TRUE);
                      END;
                    UNTIL TempItemChargeAssgntSales.NEXT = 0;
                END;
                IF SalesLine.Type = SalesLine.Type::"Charge (Item)" THEN BEGIN
                  TempInteger.INIT;
                  TempInteger.Number := SalesLine."Line No.";
                  TempInteger.INSERT;
                END;
              END ELSE
                IF NOT ExtendedTextAdded THEN BEGIN
                  TransferExtendedText.SalesCheckIfAnyExtText(SalesLine,TRUE);
                  TransferExtendedText.InsertSalesExtText(SalesLine);
                  SalesLine.FINDLAST;
                  ExtendedTextAdded := TRUE;
                END;
              RecreateReservEntry(SalesLineTmp,SalesLine."Line No.",FALSE);
              RecreateReqLine(SalesLineTmp,SalesLine."Line No.",FALSE);
              SynchronizeForReservations(SalesLine,SalesLineTmp);

              IF TempATOLink.AsmExistsForSalesLine(SalesLineTmp) THEN BEGIN
                ATOLink := TempATOLink;
                ATOLink.INSERT;
                SalesLine.AutoAsmToOrder;
                TempATOLink.DELETE;
              END;
            UNTIL SalesLineTmp.NEXT = 0;

            ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
            SalesLineTmp.SETRANGE(Type,SalesLine.Type::"Charge (Item)");
            IF SalesLineTmp.FINDSET THEN
              REPEAT
                TempItemChargeAssgntSales.SETRANGE("Document Line No.",SalesLineTmp."Line No.");
                IF TempItemChargeAssgntSales.FINDSET THEN BEGIN
                  REPEAT
                    TempInteger.FINDFIRST;
                    ItemChargeAssgntSales.INIT;
                    ItemChargeAssgntSales := TempItemChargeAssgntSales;
                    ItemChargeAssgntSales."Document Line No." := TempInteger.Number;
                    ItemChargeAssgntSales.VALIDATE("Unit Cost",0);
                    ItemChargeAssgntSales.INSERT;
                  UNTIL TempItemChargeAssgntSales.NEXT = 0;
                  TempInteger.DELETE;
                END;
              UNTIL SalesLineTmp.NEXT = 0;

            SalesLineTmp.SETRANGE(Type);
            SalesLineTmp.DELETEALL;
            ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
            TempItemChargeAssgntSales.DELETEALL;
          END;
        END ELSE
          ERROR(
            Text017,ChangedFieldName);
      END;
      SalesLine.BlockDynamicTracking(FALSE);
    END;

    PROCEDURE MessageIfSalesLinesExist@5(ChangedFieldName@1000 : Text[100]);
    BEGIN
      IF SalesLinesExist AND NOT HideValidationDialog THEN
        MESSAGE(
          Text018 +
          Text019,
          ChangedFieldName);
    END;

    PROCEDURE PriceMessageIfSalesLinesExist@7(ChangedFieldName@1000 : Text[100]);
    BEGIN
      IF SalesLinesExist AND NOT HideValidationDialog THEN
        MESSAGE(
          Text018 +
          Text020,ChangedFieldName);
    END;

    LOCAL PROCEDURE UpdateCurrencyFactor@12();
    BEGIN
      IF "Currency Code" <> '' THEN BEGIN
        IF "Posting Date" <> 0D THEN
          CurrencyDate := "Posting Date"
        ELSE
          CurrencyDate := WORKDATE;

        "Currency Factor" := CurrExchRate.ExchangeRate(CurrencyDate,"Currency Code");
      END ELSE
        "Currency Factor" := 0;
    END;

    LOCAL PROCEDURE ConfirmUpdateCurrencyFactor@13();
    BEGIN
      IF HideValidationDialog THEN
        Confirmed := TRUE
      ELSE
        Confirmed := CONFIRM(Text021,FALSE);
      IF Confirmed THEN
        VALIDATE("Currency Factor")
      ELSE
        "Currency Factor" := xRec."Currency Factor";
    END;

    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    PROCEDURE UpdateSalesLines@15(ChangedFieldName@1000 : Text[100];AskQuestion@1001 : Boolean);
    VAR
      JobTransferLine@1004 : Codeunit 1004;
      Question@1002 : Text[250];
    BEGIN
      IF NOT SalesLinesExist THEN
        EXIT;

      IF AskQuestion THEN BEGIN
        Question := STRSUBSTNO(
            Text031 +
            Text032,ChangedFieldName);
        IF GUIALLOWED THEN
          IF DIALOG.CONFIRM(Question,TRUE) THEN
            CASE ChangedFieldName OF
              FIELDCAPTION("Shipment Date"),
              FIELDCAPTION("Shipping Agent Code"),
              FIELDCAPTION("Shipping Agent Service Code"),
              FIELDCAPTION("Shipping Time"),
              FIELDCAPTION("Requested Delivery Date"),
              FIELDCAPTION("Promised Delivery Date"),
              FIELDCAPTION("Outbound Whse. Handling Time"):
                ConfirmResvDateConflict;
            END
          ELSE
            EXIT;
      END;

      SalesLine.LOCKTABLE;
      MODIFY;

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      IF SalesLine.FINDSET THEN
        REPEAT
          CASE ChangedFieldName OF
            FIELDCAPTION("Shipment Date"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Shipment Date","Shipment Date");
            FIELDCAPTION("Currency Factor"):
              IF SalesLine.Type <> SalesLine.Type::" " THEN BEGIN
                SalesLine.VALIDATE("Unit Price");
                SalesLine.VALIDATE("Unit Cost (LCY)");
                IF SalesLine."Job No." <> '' THEN
                  JobTransferLine.FromSalesHeaderToPlanningLine(SalesLine,"Currency Factor");
              END;
            FIELDCAPTION("Transaction Type"):
              SalesLine.VALIDATE("Transaction Type","Transaction Type");
            FIELDCAPTION("Transport Method"):
              SalesLine.VALIDATE("Transport Method","Transport Method");
            FIELDCAPTION("Exit Point"):
              SalesLine.VALIDATE("Exit Point","Exit Point");
            FIELDCAPTION(Area):
              SalesLine.VALIDATE(Area,Area);
            FIELDCAPTION("Transaction Specification"):
              SalesLine.VALIDATE("Transaction Specification","Transaction Specification");
            FIELDCAPTION("Shipping Agent Code"):
              SalesLine.VALIDATE("Shipping Agent Code","Shipping Agent Code");
            FIELDCAPTION("Shipping Agent Service Code"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Shipping Agent Service Code","Shipping Agent Service Code");
            FIELDCAPTION("Shipping Time"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Shipping Time","Shipping Time");
            FIELDCAPTION("Prepayment %"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Prepayment %","Prepayment %");
            FIELDCAPTION("Requested Delivery Date"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Requested Delivery Date","Requested Delivery Date");
            FIELDCAPTION("Promised Delivery Date"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Promised Delivery Date","Promised Delivery Date");
            FIELDCAPTION("Outbound Whse. Handling Time"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Outbound Whse. Handling Time","Outbound Whse. Handling Time");
          END;
          SalesLineReserve.AssignForPlanning(SalesLine);
          SalesLine.MODIFY(TRUE);
        UNTIL SalesLine.NEXT = 0;
    END;

    PROCEDURE ConfirmResvDateConflict@41();
    VAR
      ResvEngMgt@1000 : Codeunit 99000831;
    BEGIN
      IF ResvEngMgt.ResvExistsForSalesHeader(Rec) THEN
        IF NOT CONFIRM(Text063,FALSE) THEN
          ERROR('');
    END;

    PROCEDURE CreateDim@16(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1006 : Integer;No4@1007 : Code[20];Type5@1008 : Integer;No5@1009 : Code[20]);
    VAR
      SourceCodeSetup@1010 : Record 242;
      TableID@1011 : ARRAY [10] OF Integer;
      No@1012 : ARRAY [10] OF Code[20];
      OldDimSetID@1013 : Integer;
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      TableID[5] := Type5;
      No[5] := No5;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(TableID,No,SourceCodeSetup.Sales,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);

      IF (OldDimSetID <> "Dimension Set ID") AND SalesLinesExist THEN BEGIN
        MODIFY;
        UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    PROCEDURE ValidateShortcutDimCode@19(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      OldDimSetID@1005 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
      IF "No." <> '' THEN
        MODIFY;

      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF SalesLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    PROCEDURE ShippedSalesLinesExist@22() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Quantity Shipped",'<>0');
      EXIT(SalesLine.FINDFIRST);
    END;

    PROCEDURE ReturnReceiptExist@5800() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Return Qty. Received",'<>0');
      EXIT(SalesLine.FINDFIRST);
    END;

    LOCAL PROCEDURE DeleteSalesLines@20();
    BEGIN
      IF SalesLine.FINDSET THEN BEGIN
        HandleItemTrackingDeletion;
        REPEAT
          SalesLine.SuspendStatusCheck(TRUE);
          SalesLine.DELETE(TRUE);
        UNTIL SalesLine.NEXT = 0;
      END;
    END;

    PROCEDURE HandleItemTrackingDeletion@36();
    VAR
      ReservEntry2@1000 : Record 337;
    BEGIN
      WITH ReservEntry DO BEGIN
        RESET;
        SETCURRENTKEY(
          "Source ID","Source Ref. No.","Source Type","Source Subtype",
          "Source Batch Name","Source Prod. Order Line","Reservation Status");
        SETRANGE("Source Type",DATABASE::"Sales Line");
        SETRANGE("Source Subtype","Document Type");
        SETRANGE("Source ID","No.");
        SETRANGE("Source Batch Name",'');
        SETRANGE("Source Prod. Order Line",0);
        SETFILTER("Item Tracking",'> %1',"Item Tracking"::None);
        IF ISEMPTY THEN
          EXIT;

        IF HideValidationDialog OR NOT GUIALLOWED THEN
          Confirmed := TRUE
        ELSE
          Confirmed := CONFIRM(Text052,FALSE,LOWERCASE(FORMAT("Document Type")),"No.");

        IF NOT Confirmed THEN
          ERROR('');

        IF FINDSET THEN
          REPEAT
            ReservEntry2 := ReservEntry;
            ReservEntry2.ClearItemTrackingFields;
            ReservEntry2.MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ClearItemAssgntSalesFilter@17(VAR TempItemChargeAssgntSales@1000 : Record 5809);
    BEGIN
      TempItemChargeAssgntSales.SETRANGE("Document Line No.");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.");
    END;

    PROCEDURE CheckCustomerCreated@18(Prompt@1000 : Boolean) : Boolean;
    VAR
      Cont@1001 : Record 5050;
    BEGIN
      IF ("Bill-to Customer No." <> '') AND ("Sell-to Customer No." <> '') THEN
        EXIT(TRUE);

      IF Prompt THEN
        IF NOT CONFIRM(Text035,TRUE) THEN
          EXIT(FALSE);

      IF "Sell-to Customer No." = '' THEN BEGIN
        TESTFIELD("Sell-to Contact No.");
        TESTFIELD("Sell-to Customer Template Code");
        Cont.GET("Sell-to Contact No.");
        Cont.CreateCustomer("Sell-to Customer Template Code");
        COMMIT;
        GET("Document Type"::Quote,"No.");
      END;

      IF "Bill-to Customer No." = '' THEN BEGIN
        TESTFIELD("Bill-to Contact No.");
        TESTFIELD("Bill-to Customer Template Code");
        Cont.GET("Bill-to Contact No.");
        Cont.CreateCustomer("Bill-to Customer Template Code");
        COMMIT;
        GET("Document Type"::Quote,"No.");
      END;

      EXIT(("Bill-to Customer No." <> '') AND ("Sell-to Customer No." <> ''));
    END;

    PROCEDURE RecreateReservEntry@21(OldSalesLine@1000 : Record 37;NewSourceRefNo@1001 : Integer;ToTemp@1002 : Boolean);
    BEGIN
      IF ToTemp THEN BEGIN
        CLEAR(ReservEntry);
        ReservEntry.SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype");
        ReservEntry.SETRANGE("Source ID",OldSalesLine."Document No.");
        ReservEntry.SETRANGE("Source Ref. No.",OldSalesLine."Line No.");
        ReservEntry.SETRANGE("Source Type",DATABASE::"Sales Line");
        ReservEntry.SETRANGE("Source Subtype",OldSalesLine."Document Type");
        IF ReservEntry.FINDSET THEN
          REPEAT
            TempReservEntry := ReservEntry;
            TempReservEntry.INSERT;
          UNTIL ReservEntry.NEXT = 0;
        ReservEntry.DELETEALL;
      END ELSE BEGIN
        CLEAR(TempReservEntry);
        TempReservEntry.SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype");
        TempReservEntry.SETRANGE("Source Type",DATABASE::"Sales Line");
        TempReservEntry.SETRANGE("Source Subtype",OldSalesLine."Document Type");
        TempReservEntry.SETRANGE("Source ID",OldSalesLine."Document No.");
        TempReservEntry.SETRANGE("Source Ref. No.",OldSalesLine."Line No.");
        IF TempReservEntry.FINDSET THEN
          REPEAT
            ReservEntry := TempReservEntry;
            ReservEntry."Source Ref. No." := NewSourceRefNo;
            ReservEntry.INSERT;
          UNTIL TempReservEntry.NEXT = 0;
        TempReservEntry.DELETEALL;
      END;
    END;

    PROCEDURE RecreateReqLine@33(OldSalesLine@1000 : Record 37;NewSourceRefNo@1001 : Integer;ToTemp@1002 : Boolean);
    VAR
      ReqLine@1003 : Record 246;
    BEGIN
      IF ToTemp THEN BEGIN
        ReqLine.SETCURRENTKEY("Order Promising ID","Order Promising Line ID","Order Promising Line No.");
        ReqLine.SETRANGE("Order Promising ID",OldSalesLine."Document No.");
        ReqLine.SETRANGE("Order Promising Line ID",OldSalesLine."Line No.");
        IF ReqLine.FINDSET THEN
          REPEAT
            TempReqLine := ReqLine;
            TempReqLine.INSERT;
          UNTIL ReqLine.NEXT = 0;
        ReqLine.DELETEALL;
      END ELSE BEGIN
        CLEAR(TempReqLine);
        TempReqLine.SETCURRENTKEY("Order Promising ID","Order Promising Line ID","Order Promising Line No.");
        TempReqLine.SETRANGE("Order Promising ID",OldSalesLine."Document No.");
        TempReqLine.SETRANGE("Order Promising Line ID",OldSalesLine."Line No.");
        IF TempReqLine.FINDSET THEN
          REPEAT
            ReqLine := TempReqLine;
            ReqLine."Order Promising Line ID" := NewSourceRefNo;
            ReqLine.INSERT;
          UNTIL TempReqLine.NEXT = 0;
        TempReqLine.DELETEALL;
      END;
    END;

    PROCEDURE UpdateSellToCont@24(CustomerNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Cust@1004 : Record 18;
    BEGIN
      IF Cust.GET(CustomerNo) THEN BEGIN
        IF Cust."Primary Contact No." <> '' THEN
          "Sell-to Contact No." := Cust."Primary Contact No."
        ELSE BEGIN
          ContBusRel.RESET;
          ContBusRel.SETCURRENTKEY("Link to Table","No.");
          ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
          ContBusRel.SETRANGE("No.","Sell-to Customer No.");
          IF ContBusRel.FINDFIRST THEN
            "Sell-to Contact No." := ContBusRel."Contact No."
          ELSE
            "Sell-to Contact No." := '';
        END;
        "Sell-to Contact" := Cust.Contact;
      END;
    END;

    PROCEDURE UpdateBillToCont@27(CustomerNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Cust@1001 : Record 18;
    BEGIN
      IF Cust.GET(CustomerNo) THEN BEGIN
        IF Cust."Primary Contact No." <> '' THEN
          "Bill-to Contact No." := Cust."Primary Contact No."
        ELSE BEGIN
          ContBusRel.RESET;
          ContBusRel.SETCURRENTKEY("Link to Table","No.");
          ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
          ContBusRel.SETRANGE("No.","Bill-to Customer No.");
          IF ContBusRel.FINDFIRST THEN
            "Bill-to Contact No." := ContBusRel."Contact No."
          ELSE
            "Bill-to Contact No." := '';
        END;
        "Bill-to Contact" := Cust.Contact;
      END;
    END;

    PROCEDURE UpdateSellToCust@25(ContactNo@1002 : Code[20]);
    VAR
      ContBusinessRelation@1007 : Record 5054;
      Customer@1006 : Record 18;
      Cont@1005 : Record 5050;
      CustTemplate@1004 : Record 5105;
      ContComp@1003 : Record 5050;
    BEGIN
      IF Cont.GET(ContactNo) THEN
        "Sell-to Contact No." := Cont."No."
      ELSE BEGIN
        "Sell-to Contact" := '';
        EXIT;
      END;

      ContBusinessRelation.RESET;
      ContBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
      ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
      IF ContBusinessRelation.FINDFIRST THEN BEGIN
        IF ("Sell-to Customer No." <> '') AND
           ("Sell-to Customer No." <> ContBusinessRelation."No.")
        THEN
          ERROR(Text037,Cont."No.",Cont.Name,"Sell-to Customer No.");
        IF "Sell-to Customer No." = '' THEN BEGIN
          SkipSellToContact := TRUE;
          VALIDATE("Sell-to Customer No.",ContBusinessRelation."No.");
          SkipSellToContact := FALSE;
        END;
      END ELSE BEGIN
        IF "Document Type" = "Document Type"::Quote THEN BEGIN
          Cont.TESTFIELD("Company No.");
          ContComp.GET(Cont."Company No.");
          "Sell-to Customer Name" := ContComp."Company Name";
          "Sell-to Customer Name 2" := ContComp."Name 2";
          "Ship-to Name" := ContComp."Company Name";
          "Ship-to Name 2" := ContComp."Name 2";
          "Ship-to Address" := ContComp.Address;
          "Ship-to Address 2" := ContComp."Address 2";
          "Ship-to City" := ContComp.City;
          "Ship-to Post Code" := ContComp."Post Code";
          "Ship-to County" := ContComp.County;
          VALIDATE("Ship-to Country/Region Code",ContComp."Country/Region Code");
          IF ("Sell-to Customer Template Code" = '') AND (NOT CustTemplate.ISEMPTY) THEN
            VALIDATE("Sell-to Customer Template Code",Cont.FindCustomerTemplate);
        END ELSE
          ERROR(Text039,Cont."No.",Cont.Name);
      END;

      IF Cont.Type = Cont.Type::Person THEN
        "Sell-to Contact" := Cont.Name
      ELSE
        IF Customer.GET("Sell-to Customer No.") THEN
          "Sell-to Contact" := Customer.Contact
        ELSE
          "Sell-to Contact" := '';

      IF "Document Type" = "Document Type"::Quote THEN BEGIN
        IF Customer.GET("Sell-to Customer No.") OR Customer.GET(ContBusinessRelation."No.") THEN BEGIN
          IF Customer."Copy Sell-to Addr. to Qte From" = Customer."Copy Sell-to Addr. to Qte From"::Company THEN BEGIN
            Cont.TESTFIELD("Company No.");
            Cont.GET(Cont."Company No.");
          END;
        END ELSE BEGIN
          Cont.TESTFIELD("Company No.");
          Cont.GET(Cont."Company No.");
        END;
        "Sell-to Address" := Cont.Address;
        "Sell-to Address 2" := Cont."Address 2";
        "Sell-to City" := Cont.City;
        "Sell-to Post Code" := Cont."Post Code";
        "Sell-to County" := Cont.County;
        "Sell-to Country/Region Code" := Cont."Country/Region Code";
      END;
      IF ("Sell-to Customer No." = "Bill-to Customer No.") OR
         ("Bill-to Customer No." = '')
      THEN
        VALIDATE("Bill-to Contact No.","Sell-to Contact No.");
    END;

    PROCEDURE UpdateBillToCust@26(ContactNo@1000 : Code[20]);
    VAR
      ContBusinessRelation@1005 : Record 5054;
      Cust@1004 : Record 18;
      Cont@1003 : Record 5050;
      CustTemplate@1002 : Record 5105;
      ContComp@1001 : Record 5050;
    BEGIN
      IF Cont.GET(ContactNo) THEN BEGIN
        "Bill-to Contact No." := Cont."No.";
        IF Cont.Type = Cont.Type::Person THEN
          "Bill-to Contact" := Cont.Name
        ELSE
          IF Cust.GET("Bill-to Customer No.") THEN
            "Bill-to Contact" := Cust.Contact
          ELSE
            "Bill-to Contact" := '';
      END ELSE BEGIN
        "Bill-to Contact" := '';
        EXIT;
      END;

      ContBusinessRelation.RESET;
      ContBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
      ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
      IF ContBusinessRelation.FINDFIRST THEN BEGIN
        IF "Bill-to Customer No." = '' THEN BEGIN
          SkipBillToContact := TRUE;
          VALIDATE("Bill-to Customer No.",ContBusinessRelation."No.");
          SkipBillToContact := FALSE;
          "Bill-to Customer Template Code" := '';
        END ELSE
          IF "Bill-to Customer No." <> ContBusinessRelation."No." THEN
            ERROR(Text037,Cont."No.",Cont.Name,"Bill-to Customer No.");
      END ELSE BEGIN
        IF "Document Type" = "Document Type"::Quote THEN BEGIN
          Cont.TESTFIELD("Company No.");
          ContComp.GET(Cont."Company No.");
          "Bill-to Name" := ContComp."Company Name";
          "Bill-to Name 2" := ContComp."Name 2";
          "Bill-to Address" := ContComp.Address;
          "Bill-to Address 2" := ContComp."Address 2";
          "Bill-to City" := ContComp.City;
          "Bill-to Post Code" := ContComp."Post Code";
          "Bill-to County" := ContComp.County;
          "Bill-to Country/Region Code" := ContComp."Country/Region Code";
          "VAT Registration No." := ContComp."VAT Registration No.";
          VALIDATE("Currency Code",ContComp."Currency Code");
          "Language Code" := ContComp."Language Code";
          IF ("Bill-to Customer Template Code" = '') AND (NOT CustTemplate.ISEMPTY) THEN
            VALIDATE("Bill-to Customer Template Code",Cont.FindCustomerTemplate);
        END ELSE
          ERROR(Text039,Cont."No.",Cont.Name);
      END;
    END;

    PROCEDURE GetShippingTime@23(CalledByFieldNo@1000 : Integer);
    BEGIN
      IF (CalledByFieldNo <> CurrFieldNo) AND (CurrFieldNo <> 0) THEN
        EXIT;

      IF ShippingAgentService.GET("Shipping Agent Code","Shipping Agent Service Code") THEN
        "Shipping Time" := ShippingAgentService."Shipping Time"
      ELSE BEGIN
        GetCust("Sell-to Customer No.");
        "Shipping Time" := Cust."Shipping Time"
      END;
      IF NOT (CalledByFieldNo IN [FIELDNO("Shipping Agent Code"),FIELDNO("Shipping Agent Service Code")]) THEN
        VALIDATE("Shipping Time");
    END;

    PROCEDURE CheckCreditMaxBeforeInsert@28();
    VAR
      SalesHeader@1001 : Record 36;
      ContBusinessRelation@1002 : Record 5054;
      Cont@1003 : Record 5050;
      CustCheckCreditLimit@1000 : Codeunit 312;
    BEGIN
      IF HideCreditCheckDialogue THEN
        EXIT;
      IF GETFILTER("Sell-to Customer No.") <> '' THEN BEGIN
        IF GETRANGEMIN("Sell-to Customer No.") = GETRANGEMAX("Sell-to Customer No.") THEN BEGIN
          Cust.GET(GETRANGEMIN("Sell-to Customer No."));
          IF Cust."Bill-to Customer No." <> '' THEN
            SalesHeader."Bill-to Customer No." := Cust."Bill-to Customer No."
          ELSE
            SalesHeader."Bill-to Customer No." := Cust."No.";
          CustCheckCreditLimit.SalesHeaderCheck(SalesHeader);
        END
      END ELSE
        IF GETFILTER("Sell-to Contact No.") <> '' THEN
          IF GETRANGEMIN("Sell-to Contact No.") = GETRANGEMAX("Sell-to Contact No.") THEN BEGIN
            Cont.GET(GETRANGEMIN("Sell-to Contact No."));
            ContBusinessRelation.RESET;
            ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
            ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
            ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
            IF ContBusinessRelation.FINDFIRST THEN BEGIN
              Cust.GET(ContBusinessRelation."No.");
              IF Cust."Bill-to Customer No." <> '' THEN
                SalesHeader."Bill-to Customer No." := Cust."Bill-to Customer No."
              ELSE
                SalesHeader."Bill-to Customer No." := Cust."No.";
              CustCheckCreditLimit.SalesHeaderCheck(SalesHeader);
            END;
          END;
    END;

    PROCEDURE CreateInvtPutAwayPick@29();
    VAR
      WhseRequest@1000 : Record 5765;
    BEGIN
      TESTFIELD(Status,Status::Released);

      WhseRequest.RESET;
      WhseRequest.SETCURRENTKEY("Source Document","Source No.");
      CASE "Document Type" OF
        "Document Type"::Order:
          WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Sales Order");
        "Document Type"::"Return Order":
          WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Sales Return Order");
      END;
      WhseRequest.SETRANGE("Source No.","No.");
      REPORT.RUNMODAL(REPORT::"Create Invt Put-away/Pick/Mvmt",TRUE,FALSE,WhseRequest);
    END;

    PROCEDURE CreateTodo@30();
    VAR
      TempTodo@1000 : TEMPORARY Record 5080;
    BEGIN
      TESTFIELD("Sell-to Contact No.");
      TempTodo.CreateToDoFromSalesHeader(Rec);
    END;

    LOCAL PROCEDURE UpdateShipToAddress@31();
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        IF "Location Code" <> '' THEN BEGIN
          Location.GET("Location Code");
          "Ship-to Name" := Location.Name;
          "Ship-to Name 2" := Location."Name 2";
          "Ship-to Address" := Location.Address;
          "Ship-to Address 2" := Location."Address 2";
          "Ship-to City" := Location.City;
          "Ship-to Post Code" := Location."Post Code";
          "Ship-to County" := Location.County;
          "Ship-to Country/Region Code" := Location."Country/Region Code";
          "Ship-to Contact" := Location.Contact;
        END ELSE BEGIN
          CompanyInfo.GET;
          "Ship-to Code" := '';
          "Ship-to Name" := CompanyInfo."Ship-to Name";
          "Ship-to Name 2" := CompanyInfo."Ship-to Name 2";
          "Ship-to Address" := CompanyInfo."Ship-to Address";
          "Ship-to Address 2" := CompanyInfo."Ship-to Address 2";
          "Ship-to City" := CompanyInfo."Ship-to City";
          "Ship-to Post Code" := CompanyInfo."Ship-to Post Code";
          "Ship-to County" := CompanyInfo."Ship-to County";
          "Ship-to Country/Region Code" := CompanyInfo."Ship-to Country/Region Code";
          "Ship-to Contact" := CompanyInfo."Ship-to Contact";
        END;
      END;
    END;

    PROCEDURE ShowDocDim@32();
    VAR
      OldDimSetID@1000 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2',"Document Type","No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF SalesLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    LOCAL PROCEDURE UpdateAllLineDim@34(NewParentDimSetID@1000 : Integer;OldParentDimSetID@1001 : Integer);
    VAR
      ATOLink@1003 : Record 904;
      NewDimSetID@1002 : Integer;
    BEGIN
      // Update all lines with changed dimensions.

      IF NewParentDimSetID = OldParentDimSetID THEN
        EXIT;
      IF NOT CONFIRM(Text064) THEN
        EXIT;

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.LOCKTABLE;
      IF SalesLine.FIND('-') THEN
        REPEAT
          NewDimSetID := DimMgt.GetDeltaDimSetID(SalesLine."Dimension Set ID",NewParentDimSetID,OldParentDimSetID);
          IF SalesLine."Dimension Set ID" <> NewDimSetID THEN BEGIN
            SalesLine."Dimension Set ID" := NewDimSetID;
            DimMgt.UpdateGlobalDimFromDimSetID(
              SalesLine."Dimension Set ID",SalesLine."Shortcut Dimension 1 Code",SalesLine."Shortcut Dimension 2 Code");
            SalesLine.MODIFY;
            ATOLink.UpdateAsmDimFromSalesLine(SalesLine);
          END;
        UNTIL SalesLine.NEXT = 0;
    END;

    PROCEDURE SetAmountToApply@35(AppliesToDocNo@1000 : Code[20];CustomerNo@1001 : Code[20]);
    VAR
      CustLedgEntry@1002 : Record 21;
    BEGIN
      CustLedgEntry.SETCURRENTKEY("Document No.");
      CustLedgEntry.SETRANGE("Document No.",AppliesToDocNo);
      CustLedgEntry.SETRANGE("Customer No.",CustomerNo);
      CustLedgEntry.SETRANGE(Open,TRUE);
      IF CustLedgEntry.FINDFIRST THEN BEGIN
        IF CustLedgEntry."Amount to Apply" = 0 THEN  BEGIN
          CustLedgEntry.CALCFIELDS("Remaining Amount");
          CustLedgEntry."Amount to Apply" := CustLedgEntry."Remaining Amount";
        END ELSE
          CustLedgEntry."Amount to Apply" := 0;
        CustLedgEntry."Accepted Payment Tolerance" := 0;
        CustLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
        CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgEntry);
      END;
    END;

    PROCEDURE LookupAdjmtValueEntries@37(QtyType@1000 : 'General,Invoicing');
    VAR
      ItemLedgEntry@1004 : Record 32;
      SalesLine@1001 : Record 37;
      SalesShptLine@1005 : Record 111;
      ReturnRcptLine@1002 : Record 6661;
      TempValueEntry@1003 : TEMPORARY Record 5802;
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      TempValueEntry.RESET;
      TempValueEntry.DELETEALL;

      CASE "Document Type" OF
        "Document Type"::Order,"Document Type"::Invoice:
          BEGIN
            IF SalesLine.FINDSET THEN
              REPEAT
                IF (SalesLine.Type = SalesLine.Type::Item) AND (SalesLine.Quantity <> 0) THEN
                  WITH SalesShptLine DO BEGIN
                    IF SalesLine."Shipment No." <> '' THEN BEGIN
                      SETRANGE("Document No.",SalesLine."Shipment No.");
                      SETRANGE("Line No.",SalesLine."Shipment Line No.");
                    END ELSE BEGIN
                      SETCURRENTKEY("Order No.","Order Line No.");
                      SETRANGE("Order No.",SalesLine."Document No.");
                      SETRANGE("Order Line No.",SalesLine."Line No.");
                    END;
                    SETRANGE(Correction,FALSE);
                    IF QtyType = QtyType::Invoicing THEN
                      SETFILTER("Qty. Shipped Not Invoiced",'<>0');

                    IF FINDSET THEN
                      REPEAT
                        FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
                        IF ItemLedgEntry.FINDSET THEN
                          REPEAT
                            CreateTempAdjmtValueEntries(TempValueEntry,ItemLedgEntry."Entry No.");
                          UNTIL ItemLedgEntry.NEXT = 0;
                      UNTIL NEXT = 0;
                  END;
              UNTIL SalesLine.NEXT = 0;
          END;
        "Document Type"::"Return Order","Document Type"::"Credit Memo":
          BEGIN
            IF SalesLine.FINDSET THEN
              REPEAT
                IF (SalesLine.Type = SalesLine.Type::Item) AND (SalesLine.Quantity <> 0) THEN
                  WITH ReturnRcptLine DO BEGIN
                    IF SalesLine."Return Receipt No." <> '' THEN BEGIN
                      SETRANGE("Document No.",SalesLine."Return Receipt No.");
                      SETRANGE("Line No.",SalesLine."Return Receipt Line No.");
                    END ELSE BEGIN
                      SETCURRENTKEY("Return Order No.","Return Order Line No.");
                      SETRANGE("Return Order No.",SalesLine."Document No.");
                      SETRANGE("Return Order Line No.",SalesLine."Line No.");
                    END;
                    SETRANGE(Correction,FALSE);
                    IF QtyType = QtyType::Invoicing THEN
                      SETFILTER("Return Qty. Rcd. Not Invd.",'<>0');

                    IF FINDSET THEN
                      REPEAT
                        FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
                        IF ItemLedgEntry.FINDSET THEN
                          REPEAT
                            CreateTempAdjmtValueEntries(TempValueEntry,ItemLedgEntry."Entry No.");
                          UNTIL ItemLedgEntry.NEXT = 0;
                      UNTIL NEXT = 0;
                  END;
              UNTIL SalesLine.NEXT = 0;
          END;
      END;
      PAGE.RUNMODAL(0,TempValueEntry);
    END;

    PROCEDURE CreateTempAdjmtValueEntries@38(VAR TempValueEntry@1001 : TEMPORARY Record 5802;ItemLedgEntryNo@1000 : Integer);
    VAR
      ValueEntry@1002 : Record 5802;
    BEGIN
      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item Ledger Entry No.");
        SETRANGE("Item Ledger Entry No.",ItemLedgEntryNo);
        IF FINDSET THEN
          REPEAT
            IF Adjustment THEN BEGIN
              TempValueEntry := ValueEntry;
              IF TempValueEntry.INSERT THEN;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE GetPstdDocLinesToRevere@39();
    VAR
      SalesPostedDocLines@1000 : Page 5850;
    BEGIN
      GetCust("Sell-to Customer No.");
      SalesPostedDocLines.SetToSalesHeader(Rec);
      SalesPostedDocLines.SETRECORD(Cust);
      SalesPostedDocLines.LOOKUPMODE := TRUE;
      IF SalesPostedDocLines.RUNMODAL = ACTION::LookupOK THEN
        SalesPostedDocLines.CopyLineToDoc;

      CLEAR(SalesPostedDocLines);
    END;

    PROCEDURE CalcInvDiscForHeader@45();
    VAR
      SalesInvDisc@1000 : Codeunit 60;
    BEGIN
      SalesSetup.GET;
      IF SalesSetup."Calc. Inv. Discount" THEN
        SalesInvDisc.CalculateIncDiscForHeader(Rec);
    END;

    PROCEDURE SetSecurityFilterOnRespCenter@43();
    BEGIN
      IF UserSetupMgt.GetSalesFilter <> '' THEN BEGIN
        FILTERGROUP(2);
        SETRANGE("Responsibility Center",UserSetupMgt.GetSalesFilter);
        FILTERGROUP(0);
      END;

      SETRANGE("Date Filter",0D,WORKDATE - 1);
    END;

    PROCEDURE Authorize@50();
    VAR
      DOPaymentTransLogEntry@1001 : Record 829;
    BEGIN
      IF NOT DOPaymentMgt.IsValidPaymentMethod("Payment Method Code") THEN
        ERROR(Text069,FIELDCAPTION("Payment Method Code"));
      DOPaymentTransLogMgt.FindValidAuthorizationEntry("Document Type","No.",DOPaymentTransLogEntry);
      IF DOPaymentTransLogEntry."Entry No." = DOPaymentMgt.AuthorizeSalesDoc(Rec,0,TRUE) THEN
        ERROR(Text067,
          DOPaymentTransLogEntry."Document Type",
          DOPaymentTransLogEntry.Amount,
          DOPaymentTransLogEntry."Transaction Date-Time",
          DOPaymentTransLogEntry."Document No.");
      "Authorization Required" := TRUE;
      MODIFY;
    END;

    PROCEDURE Void@51();
    VAR
      DOPaymentTransLogEntry@1001 : Record 829;
      DOPaymentTransLogMgt@1002 : Codeunit 829;
    BEGIN
      IF NOT DOPaymentMgt.IsValidPaymentMethod("Payment Method Code") THEN
        ERROR(Text069,FIELDCAPTION("Payment Method Code"));
      CLEAR(DOPaymentMgt);
      DOPaymentMgt.CheckSalesDoc(Rec);
      IF DOPaymentTransLogMgt.FindValidAuthorizationEntry("Document Type","No.",DOPaymentTransLogEntry) THEN
        DOPaymentMgt.VoidSalesDoc(Rec,DOPaymentTransLogEntry)
      ELSE
        MESSAGE(Text068);
      "Authorization Required" := FALSE;
      MODIFY;
    END;

    PROCEDURE GetCreditcardNumber@44() : Text[20];
    VAR
      DOPaymentCreditCard@1001 : Record 827;
    BEGIN
      IF "Credit Card No." = '' THEN
        EXIT('');
      EXIT(DOPaymentCreditCard.GetCreditCardNumber("Credit Card No."));
    END;

    PROCEDURE SynchronizeForReservations@42(VAR NewSalesLine@1000 : Record 37;OldSalesLine@1001 : Record 37);
    BEGIN
      NewSalesLine.CALCFIELDS("Reserved Quantity");
      IF NewSalesLine."Reserved Quantity" = 0 THEN
        EXIT;
      IF NewSalesLine."Location Code" <> OldSalesLine."Location Code" THEN
        NewSalesLine.VALIDATE("Location Code",OldSalesLine."Location Code");
      IF NewSalesLine."Bin Code" <> OldSalesLine."Bin Code" THEN
        NewSalesLine.VALIDATE("Bin Code",OldSalesLine."Bin Code");
      IF NewSalesLine.MODIFY THEN;
    END;

    PROCEDURE InventoryPickConflict@46(DocType@1002 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocNo@1003 : Code[20];ShippingAdvice@1004 : 'Partial,Complete') : Boolean;
    VAR
      WarehouseActivityLine@1000 : Record 5767;
      SalesLine@1001 : Record 37;
    BEGIN
      IF ShippingAdvice <> ShippingAdvice::Complete THEN
        EXIT(FALSE);
      WarehouseActivityLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
      WarehouseActivityLine.SETRANGE("Source Type",DATABASE::"Sales Line");
      WarehouseActivityLine.SETRANGE("Source Subtype",DocType);
      WarehouseActivityLine.SETRANGE("Source No.",DocNo);
      IF WarehouseActivityLine.ISEMPTY THEN
        EXIT(FALSE);
      SalesLine.SETRANGE("Document Type",DocType);
      SalesLine.SETRANGE("Document No.",DocNo);
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      IF SalesLine.ISEMPTY THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    PROCEDURE WhseShpmntConflict@52(DocType@1002 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocNo@1001 : Code[20];ShippingAdvice@1000 : 'Partial,Complete') : Boolean;
    VAR
      WarehouseShipmentLine@1003 : Record 7321;
    BEGIN
      IF ShippingAdvice <> ShippingAdvice::Complete THEN
        EXIT(FALSE);
      WarehouseShipmentLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
      WarehouseShipmentLine.SETRANGE("Source Type",DATABASE::"Sales Line");
      WarehouseShipmentLine.SETRANGE("Source Subtype",DocType);
      WarehouseShipmentLine.SETRANGE("Source No.",DocNo);
      IF WarehouseShipmentLine.ISEMPTY THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    PROCEDURE CheckCrLimit@47();
    BEGIN
      IF GUIALLOWED AND (CurrFieldNo <> 0) AND ("Document Type" <= "Document Type"::Invoice) THEN BEGIN
        "Amount Including VAT" := 0;
        IF "Document Type" = "Document Type"::Order THEN
          IF BilltoCustomerNoChanged THEN BEGIN
            SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
            SalesLine.SETRANGE("Document No.","No.");
            SalesLine.CALCSUMS("Outstanding Amount","Shipped Not Invoiced");
            "Amount Including VAT" := SalesLine."Outstanding Amount" + SalesLine."Shipped Not Invoiced";
          END;
        CustCheckCreditLimit.SalesHeaderCheck(Rec);
        CALCFIELDS("Amount Including VAT");
      END;
    END;

    PROCEDURE QtyToShipIsZero@49() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Qty. to Ship",'<>0');
      EXIT(SalesLine.ISEMPTY);
    END;

    PROCEDURE IsApprovedForPosting@53() : Boolean;
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      PurchaseHeader.INIT;
      IF ApprovalMgt.PrePostApprovalCheck(Rec,PurchaseHeader) THEN BEGIN
        IF ApprovalMgt.TestSalesPrepayment(Rec) THEN
          ERROR(STRSUBSTNO(Text071,"Document Type","No."));
        IF ApprovalMgt.TestSalesPayment(Rec) THEN
          ERROR(STRSUBSTNO(Text072,"Document Type","No."));
        EXIT(TRUE);
      END;
    END;

    PROCEDURE IsApprovedForPostingBatch@54() : Boolean;
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      PurchaseHeader.INIT;
      IF ApprovalMgt.PrePostApprovalCheck(Rec,PurchaseHeader) THEN BEGIN
        IF ApprovalMgt.TestSalesPrepayment(Rec) THEN
          EXIT(FALSE);
        IF ApprovalMgt.TestSalesPayment(Rec) THEN
          EXIT(FALSE);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE SendToPosting@57(PostingCodeunitID@1000 : Integer);
    BEGIN
      IF NOT IsApprovedForPosting THEN
        EXIT;
      CODEUNIT.RUN(PostingCodeunitID,Rec);
    END;

    PROCEDURE CancelBackgroundPosting@48();
    VAR
      SalesPostViaJobQueue@1000 : Codeunit 88;
    BEGIN
      SalesPostViaJobQueue.CancelQueueEntry(Rec);
    END;

    BEGIN
    END.
  }
}

OBJECT Table 5050 Contact
{
  OBJECT-PROPERTIES
  {
    Date=10/10/12;
    Time=[ 2:50:50 AM];
    Modified=Yes;
    Version List=NAVW17.00,Lync;
  }
  PROPERTIES
  {
    Permissions=TableData 5065=r;
    DataCaptionFields=No.,Name;
    OnInsert=BEGIN
               RMSetup.GET;

               IF "No." = '' THEN BEGIN
                 RMSetup.TESTFIELD("Contact Nos.");
                 NoSeriesMgt.InitSeries(RMSetup."Contact Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;

               IF NOT SkipDefaults THEN BEGIN
                 IF "Salesperson Code" = '' THEN
                   "Salesperson Code" := RMSetup."Default Salesperson Code";
                 IF "Territory Code" = '' THEN
                   "Territory Code" := RMSetup."Default Territory Code";
                 IF "Country/Region Code" = '' THEN
                   "Country/Region Code" := RMSetup."Default Country/Region Code";
                 IF "Language Code" = '' THEN
                   "Language Code" := RMSetup."Default Language Code";
                 IF "Correspondence Type" = "Correspondence Type"::" " THEN
                   "Correspondence Type" := RMSetup."Default Correspondence Type";
                 IF "Salutation Code" = '' THEN
                   IF Type = Type::Company THEN
                     "Salutation Code" := RMSetup."Def. Company Salutation Code"
                   ELSE
                     "Salutation Code" := RMSetup."Default Person Salutation Code";
               END;

               TypeChange;

               "Last Date Modified" := TODAY;
               "Last Time Modified" := TIME;
             END;

    OnModify=BEGIN
               OnModify(xRec);
             END;

    OnDelete=VAR
               Todo@1000 : Record 5080;
               SegLine@1001 : Record 5077;
               ContIndustGrp@1002 : Record 5058;
               ContactWebSource@1003 : Record 5060;
               ContJobResp@1004 : Record 5067;
               ContMailingGrp@1005 : Record 5056;
               ContProfileAnswer@1006 : Record 5089;
               RMCommentLine@1007 : Record 5061;
               ContAltAddr@1008 : Record 5051;
               ContAltAddrDateRange@1009 : Record 5052;
               InteractLogEntry@1010 : Record 5065;
               Opp@1011 : Record 5092;
               DOPaymentCreditCard@1017 : Record 827;
               CampaignTargetGrMgt@1016 : Codeunit 7030;
             BEGIN
               DOPaymentCreditCard.DeleteByContact(Rec);

               Todo.SETCURRENTKEY("Contact Company No.","Contact No.",Closed,Date);
               Todo.SETRANGE("Contact Company No.","Company No.");
               Todo.SETRANGE("Contact No.","No.");
               Todo.SETRANGE(Closed,FALSE);
               IF Todo.FIND('-') THEN
                 ERROR(Text000,TABLECAPTION,"No.");

               SegLine.SETCURRENTKEY("Contact No.");
               SegLine.SETRANGE("Contact No.","No.");
               IF SegLine.FINDFIRST THEN
                 ERROR(Text001,TABLECAPTION,"No.");

               Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
               Opp.SETRANGE("Contact Company No.","Company No.");
               Opp.SETRANGE("Contact No.","No.");
               Opp.SETRANGE(Status,Opp.Status::"Not Started",Opp.Status::"In Progress");
               IF Opp.FIND('-') THEN
                 ERROR(Text002,TABLECAPTION,"No.");

               CASE Type OF
                 Type::Company:
                   BEGIN
                     ContBusRel.SETRANGE("Contact No.","No.");
                     ContBusRel.DELETEALL;
                     ContIndustGrp.SETRANGE("Contact No.","No.");
                     ContIndustGrp.DELETEALL;
                     ContactWebSource.SETRANGE("Contact No.","No.");
                     ContactWebSource.DELETEALL;
                     DuplMgt.RemoveContIndex(Rec,FALSE);
                     InteractLogEntry.SETCURRENTKEY("Contact Company No.");
                     InteractLogEntry.SETRANGE("Contact Company No.","No.");
                     IF InteractLogEntry.FIND('-') THEN
                       REPEAT
                         CampaignTargetGrMgt.DeleteContfromTargetGr(InteractLogEntry);
                         CLEAR(InteractLogEntry."Contact Company No.");
                         CLEAR(InteractLogEntry."Contact No.");
                         InteractLogEntry.MODIFY;
                       UNTIL InteractLogEntry.NEXT = 0;

                     Cont.RESET;
                     Cont.SETCURRENTKEY("Company No.");
                     Cont.SETRANGE("Company No.","No.");
                     Cont.SETRANGE(Type,Type::Person);
                     IF Cont.FIND('-') THEN
                       REPEAT
                         Cont.DELETE(TRUE);
                       UNTIL Cont.NEXT = 0;

                     Opp.RESET;
                     Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
                     Opp.SETRANGE("Contact Company No.","Company No.");
                     Opp.SETRANGE("Contact No.","No.");
                     IF Opp.FIND('-') THEN
                       REPEAT
                         CLEAR(Opp."Contact No.");
                         CLEAR(Opp."Contact Company No.");
                         Opp.MODIFY;
                       UNTIL Opp.NEXT = 0;

                     Todo.RESET;
                     Todo.SETCURRENTKEY("Contact Company No.");
                     Todo.SETRANGE("Contact Company No.","Company No.");
                     IF Todo.FIND('-') THEN
                       REPEAT
                         CLEAR(Todo."Contact No.");
                         CLEAR(Todo."Contact Company No.");
                         Todo.MODIFY;
                       UNTIL Todo.NEXT = 0;
                   END;
                 Type::Person:
                   BEGIN
                     ContJobResp.SETRANGE("Contact No.","No.");
                     ContJobResp.DELETEALL;

                     InteractLogEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
                     InteractLogEntry.SETRANGE("Contact Company No.","Company No.");
                     InteractLogEntry.SETRANGE("Contact No.","No.");
                     InteractLogEntry.MODIFYALL("Contact No.","Company No.");

                     Opp.RESET;
                     Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
                     Opp.SETRANGE("Contact Company No.","Company No.");
                     Opp.SETRANGE("Contact No.","No.");
                     Opp.MODIFYALL("Contact No.","Company No.");

                     Todo.RESET;
                     Todo.SETCURRENTKEY("Contact Company No.","Contact No.");
                     Todo.SETRANGE("Contact Company No.","Company No.");
                     Todo.SETRANGE("Contact No.","No.");
                     Todo.MODIFYALL("Contact No.","Company No.");
                   END;
               END;

               ContMailingGrp.SETRANGE("Contact No.","No.");
               ContMailingGrp.DELETEALL;

               ContProfileAnswer.SETRANGE("Contact No.","No.");
               ContProfileAnswer.DELETEALL;

               RMCommentLine.SETRANGE("Table Name",RMCommentLine."Table Name"::Contact);
               RMCommentLine.SETRANGE("No.","No.");
               RMCommentLine.SETRANGE("Sub No.",0);
               RMCommentLine.DELETEALL;

               ContAltAddr.SETRANGE("Contact No.","No.");
               ContAltAddr.DELETEALL;

               ContAltAddrDateRange.SETRANGE("Contact No.","No.");
               ContAltAddrDateRange.DELETEALL;
             END;

    OnRename=BEGIN
               VALIDATE("Lookup Contact No.");
             END;

    CaptionML=ENU=Contact;
    LookupPageID=Page5052;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;AltSearchField=Search Name;
                                                   OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  RMSetup.GET;
                                                                  NoSeriesMgt.TestManual(RMSetup."Contact Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Name                ;Text50        ;OnValidate=BEGIN
                                                                NameBreakdown;
                                                                ProcessNameChange;
                                                              END;

                                                   CaptionML=ENU=Name }
    { 3   ;   ;Search Name         ;Code50        ;CaptionML=ENU=Search Name }
    { 4   ;   ;Name 2              ;Text50        ;CaptionML=ENU=Name 2 }
    { 5   ;   ;Address             ;Text50        ;CaptionML=ENU=Address }
    { 6   ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2 }
    { 7   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=City }
    { 9   ;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. }
    { 10  ;   ;Telex No.           ;Text20        ;CaptionML=ENU=Telex No. }
    { 15  ;   ;Territory Code      ;Code10        ;TableRelation=Territory;
                                                   CaptionML=ENU=Territory Code }
    { 22  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code }
    { 24  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=ENU=Language Code }
    { 29  ;   ;Salesperson Code    ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=ENU=Salesperson Code }
    { 35  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                IF ("Country/Region Code" <> xRec."Country/Region Code") AND (xRec."Country/Region Code" <> '') THEN
                                                                  PostCode.ClearFields(City,"Post Code",County);
                                                              END;

                                                   CaptionML=ENU=Country/Region Code }
    { 38  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Rlshp. Mgt. Comment Line" WHERE (Table Name=CONST(Contact),
                                                                                                       No.=FIELD(No.),
                                                                                                       Sub No.=CONST(0)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=No }
    { 54  ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=No }
    { 84  ;   ;Fax No.             ;Text30        ;CaptionML=ENU=Fax No. }
    { 85  ;   ;Telex Answer Back   ;Text20        ;CaptionML=ENU=Telex Answer Back }
    { 86  ;   ;VAT Registration No.;Text20        ;OnValidate=VAR
                                                                VATRegNoFormat@1000 : Record 381;
                                                              BEGIN
                                                                VATRegNoFormat.Test("VAT Registration No.","Country/Region Code","No.",DATABASE::Contact);
                                                              END;

                                                   CaptionML=ENU=VAT Registration No. }
    { 89  ;   ;Picture             ;BLOB          ;CaptionML=ENU=Picture;
                                                   SubType=Bitmap }
    { 91  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Post Code }
    { 92  ;   ;County              ;Text30        ;CaptionML=ENU=County }
    { 102 ;   ;E-Mail              ;Text80        ;OnValidate=BEGIN
                                                                IF ("Search E-Mail" = UPPERCASE(xRec."E-Mail")) OR ("Search E-Mail" = '') THEN
                                                                  "Search E-Mail" := "E-Mail";
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=E-Mail }
    { 103 ;   ;Home Page           ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=ENU=Home Page }
    { 107 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series }
    { 200 ;   ;SipAddress          ;Text250        }
    { 5050;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN BEGIN
                                                                  TypeChange;
                                                                  MODIFY;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Company,Person;
                                                   OptionString=Company,Person }
    { 5051;   ;Company No.         ;Code20        ;TableRelation=Contact WHERE (Type=CONST(Company));
                                                   OnValidate=VAR
                                                                Opp@1000 : Record 5092;
                                                                OppEntry@1001 : Record 5093;
                                                                Todo@1002 : Record 5080;
                                                                InteractLogEntry@1003 : Record 5065;
                                                                SegLine@1005 : Record 5077;
                                                                SalesHeader@1004 : Record 36;
                                                              BEGIN
                                                                IF "Company No." = xRec."Company No." THEN
                                                                  EXIT;

                                                                TESTFIELD(Type,Type::Person);

                                                                SegLine.SETCURRENTKEY("Contact No.");
                                                                SegLine.SETRANGE("Contact No.","No.");
                                                                IF SegLine.FINDFIRST THEN
                                                                  ERROR(Text012,FIELDCAPTION("Company No."));

                                                                IF Cont.GET("Company No.") THEN
                                                                  InheritCompanyToPersonData(Cont,xRec."Company No." = '')
                                                                ELSE
                                                                  CLEAR("Company Name");

                                                                IF Cont.GET("No.") THEN BEGIN
                                                                  IF xRec."Company No." <> '' THEN BEGIN
                                                                    Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    Opp.SETRANGE("Contact Company No.",xRec."Company No.");
                                                                    Opp.SETRANGE("Contact No.","No.");
                                                                    Opp.MODIFYALL("Contact No.",xRec."Company No.");
                                                                    OppEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    OppEntry.SETRANGE("Contact Company No.",xRec."Company No.");
                                                                    OppEntry.SETRANGE("Contact No.","No.");
                                                                    OppEntry.MODIFYALL("Contact No.",xRec."Company No.");
                                                                    Todo.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    Todo.SETRANGE("Contact Company No.",xRec."Company No.");
                                                                    Todo.SETRANGE("Contact No.","No.");
                                                                    Todo.MODIFYALL("Contact No.",xRec."Company No.");
                                                                    InteractLogEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    InteractLogEntry.SETRANGE("Contact Company No.",xRec."Company No.");
                                                                    InteractLogEntry.SETRANGE("Contact No.","No.");
                                                                    InteractLogEntry.MODIFYALL("Contact No.",xRec."Company No.");
                                                                    ContBusRel.RESET;
                                                                    ContBusRel.SETCURRENTKEY("Link to Table","No.");
                                                                    ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
                                                                    ContBusRel.SETRANGE("Contact No.",xRec."Company No.");
                                                                    SalesHeader.SETCURRENTKEY("Sell-to Customer No.","External Document No.");
                                                                    SalesHeader.SETRANGE("Sell-to Contact No.","No.");
                                                                    IF ContBusRel.FINDFIRST THEN
                                                                      SalesHeader.SETRANGE("Sell-to Customer No.",ContBusRel."No.")
                                                                    ELSE
                                                                      SalesHeader.SETRANGE("Sell-to Customer No.",'');
                                                                    IF SalesHeader.FIND('-') THEN
                                                                      REPEAT
                                                                        SalesHeader."Sell-to Contact No." := xRec."Company No.";
                                                                        IF SalesHeader."Sell-to Contact No." = SalesHeader."Bill-to Contact No." THEN
                                                                          SalesHeader."Bill-to Contact No." := xRec."Company No.";
                                                                        SalesHeader.MODIFY;
                                                                      UNTIL SalesHeader.NEXT = 0;
                                                                    SalesHeader.RESET;
                                                                    SalesHeader.SETCURRENTKEY("Bill-to Contact No.");
                                                                    SalesHeader.SETRANGE("Bill-to Contact No.","No.");
                                                                    SalesHeader.MODIFYALL("Bill-to Contact No.",xRec."Company No.");
                                                                  END ELSE BEGIN
                                                                    Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    Opp.SETRANGE("Contact Company No.",'');
                                                                    Opp.SETRANGE("Contact No.","No.");
                                                                    Opp.MODIFYALL("Contact Company No.","Company No.");
                                                                    OppEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    OppEntry.SETRANGE("Contact Company No.",'');
                                                                    OppEntry.SETRANGE("Contact No.","No.");
                                                                    OppEntry.MODIFYALL("Contact Company No.","Company No.");
                                                                    Todo.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    Todo.SETRANGE("Contact Company No.",'');
                                                                    Todo.SETRANGE("Contact No.","No.");
                                                                    Todo.MODIFYALL("Contact Company No.","Company No.");
                                                                    InteractLogEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    InteractLogEntry.SETRANGE("Contact Company No.",'');
                                                                    InteractLogEntry.SETRANGE("Contact No.","No.");
                                                                    InteractLogEntry.MODIFYALL("Contact Company No.","Company No.");
                                                                  END;
                                                                  IF CurrFieldNo <> 0 THEN
                                                                    MODIFY;
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Company No. }
    { 5052;   ;Company Name        ;Text50        ;CaptionML=ENU=Company Name;
                                                   Editable=No }
    { 5053;   ;Lookup Contact No.  ;Code20        ;TableRelation=Contact;
                                                   OnValidate=BEGIN
                                                                IF Type = Type::Company THEN
                                                                  "Lookup Contact No." := ''
                                                                ELSE
                                                                  "Lookup Contact No." := "No.";
                                                              END;

                                                   CaptionML=ENU=Lookup Contact No.;
                                                   Editable=No }
    { 5054;   ;First Name          ;Text30        ;OnValidate=BEGIN
                                                                Name := CalculatedName;
                                                                ProcessNameChange;
                                                              END;

                                                   CaptionML=ENU=First Name }
    { 5055;   ;Middle Name         ;Text30        ;OnValidate=BEGIN
                                                                Name := CalculatedName;
                                                                ProcessNameChange;
                                                              END;

                                                   CaptionML=ENU=Middle Name }
    { 5056;   ;Surname             ;Text30        ;OnValidate=BEGIN
                                                                Name := CalculatedName;
                                                                ProcessNameChange;
                                                              END;

                                                   CaptionML=ENU=Surname }
    { 5058;   ;Job Title           ;Text30        ;CaptionML=ENU=Job Title }
    { 5059;   ;Initials            ;Text30        ;CaptionML=ENU=Initials }
    { 5060;   ;Extension No.       ;Text30        ;CaptionML=ENU=Extension No. }
    { 5061;   ;Mobile Phone No.    ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Mobile Phone No. }
    { 5062;   ;Pager               ;Text30        ;CaptionML=ENU=Pager }
    { 5063;   ;Organizational Level Code;Code10   ;TableRelation="Organizational Level";
                                                   CaptionML=ENU=Organizational Level Code }
    { 5064;   ;Exclude from Segment;Boolean       ;CaptionML=ENU=Exclude from Segment }
    { 5065;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 5066;   ;Next To-do Date     ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Min(To-do.Date WHERE (Contact Company No.=FIELD(FILTER(Company No.)),
                                                                                     Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                     Closed=CONST(No),
                                                                                     System To-do Type=CONST(Contact Attendee)));
                                                   CaptionML=ENU=Next To-do Date;
                                                   Editable=No }
    { 5067;   ;Last Date Attempted ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Max("Interaction Log Entry".Date WHERE (Contact Company No.=FIELD(Company No.),
                                                                                                       Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                       Initiated By=CONST(Us),
                                                                                                       Postponed=CONST(No)));
                                                   CaptionML=ENU=Last Date Attempted;
                                                   Editable=No }
    { 5068;   ;Date of Last Interaction;Date      ;FieldClass=FlowField;
                                                   CalcFormula=Max("Interaction Log Entry".Date WHERE (Contact Company No.=FIELD(Company No.),
                                                                                                       Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                       Attempt Failed=CONST(No),
                                                                                                       Postponed=CONST(No)));
                                                   CaptionML=ENU=Date of Last Interaction;
                                                   Editable=No }
    { 5069;   ;No. of Job Responsibilities;Integer;FieldClass=FlowField;
                                                   CalcFormula=Count("Contact Job Responsibility" WHERE (Contact No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Job Responsibilities;
                                                   Editable=No }
    { 5070;   ;No. of Industry Groups;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Count("Contact Industry Group" WHERE (Contact No.=FIELD(Company No.)));
                                                   CaptionML=ENU=No. of Industry Groups;
                                                   Editable=No }
    { 5071;   ;No. of Business Relations;Integer  ;FieldClass=FlowField;
                                                   CalcFormula=Count("Contact Business Relation" WHERE (Contact No.=FIELD(Company No.)));
                                                   CaptionML=ENU=No. of Business Relations;
                                                   Editable=No }
    { 5072;   ;No. of Mailing Groups;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Contact Mailing Group" WHERE (Contact No.=FIELD(No.)));
                                                   CaptionML=ENU=No. of Mailing Groups;
                                                   Editable=No }
    { 5073;   ;External ID         ;Code20        ;CaptionML=ENU=External ID }
    { 5074;   ;No. of Interactions ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Interaction Log Entry" WHERE (Contact Company No.=FIELD(FILTER(Company No.)),
                                                                                                    Canceled=CONST(No),
                                                                                                    Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                    Date=FIELD(Date Filter),
                                                                                                    Postponed=CONST(No)));
                                                   CaptionML=ENU=No. of Interactions;
                                                   Editable=No }
    { 5076;   ;Cost (LCY)          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Interaction Log Entry"."Cost (LCY)" WHERE (Contact Company No.=FIELD(Company No.),
                                                                                                               Canceled=CONST(No),
                                                                                                               Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                               Date=FIELD(Date Filter),
                                                                                                               Postponed=CONST(No)));
                                                   CaptionML=ENU=Cost (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5077;   ;Duration (Min.)     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Interaction Log Entry"."Duration (Min.)" WHERE (Contact Company No.=FIELD(Company No.),
                                                                                                                    Canceled=CONST(No),
                                                                                                                    Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                                    Date=FIELD(Date Filter),
                                                                                                                    Postponed=CONST(No)));
                                                   CaptionML=ENU=Duration (Min.);
                                                   DecimalPlaces=0:0;
                                                   Editable=No }
    { 5078;   ;No. of Opportunities;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Opportunity Entry" WHERE (Active=CONST(Yes),
                                                                                                Contact Company No.=FIELD(Company No.),
                                                                                                Estimated Close Date=FIELD(Date Filter),
                                                                                                Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                Action Taken=FIELD(Action Taken Filter)));
                                                   CaptionML=ENU=No. of Opportunities;
                                                   Editable=No }
    { 5079;   ;Estimated Value (LCY);Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Opportunity Entry"."Estimated Value (LCY)" WHERE (Active=CONST(Yes),
                                                                                                                      Contact Company No.=FIELD(Company No.),
                                                                                                                      Estimated Close Date=FIELD(Date Filter),
                                                                                                                      Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                                      Action Taken=FIELD(Action Taken Filter)));
                                                   CaptionML=ENU=Estimated Value (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5080;   ;Calcd. Current Value (LCY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Opportunity Entry"."Calcd. Current Value (LCY)" WHERE (Active=CONST(Yes),
                                                                                                                           Contact Company No.=FIELD(Company No.),
                                                                                                                           Estimated Close Date=FIELD(Date Filter),
                                                                                                                           Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                                           Action Taken=FIELD(Action Taken Filter)));
                                                   CaptionML=ENU=Calcd. Current Value (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5082;   ;Opportunity Entry Exists;Boolean   ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Opportunity Entry" WHERE (Active=CONST(Yes),
                                                                                                Contact Company No.=FIELD(Company No.),
                                                                                                Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                Sales Cycle Code=FIELD(Sales Cycle Filter),
                                                                                                Sales Cycle Stage=FIELD(Sales Cycle Stage Filter),
                                                                                                Salesperson Code=FIELD(Salesperson Filter),
                                                                                                Campaign No.=FIELD(Campaign Filter),
                                                                                                Action Taken=FIELD(Action Taken Filter),
                                                                                                Estimated Value (LCY)=FIELD(Estimated Value Filter),
                                                                                                Calcd. Current Value (LCY)=FIELD(Calcd. Current Value Filter),
                                                                                                Completed %=FIELD(Completed % Filter),
                                                                                                Chances of Success %=FIELD(Chances of Success % Filter),
                                                                                                Probability %=FIELD(Probability % Filter),
                                                                                                Estimated Close Date=FIELD(Date Filter),
                                                                                                Close Opportunity Code=FIELD(Close Opportunity Filter)));
                                                   CaptionML=ENU=Opportunity Entry Exists;
                                                   Editable=No }
    { 5083;   ;To-do Entry Exists  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist(To-do WHERE (Contact Company No.=FIELD(Company No.),
                                                                                  Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                  Team Code=FIELD(Team Filter),
                                                                                  Salesperson Code=FIELD(Salesperson Filter),
                                                                                  Campaign No.=FIELD(Campaign Filter),
                                                                                  Date=FIELD(Date Filter),
                                                                                  Status=FIELD(To-do Status Filter),
                                                                                  Priority=FIELD(Priority Filter),
                                                                                  Closed=FIELD(To-do Closed Filter)));
                                                   CaptionML=ENU=To-do Entry Exists;
                                                   Editable=No }
    { 5084;   ;Salesperson Filter  ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Salesperson/Purchaser;
                                                   CaptionML=ENU=Salesperson Filter }
    { 5085;   ;Campaign Filter     ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=Campaign;
                                                   CaptionML=ENU=Campaign Filter }
    { 5087;   ;Action Taken Filter ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Action Taken Filter;
                                                   OptionCaptionML=ENU=" ,Next,Previous,Updated,Jumped,Won,Lost";
                                                   OptionString=[ ,Next,Previous,Updated,Jumped,Won,Lost] }
    { 5088;   ;Sales Cycle Filter  ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Sales Cycle";
                                                   CaptionML=ENU=Sales Cycle Filter }
    { 5089;   ;Sales Cycle Stage Filter;Integer   ;FieldClass=FlowFilter;
                                                   TableRelation="Sales Cycle Stage".Stage WHERE (Sales Cycle Code=FIELD(Sales Cycle Filter));
                                                   CaptionML=ENU=Sales Cycle Stage Filter }
    { 5090;   ;Probability % Filter;Decimal       ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Probability % Filter;
                                                   DecimalPlaces=1:1;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 5091;   ;Completed % Filter  ;Decimal       ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Completed % Filter;
                                                   DecimalPlaces=1:1;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 5092;   ;Estimated Value Filter;Decimal     ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Estimated Value Filter;
                                                   AutoFormatType=1 }
    { 5093;   ;Calcd. Current Value Filter;Decimal;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Calcd. Current Value Filter;
                                                   AutoFormatType=1 }
    { 5094;   ;Chances of Success % Filter;Decimal;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Chances of Success % Filter;
                                                   DecimalPlaces=0:0;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 5095;   ;To-do Status Filter ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=To-do Status Filter;
                                                   OptionCaptionML=ENU=Not Started,In Progress,Completed,Waiting,Postponed;
                                                   OptionString=Not Started,In Progress,Completed,Waiting,Postponed }
    { 5096;   ;To-do Closed Filter ;Boolean       ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=To-do Closed Filter }
    { 5097;   ;Priority Filter     ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Priority Filter;
                                                   OptionCaptionML=ENU=Low,Normal,High;
                                                   OptionString=Low,Normal,High }
    { 5098;   ;Team Filter         ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Team;
                                                   CaptionML=ENU=Team Filter }
    { 5099;   ;Close Opportunity Filter;Code10    ;FieldClass=FlowFilter;
                                                   TableRelation="Close Opportunity Code";
                                                   CaptionML=ENU=Close Opportunity Filter }
    { 5100;   ;Correspondence Type ;Option        ;CaptionML=ENU=Correspondence Type;
                                                   OptionCaptionML=ENU=" ,Hard Copy,E-Mail,Fax";
                                                   OptionString=[ ,Hard Copy,E-Mail,Fax] }
    { 5101;   ;Salutation Code     ;Code10        ;TableRelation=Salutation;
                                                   CaptionML=ENU=Salutation Code }
    { 5102;   ;Search E-Mail       ;Code80        ;CaptionML=ENU=Search E-Mail }
    { 5104;   ;Last Time Modified  ;Time          ;CaptionML=ENU=Last Time Modified }
    { 5105;   ;E-Mail 2            ;Text80        ;ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=E-Mail 2 }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Search Name                              }
    {    ;Company Name,Company No.,Type,Name       }
    {    ;Company No.                              }
    {    ;Territory Code                           }
    {    ;Salesperson Code                         }
    {    ;VAT Registration No.                     }
    {    ;Search E-Mail                            }
    {    ;Name                                    ;KeyGroups=SearchCol }
    {    ;City                                    ;KeyGroups=SearchCol }
    {    ;Post Code                               ;KeyGroups=SearchCol }
    {    ;Phone No.                               ;KeyGroups=SearchCol }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Name,Type,City,Post Code,Phone No.   }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot delete the %2 record of the %1 because there are one or more to-dos open.';
      Text001@1001 : TextConst 'ENU=You cannot delete the %2 record of the %1 because the contact is assigned one or more unlogged segments.';
      Text002@1002 : TextConst 'ENU=You cannot delete the %2 record of the %1 because one or more opportunities are in not started or progress.';
      Text003@1003 : TextConst 'ENU=%1 cannot be changed because one or more interaction log entries are linked to the contact.';
      Text005@1005 : TextConst 'ENU=%1 cannot be changed because one or more to-dos are linked to the contact.';
      Text006@1006 : TextConst 'ENU=%1 cannot be changed because one or more opportunities are linked to the contact.';
      Text007@1007 : TextConst 'ENU=%1 cannot be changed because there are one or more related people linked to the contact.';
      Text009@1009 : TextConst 'ENU=The %2 record of the %1 has been created.';
      Text010@1010 : TextConst 'ENU=The %2 record of the %1 is not linked with any other table.';
      RMSetup@1012 : Record 5079;
      Cont@1013 : Record 5050;
      ContBusRel@1014 : Record 5054;
      PostCode@1011 : Record 225;
      DuplMgt@1015 : Codeunit 5060;
      NoSeriesMgt@1016 : Codeunit 396;
      UpdateCustVendBank@1017 : Codeunit 5055;
      CampaignMgt@1050 : Codeunit 7030;
      ContChanged@1018 : Boolean;
      SkipDefaults@1019 : Boolean;
      Text012@1020 : TextConst 'ENU=You cannot change %1 because one or more unlogged segments are assigned to the contact.';
      Text019@1022 : TextConst 'ENU=The %2 record of the %1 already has the %3 with %4 %5.';
      Text020@1021 : TextConst 'ENU=Do you want to create a contact %1 %2 as a customer using a customer template?';
      Text021@1023 : TextConst 'ENU=You have to set up formal and informal salutation formulas in %1  language for the %2 contact.';
      HideValidationDialog@1032 : Boolean;
      Text022@1034 : TextConst 'ENU=The creation of the customer has been aborted.';
      Text029@1045 : TextConst 'ENU=The total length of first name, middle name and surname is %1 character(s)longer than the maximum length allowed for the Name field.';
      Text032@1048 : TextConst 'ENU=The length of %1 is %2 character(s)longer than the maximum length allowed for the %1 field.';
      Text033@1008 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';

    PROCEDURE OnModify@4(xRec@1005 : Record 5050);
    VAR
      OldCont@1001 : Record 5050;
    BEGIN
      "Last Date Modified" := TODAY;
      "Last Time Modified" := TIME;

      IF Type = Type::Company THEN BEGIN
        IF (Name <> xRec.Name) OR
           ("Search Name" <> xRec."Search Name") OR
           ("Name 2" <> xRec."Name 2") OR
           (Address <> xRec.Address) OR
           ("Address 2" <> xRec."Address 2") OR
           (City <> xRec.City) OR
           ("Phone No." <> xRec."Phone No.") OR
           ("Telex No." <> xRec."Telex No.") OR
           ("Territory Code" <> xRec."Territory Code") OR
           ("Currency Code" <> xRec."Currency Code") OR
           ("Language Code" <> xRec."Language Code") OR
           ("Salesperson Code" <> xRec."Salesperson Code") OR
           ("Country/Region Code" <> xRec."Country/Region Code") OR
           ("Fax No." <> xRec."Fax No.") OR
           ("Telex Answer Back" <> xRec."Telex Answer Back") OR
           ("VAT Registration No." <> xRec."VAT Registration No.") OR
           ("Post Code" <> xRec."Post Code") OR
           (County <> xRec.County) OR
           ("E-Mail" <> xRec."E-Mail") OR
           ("Home Page" <> xRec."Home Page")
        THEN
          UpdateCustVendBank.RUN(Rec);

        RMSetup.GET;
        Cont.RESET;
        Cont.SETCURRENTKEY("Company No.");
        Cont.SETRANGE("Company No.","No.");
        Cont.SETRANGE(Type,Type::Person);
        IF Cont.FIND('-') THEN
          REPEAT
            ContChanged := FALSE;
            OldCont := Cont;
            IF Name <> xRec.Name THEN BEGIN
              Cont."Company Name" := Name;
              ContChanged := TRUE;
            END;
            IF RMSetup."Inherit Salesperson Code" AND
               (xRec."Salesperson Code" <> "Salesperson Code") AND
               (xRec."Salesperson Code" = Cont."Salesperson Code")
            THEN BEGIN
              Cont."Salesperson Code" := "Salesperson Code";
              ContChanged := TRUE;
            END;
            IF RMSetup."Inherit Territory Code" AND
               (xRec."Territory Code" <> "Territory Code") AND
               (xRec."Territory Code" = Cont."Territory Code")
            THEN BEGIN
              Cont."Territory Code" := "Territory Code";
              ContChanged := TRUE;
            END;
            IF RMSetup."Inherit Country/Region Code" AND
               (xRec."Country/Region Code" <> "Country/Region Code") AND
               (xRec."Country/Region Code" = Cont."Country/Region Code")
            THEN BEGIN
              Cont."Country/Region Code" := "Country/Region Code";
              ContChanged := TRUE;
            END;
            IF RMSetup."Inherit Language Code" AND
               (xRec."Language Code" <> "Language Code") AND
               (xRec."Language Code" = Cont."Language Code")
            THEN BEGIN
              Cont."Language Code" := "Language Code";
              ContChanged := TRUE;
            END;
            IF RMSetup."Inherit Address Details" THEN BEGIN
              IF xRec.IdenticalAddress(Cont) THEN BEGIN
                IF xRec.Address <> Address THEN BEGIN
                  Cont.Address := Address;
                  ContChanged := TRUE;
                END;
                IF xRec."Address 2" <> "Address 2" THEN BEGIN
                  Cont."Address 2" := "Address 2";
                  ContChanged := TRUE;
                END;
                IF xRec."Post Code" <> "Post Code" THEN BEGIN
                  Cont."Post Code" := "Post Code";
                  ContChanged := TRUE;
                END;
                IF xRec.City <> City THEN BEGIN
                  Cont.City := City;
                  ContChanged := TRUE;
                END;
                IF xRec.County <> County THEN BEGIN
                  Cont.County := County;
                  ContChanged := TRUE;
                END;
              END;
            END;
            IF RMSetup."Inherit Communication Details" THEN BEGIN
              IF (xRec."Phone No." <> "Phone No.") AND (xRec."Phone No." = Cont."Phone No.") THEN BEGIN
                Cont."Phone No." := "Phone No.";
                ContChanged := TRUE;
              END;
              IF (xRec."Telex No." <> "Telex No.") AND (xRec."Telex No." = Cont."Telex No.") THEN BEGIN
                Cont."Telex No." := "Telex No.";
                ContChanged := TRUE;
              END;
              IF (xRec."Fax No." <> "Fax No.") AND (xRec."Fax No." = Cont."Fax No.") THEN BEGIN
                Cont."Fax No." := "Fax No.";
                ContChanged := TRUE;
              END;
              IF (xRec."Telex Answer Back" <> "Telex Answer Back") AND (xRec."Telex Answer Back" = Cont."Telex Answer Back") THEN BEGIN
                Cont."Telex Answer Back" := "Telex Answer Back";
                ContChanged := TRUE;
              END;
              IF (xRec."E-Mail" <> "E-Mail") AND (xRec."E-Mail" = Cont."E-Mail") THEN BEGIN
                Cont.VALIDATE("E-Mail","E-Mail");
                ContChanged := TRUE;
              END;
              IF (xRec."Home Page" <> "Home Page") AND (xRec."Home Page" = Cont."Home Page") THEN BEGIN
                Cont."Home Page" := "Home Page";
                ContChanged := TRUE;
              END;
              IF (xRec."Extension No." <> "Extension No.") AND (xRec."Extension No." = Cont."Extension No.") THEN BEGIN
                Cont."Extension No." := "Extension No.";
                ContChanged := TRUE;
              END;
              IF (xRec."Mobile Phone No." <> "Mobile Phone No.") AND (xRec."Mobile Phone No." = Cont."Mobile Phone No.") THEN BEGIN
                Cont."Mobile Phone No." := "Mobile Phone No.";
                ContChanged := TRUE;
              END;
              IF (xRec.Pager <> Pager) AND (xRec.Pager = Cont.Pager) THEN BEGIN
                Cont.Pager := Pager;
                ContChanged := TRUE;
              END;
            END;
            IF ContChanged THEN BEGIN
              Cont.OnModify(OldCont);
              Cont.MODIFY;
            END;
          UNTIL Cont.NEXT = 0;

        IF (Name <> xRec.Name) OR
           ("Name 2" <> xRec."Name 2") OR
           (Address <> xRec.Address) OR
           ("Address 2" <> xRec."Address 2") OR
           (City <> xRec.City) OR
           ("Post Code" <> xRec."Post Code") OR
           ("VAT Registration No." <> xRec."VAT Registration No.") OR
           ("Phone No." <> xRec."Phone No.")
        THEN
          CheckDupl;
      END;
    END;

    PROCEDURE TypeChange@1();
    VAR
      InteractLogEntry@1000 : Record 5065;
      Opp@1001 : Record 5092;
      Todo@1002 : Record 5080;
      CampaignTargetGrMgt@1003 : Codeunit 7030;
    BEGIN
      RMSetup.GET;

      InteractLogEntry.LOCKTABLE;
      Todo.LOCKTABLE;
      Opp.LOCKTABLE;
      Cont.LOCKTABLE;
      InteractLogEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
      InteractLogEntry.SETRANGE("Contact Company No.","Company No.");
      InteractLogEntry.SETRANGE("Contact No.","No.");
      IF InteractLogEntry.FINDFIRST THEN
        ERROR(Text003,FIELDCAPTION(Type));
      Todo.SETCURRENTKEY("Contact Company No.","Contact No.");
      Todo.SETRANGE("Contact Company No.","Company No.");
      Todo.SETRANGE("Contact No.","No.");
      IF Todo.FINDFIRST THEN
        ERROR(Text005,FIELDCAPTION(Type));
      Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
      Opp.SETRANGE("Contact Company No.","Company No.");
      Opp.SETRANGE("Contact No.","No.");
      IF Opp.FINDFIRST THEN
        ERROR(Text006,FIELDCAPTION(Type));

      CASE Type OF
        Type::Company:
          BEGIN
            IF Type <> xRec.Type THEN BEGIN
              TESTFIELD("Organizational Level Code",'');
              TESTFIELD("No. of Job Responsibilities",0);
            END;
            "First Name" := '';
            "Middle Name" := '';
            Surname := '';
            "Job Title" := '';
            "Company No." := "No.";
            "Company Name" := Name;
            "Salutation Code" := RMSetup."Def. Company Salutation Code";
          END;
        Type::Person:
          BEGIN
            CampaignTargetGrMgt.DeleteContfromTargetGr(InteractLogEntry);
            Cont.RESET;
            Cont.SETCURRENTKEY("Company No.");
            Cont.SETRANGE("Company No.","No.");
            Cont.SETRANGE(Type,Type::Person);
            IF Cont.FIND('-') THEN
              ERROR(Text007,FIELDCAPTION(Type));
            IF Type <> xRec.Type THEN BEGIN
              TESTFIELD("No. of Business Relations",0);
              TESTFIELD("No. of Industry Groups",0);
              TESTFIELD("Currency Code",'');
              TESTFIELD("VAT Registration No.",'');
            END;
            IF "Company No." = "No." THEN BEGIN
              "Company No." := '';
              "Company Name" := '';
              "Salutation Code" := RMSetup."Default Person Salutation Code";
              NameBreakdown;
            END;
          END;
      END;
      VALIDATE("Lookup Contact No.");

      IF Cont.GET("No.") THEN BEGIN
        IF Type = Type::Company THEN
          CheckDupl
        ELSE
          DuplMgt.RemoveContIndex(Rec,FALSE);
      END;
    END;

    PROCEDURE AssistEdit@2(OldCont@1000 : Record 5050) : Boolean;
    BEGIN
      WITH Cont DO BEGIN
        Cont := Rec;
        RMSetup.GET;
        RMSetup.TESTFIELD("Contact Nos.");
        IF NoSeriesMgt.SelectSeries(RMSetup."Contact Nos.",OldCont."No. Series","No. Series") THEN BEGIN
          RMSetup.GET;
          RMSetup.TESTFIELD("Contact Nos.");
          NoSeriesMgt.SetSeries("No.");
          Rec := Cont;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE CreateCustomer@3(CustomerTemplate@1006 : Code[10]);
    VAR
      Cust@1000 : Record 18;
      ContComp@1001 : Record 5050;
      CustTemplate@1003 : Record 5105;
      DefaultDim@1005 : Record 352;
      DefaultDim2@1004 : Record 352;
    BEGIN
      TESTFIELD("Company No.");
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Customers");

      ContBusRel.RESET;
      ContBusRel.SETRANGE("Contact No.","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
      IF ContBusRel.FINDFIRST THEN
        ERROR(
          Text019,
          TABLECAPTION,"No.",ContBusRel.TABLECAPTION,ContBusRel."Link to Table",ContBusRel."No.");

      IF CustomerTemplate <> '' THEN
        CustTemplate.GET(CustomerTemplate);

      CLEAR(Cust);
      Cust.SetInsertFromContact(TRUE);
      Cust.INSERT(TRUE);
      Cust.SetInsertFromContact(FALSE);

      IF Type = Type::Company THEN
        ContComp := Rec
      ELSE
        ContComp.GET("Company No.");

      ContBusRel."Contact No." := ContComp."No.";
      ContBusRel."Business Relation Code" := RMSetup."Bus. Rel. Code for Customers";
      ContBusRel."Link to Table" := ContBusRel."Link to Table"::Customer;
      ContBusRel."No." := Cust."No.";
      ContBusRel.INSERT(TRUE);

      UpdateCustVendBank.UpdateCustomer(ContComp,ContBusRel);

      Cust.GET(ContBusRel."No.");
      Cust.VALIDATE(Name,"Company Name");
      Cust.MODIFY;

      IF CustTemplate.Code <> '' THEN BEGIN
        Cust."Territory Code" := "Territory Code";
        Cust."Currency Code" := ContComp."Currency Code";
        Cust."Country/Region Code" := "Country/Region Code";
        Cust."Customer Posting Group" := CustTemplate."Customer Posting Group";
        Cust."Customer Price Group" := CustTemplate."Customer Price Group";
        Cust."Invoice Disc. Code" := CustTemplate."Invoice Disc. Code";
        Cust."Customer Disc. Group" := CustTemplate."Customer Disc. Group";
        Cust."Allow Line Disc." := CustTemplate."Allow Line Disc.";
        Cust."Gen. Bus. Posting Group" := CustTemplate."Gen. Bus. Posting Group";
        Cust."VAT Bus. Posting Group" := CustTemplate."VAT Bus. Posting Group";
        Cust."Payment Terms Code" := CustTemplate."Payment Terms Code";
        Cust."Payment Method Code" := CustTemplate."Payment Method Code";
        Cust."Shipment Method Code" := CustTemplate."Shipment Method Code";
        Cust.MODIFY;

        DefaultDim.SETRANGE("Table ID",DATABASE::"Customer Template");
        DefaultDim.SETRANGE("No.",CustTemplate.Code);
        IF DefaultDim.FIND('-') THEN
          REPEAT
            CLEAR(DefaultDim2);
            DefaultDim2.INIT;
            DefaultDim2.VALIDATE("Table ID",DATABASE::Customer);
            DefaultDim2."No." := Cust."No.";
            DefaultDim2.VALIDATE("Dimension Code",DefaultDim."Dimension Code");
            DefaultDim2.VALIDATE("Dimension Value Code",DefaultDim."Dimension Value Code");
            DefaultDim2."Value Posting" := DefaultDim."Value Posting";
            DefaultDim2.INSERT(TRUE);
          UNTIL DefaultDim.NEXT = 0;
      END;

      UpdateQuotes(Cust);
      CampaignMgt.ConverttoCustomer(Rec,Cust);
      MESSAGE(Text009,Cust.TABLECAPTION,Cust."No.");
    END;

    PROCEDURE CreateVendor@7();
    VAR
      Vend@1000 : Record 23;
      ContComp@1001 : Record 5050;
    BEGIN
      TESTFIELD("Company No.");
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Vendors");

      CLEAR(Vend);
      Vend.SetInsertFromContact(TRUE);
      Vend.INSERT(TRUE);
      Vend.SetInsertFromContact(FALSE);

      IF Type = Type::Company THEN
        ContComp := Rec
      ELSE
        ContComp.GET("Company No.");

      ContBusRel."Contact No." := ContComp."No.";
      ContBusRel."Business Relation Code" := RMSetup."Bus. Rel. Code for Vendors";
      ContBusRel."Link to Table" := ContBusRel."Link to Table"::Vendor;
      ContBusRel."No." := Vend."No.";
      ContBusRel.INSERT(TRUE);

      UpdateCustVendBank.UpdateVendor(ContComp,ContBusRel);

      MESSAGE(Text009,Vend.TABLECAPTION,Vend."No.");
    END;

    PROCEDURE CreateBankAccount@8();
    VAR
      BankAcc@1000 : Record 270;
      ContComp@1001 : Record 5050;
    BEGIN
      TESTFIELD("Company No.");
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Bank Accs.");

      CLEAR(BankAcc);
      BankAcc.SetInsertFromContact(TRUE);
      BankAcc.INSERT(TRUE);
      BankAcc.SetInsertFromContact(FALSE);

      IF Type = Type::Company THEN
        ContComp := Rec
      ELSE
        ContComp.GET("Company No.");

      ContBusRel."Contact No." := ContComp."No.";
      ContBusRel."Business Relation Code" := RMSetup."Bus. Rel. Code for Bank Accs.";
      ContBusRel."Link to Table" := ContBusRel."Link to Table"::"Bank Account";
      ContBusRel."No." := BankAcc."No.";
      ContBusRel.INSERT(TRUE);

      UpdateCustVendBank.UpdateBankAccount(ContComp,ContBusRel);

      MESSAGE(Text009,BankAcc.TABLECAPTION,BankAcc."No.");
    END;

    PROCEDURE CreateCustomerLink@5();
    VAR
      Cust@1001 : Record 18;
      ContBusRel@1000 : Record 5054;
    BEGIN
      TESTFIELD("Company No.");
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Customers");
      CreateLink(
        PAGE::"Customer Link",
        RMSetup."Bus. Rel. Code for Customers",
        ContBusRel."Link to Table"::Customer);

      ContBusRel.SETCURRENTKEY("Link to Table","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
      ContBusRel.SETRANGE("Contact No.","Company No.");
      IF ContBusRel.FINDFIRST THEN
        IF Cust.GET(ContBusRel."No.") THEN
          UpdateQuotes(Cust);
    END;

    PROCEDURE CreateVendorLink@6();
    BEGIN
      TESTFIELD("Company No.");
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Vendors");
      CreateLink(
        PAGE::"Vendor Link",
        RMSetup."Bus. Rel. Code for Vendors",
        ContBusRel."Link to Table"::Vendor);
    END;

    PROCEDURE CreateBankAccountLink@9();
    BEGIN
      TESTFIELD("Company No.");
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Bank Accs.");
      CreateLink(
        PAGE::"Bank Account Link",
        RMSetup."Bus. Rel. Code for Bank Accs.",
        ContBusRel."Link to Table"::"Bank Account");
    END;

    PROCEDURE CreateLink@11(CreateForm@1000 : Integer;BusRelCode@1001 : Code[10];Table@1002 : 'Customer,Vendor,Bank Account');
    VAR
      TempContBusRel@1003 : TEMPORARY Record 5054;
    BEGIN
      TempContBusRel."Contact No." := "Company No.";
      TempContBusRel."Business Relation Code" := BusRelCode;
      TempContBusRel."Link to Table" := Table;
      TempContBusRel.INSERT;
      PAGE.RUNMODAL(CreateForm,TempContBusRel);
      TempContBusRel.DELETEALL;
    END;

    PROCEDURE CreateInteraction@10();
    VAR
      SegmentLine@1000 : TEMPORARY Record 5077;
    BEGIN
      SegmentLine.CreateInteractionFromContact(Rec);
    END;

    PROCEDURE ShowCustVendBank@12();
    VAR
      ContBusRel@1000 : Record 5054;
      FormSelected@1001 : Boolean;
      Cust@1002 : Record 18;
      Vend@1003 : Record 23;
      BankAcc@1004 : Record 270;
    BEGIN
      FormSelected := TRUE;

      ContBusRel.RESET;
      ContBusRel.SETRANGE("Contact No.","Company No.");
      ContBusRel.SETFILTER("No.",'<>''''');

      CASE ContBusRel.COUNT OF
        0:
          ERROR(Text010,TABLECAPTION,"No.");
        1:
          ContBusRel.FINDFIRST;
        ELSE
          FormSelected := PAGE.RUNMODAL(PAGE::"Contact Business Relations",ContBusRel) = ACTION::LookupOK;
      END;

      IF FormSelected THEN
        CASE ContBusRel."Link to Table" OF
          ContBusRel."Link to Table"::Customer:
            BEGIN
              Cust.GET(ContBusRel."No.");
              PAGE.RUN(PAGE::"Customer Card",Cust);
            END;
          ContBusRel."Link to Table"::Vendor:
            BEGIN
              Vend.GET(ContBusRel."No.");
              PAGE.RUN(PAGE::"Vendor Card",Vend);
            END;
          ContBusRel."Link to Table"::"Bank Account":
            BEGIN
              BankAcc.GET(ContBusRel."No.");
              PAGE.RUN(PAGE::"Bank Account Card",BankAcc);
            END;
        END;
    END;

    PROCEDURE NameBreakdown@13();
    VAR
      NamePart@1000 : ARRAY [30] OF Text[250];
      TempName@1001 : Text[250];
      FirstName250@1004 : Text[250];
      i@1002 : Integer;
      NoOfParts@1003 : Integer;
    BEGIN
      IF Type = Type::Company THEN
        EXIT;

      TempName := Name;
      WHILE STRPOS(TempName,' ') > 0 DO BEGIN
        IF STRPOS(TempName,' ') > 1 THEN BEGIN
          i := i + 1;
          NamePart[i] := COPYSTR(TempName,1,STRPOS(TempName,' ') - 1);
        END;
        TempName := COPYSTR(TempName,STRPOS(TempName,' ') + 1);
      END;
      i := i + 1;
      NamePart[i] := TempName;
      NoOfParts := i;

      "First Name" := '';
      "Middle Name" := '';
      Surname := '';
      FOR i := 1 TO NoOfParts DO BEGIN
        IF (i = NoOfParts) AND (NoOfParts > 1) THEN BEGIN
          IF STRLEN(NamePart[i]) > MAXSTRLEN(Surname) THEN
            ERROR(Text032,FIELDCAPTION(Surname),STRLEN(NamePart[i]) - MAXSTRLEN(Surname));
          Surname := NamePart[i]
        END ELSE
          IF (i = NoOfParts - 1) AND (NoOfParts > 2) THEN BEGIN
            IF STRLEN(NamePart[i]) > MAXSTRLEN("Middle Name") THEN
              ERROR(Text032,FIELDCAPTION("Middle Name"),STRLEN(NamePart[i]) - MAXSTRLEN("Middle Name"));
            "Middle Name" := NamePart[i]
          END ELSE BEGIN
            FirstName250 := DELCHR("First Name" + ' ' + NamePart[i],'<',' ');
            IF STRLEN(FirstName250) > MAXSTRLEN("First Name") THEN
              ERROR(Text032,FIELDCAPTION("First Name"),STRLEN(FirstName250) - MAXSTRLEN("First Name"));
            "First Name" := FirstName250;
          END;
      END;
    END;

    PROCEDURE SetSkipDefault@15(Defaults@1000 : Boolean);
    BEGIN
      SkipDefaults := NOT Defaults;
    END;

    PROCEDURE IdenticalAddress@16(VAR Cont@1000 : Record 5050) : Boolean;
    BEGIN
      EXIT(
        (Address = Cont.Address) AND
        ("Address 2" = Cont."Address 2") AND
        ("Post Code" = Cont."Post Code") AND
        (City = Cont.City))
    END;

    PROCEDURE ActiveAltAddress@17(ActiveDate@1000 : Date) : Code[10];
    VAR
      ContAltAddrDateRange@1001 : Record 5052;
    BEGIN
      ContAltAddrDateRange.SETCURRENTKEY("Contact No.","Starting Date");
      ContAltAddrDateRange.SETRANGE("Contact No.","No.");
      ContAltAddrDateRange.SETRANGE("Starting Date",0D,ActiveDate);
      ContAltAddrDateRange.SETFILTER("Ending Date",'>=%1|%2',ActiveDate,0D);
      IF ContAltAddrDateRange.FINDLAST THEN
        EXIT(ContAltAddrDateRange."Contact Alt. Address Code");

      EXIT('');
    END;

    PROCEDURE CalculatedName@14() NewName@1000 : Text[50];
    VAR
      NewName92@1001 : Text[92];
    BEGIN
      IF "First Name" <> '' THEN
        NewName92 := "First Name";
      IF "Middle Name" <> '' THEN
        NewName92 := NewName92 + ' ' + "Middle Name";
      IF Surname <> '' THEN
        NewName92 := NewName92 + ' ' + Surname;

      NewName92 := DELCHR(NewName92,'<',' ');

      IF STRLEN(NewName92) > MAXSTRLEN(Name) THEN
        ERROR(Text029,STRLEN(NewName92) - MAXSTRLEN(Name));

      NewName := COPYSTR(NewName92,1,STRLEN(NewName92));
    END;

    PROCEDURE UpdateSearchName@22();
    BEGIN
      IF ("Search Name" = UPPERCASE(xRec.Name)) OR ("Search Name" = '') THEN
        "Search Name" := Name;
    END;

    PROCEDURE AddText@20(Text@1000 : Text[249]) : Text[250];
    BEGIN
      IF Text <> '' THEN
        EXIT(Text + ' ');
    END;

    PROCEDURE CheckDupl@21();
    BEGIN
      IF RMSetup."Maintain Dupl. Search Strings" THEN
        DuplMgt.MakeContIndex(Rec);
      IF GUIALLOWED THEN
        IF DuplMgt.DuplicateExist(Rec) THEN BEGIN
          MODIFY;
          COMMIT;
          DuplMgt.LaunchDuplicateForm(Rec);
        END;
    END;

    PROCEDURE FindCustomerTemplate@23() FindCustTemplate@1001 : Code[10];
    VAR
      CustTemplate@1003 : Record 5105;
      ContCompany@1002 : Record 5050;
    BEGIN
      CustTemplate.RESET;
      CustTemplate.SETRANGE("Territory Code","Territory Code");
      CustTemplate.SETRANGE("Country/Region Code","Country/Region Code");
      IF ContCompany.GET("Company No.") THEN
        CustTemplate.SETRANGE("Currency Code",ContCompany."Currency Code");

      IF CustTemplate.COUNT = 1 THEN BEGIN
        CustTemplate.FINDFIRST;
        EXIT(CustTemplate.Code);
      END;
    END;

    PROCEDURE ChooseCustomerTemplate@27() ChooseCustTemplate@1001 : Code[10];
    VAR
      CustTemplate@1000 : Record 5105;
    BEGIN
      ContBusRel.RESET;
      ContBusRel.SETRANGE("Contact No.","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
      IF ContBusRel.FINDFIRST THEN
        ERROR(
          Text019,
          TABLECAPTION,"No.",ContBusRel.TABLECAPTION,ContBusRel."Link to Table",ContBusRel."No.");

      IF CONFIRM(Text020,TRUE,"No.",Name) THEN BEGIN
        IF PAGE.RUNMODAL(0,CustTemplate) = ACTION::LookupOK THEN
          EXIT(CustTemplate.Code);
      END ELSE
        ERROR(Text022);
    END;

    PROCEDURE UpdateQuotes@29(Customer@1000 : Record 18);
    VAR
      SalesHeader@1003 : Record 36;
      Cont@1004 : Record 5050;
      SalesLine@1001 : Record 37;
    BEGIN
      Cont.SETCURRENTKEY("Company No.");
      Cont.SETRANGE("Company No.","Company No.");

      IF Cont.FIND('-') THEN
        REPEAT
          SalesHeader.RESET;
          SalesHeader.SETCURRENTKEY("Document Type","Sell-to Contact No.");
          SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Quote);
          SalesHeader.SETRANGE("Sell-to Contact No.",Cont."No.");
          IF SalesHeader.FIND('-') THEN
            REPEAT
              SalesHeader."Sell-to Customer No." := Customer."No.";
              SalesHeader."Sell-to Customer Template Code" := '';
              SalesHeader.MODIFY;
              SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
              SalesLine.SETRANGE("Document No.",SalesHeader."No.");
              IF SalesLine.FINDFIRST THEN
                SalesLine.MODIFYALL("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
            UNTIL SalesHeader.NEXT = 0;

          SalesHeader.RESET;
          SalesHeader.SETCURRENTKEY("Bill-to Contact No.");
          SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Quote);
          SalesHeader.SETRANGE("Bill-to Contact No.",Cont."No.");
          IF SalesHeader.FIND('-') THEN
            REPEAT
              SalesHeader."Bill-to Customer No." := Customer."No.";
              SalesHeader."Bill-to Customer Template Code" := '';
              SalesHeader."Salesperson Code" := Customer."Salesperson Code";
              SalesHeader.MODIFY;
              SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
              SalesLine.SETRANGE("Document No.",SalesHeader."No.");
              IF SalesLine.FINDFIRST THEN
                SalesLine.MODIFYALL("Bill-to Customer No.",SalesHeader."Bill-to Customer No.");
            UNTIL SalesHeader.NEXT = 0;
        UNTIL Cont.NEXT = 0;
    END;

    PROCEDURE GetSalutation@18(SalutationType@1001 : 'Formal,Informal';LanguageCode@1000 : Code[10]) : Text[260];
    VAR
      SalutationFormula@1005 : Record 5069;
      NamePart@1004 : ARRAY [5] OF Text[50];
      SubStr@1003 : Text[30];
      i@1002 : Integer;
    BEGIN
      IF NOT SalutationFormula.GET("Salutation Code",LanguageCode,SalutationType) THEN
        ERROR(Text021,LanguageCode,"No.");
      SalutationFormula.TESTFIELD(Salutation);

      CASE SalutationFormula."Name 1" OF
        SalutationFormula."Name 1"::"Job Title":
          NamePart[1] := "Job Title";
        SalutationFormula."Name 1"::"First Name":
          NamePart[1] := "First Name";
        SalutationFormula."Name 1"::"Middle Name":
          NamePart[1] := "Middle Name";
        SalutationFormula."Name 1"::Surname:
          NamePart[1] := Surname;
        SalutationFormula."Name 1"::Initials:
          NamePart[1] := Initials;
        SalutationFormula."Name 1"::"Company Name":
          NamePart[1] := "Company Name";
      END;

      CASE SalutationFormula."Name 2" OF
        SalutationFormula."Name 2"::"Job Title":
          NamePart[2] := "Job Title";
        SalutationFormula."Name 2"::"First Name":
          NamePart[2] := "First Name";
        SalutationFormula."Name 2"::"Middle Name":
          NamePart[2] := "Middle Name";
        SalutationFormula."Name 2"::Surname:
          NamePart[2] := Surname;
        SalutationFormula."Name 2"::Initials:
          NamePart[2] := Initials;
        SalutationFormula."Name 2"::"Company Name":
          NamePart[2] := "Company Name";
      END;

      CASE SalutationFormula."Name 3" OF
        SalutationFormula."Name 3"::"Job Title":
          NamePart[3] := "Job Title";
        SalutationFormula."Name 3"::"First Name":
          NamePart[3] := "First Name";
        SalutationFormula."Name 3"::"Middle Name":
          NamePart[3] := "Middle Name";
        SalutationFormula."Name 3"::Surname:
          NamePart[3] := Surname;
        SalutationFormula."Name 3"::Initials:
          NamePart[3] := Initials;
        SalutationFormula."Name 3"::"Company Name":
          NamePart[3] := "Company Name";
      END;

      CASE SalutationFormula."Name 4" OF
        SalutationFormula."Name 4"::"Job Title":
          NamePart[4] := "Job Title";
        SalutationFormula."Name 4"::"First Name":
          NamePart[4] := "First Name";
        SalutationFormula."Name 4"::"Middle Name":
          NamePart[4] := "Middle Name";
        SalutationFormula."Name 4"::Surname:
          NamePart[4] := Surname;
        SalutationFormula."Name 4"::Initials:
          NamePart[4] := Initials;
        SalutationFormula."Name 4"::"Company Name":
          NamePart[4] := "Company Name";
      END;

      CASE SalutationFormula."Name 5" OF
        SalutationFormula."Name 5"::"Job Title":
          NamePart[5] := "Job Title";
        SalutationFormula."Name 5"::"First Name":
          NamePart[5] := "First Name";
        SalutationFormula."Name 5"::"Middle Name":
          NamePart[5] := "Middle Name";
        SalutationFormula."Name 5"::Surname:
          NamePart[5] := Surname;
        SalutationFormula."Name 5"::Initials:
          NamePart[5] := Initials;
        SalutationFormula."Name 5"::"Company Name":
          NamePart[5] := "Company Name";
      END;

      FOR i := 1 TO 5 DO
        IF NamePart[i] = '' THEN BEGIN
          SubStr := '%' + FORMAT(i) + ' ';
          IF STRPOS(SalutationFormula.Salutation,SubStr) > 0 THEN
            SalutationFormula.Salutation :=
              DELSTR(SalutationFormula.Salutation,STRPOS(SalutationFormula.Salutation,SubStr),3);
        END;

      EXIT(STRSUBSTNO(SalutationFormula.Salutation,NamePart[1],NamePart[2],NamePart[3],NamePart[4],NamePart[5]))
    END;

    PROCEDURE InheritCompanyToPersonData@24(Cont@1000 : Record 5050;KeepPersonalData@1001 : Boolean);
    BEGIN
      "Company Name" := Cont.Name;

      RMSetup.GET;
      IF RMSetup."Inherit Salesperson Code" THEN
        "Salesperson Code" := Cont."Salesperson Code";
      IF RMSetup."Inherit Territory Code" THEN
        "Territory Code" := Cont."Territory Code";
      IF RMSetup."Inherit Country/Region Code" THEN
        "Country/Region Code" := Cont."Country/Region Code";
      IF RMSetup."Inherit Language Code" THEN
        "Language Code" := Cont."Language Code";
      IF RMSetup."Inherit Address Details" AND
         ((NOT KeepPersonalData) OR
          (Cont.Address + Cont."Address 2" + Cont.County + Cont."Post Code" + Cont.City <> ''))
      THEN BEGIN
        Address := Cont.Address;
        "Address 2" := Cont."Address 2";
        "Post Code" := Cont."Post Code";
        City := Cont.City;
        County := Cont.County;
      END;
      IF RMSetup."Inherit Communication Details" THEN BEGIN
        IF (Cont."Phone No." <> '') OR NOT KeepPersonalData THEN
          "Phone No." := Cont."Phone No.";
        IF (Cont."Telex No." <> '') OR NOT KeepPersonalData THEN
          "Telex No." := Cont."Telex No.";
        IF (Cont."Fax No." <> '') OR NOT KeepPersonalData THEN
          "Fax No." := Cont."Fax No.";
        IF (Cont."Telex Answer Back" <> '') OR NOT KeepPersonalData THEN
          "Telex Answer Back" := Cont."Telex Answer Back";
        IF (Cont."E-Mail" <> '') OR NOT KeepPersonalData THEN
          VALIDATE("E-Mail",Cont."E-Mail");
        IF (Cont."Home Page" <> '') OR NOT KeepPersonalData THEN
          "Home Page" := Cont."Home Page";
        IF (Cont."Extension No." <> '') OR NOT KeepPersonalData THEN
          "Extension No." := Cont."Extension No.";
        IF (Cont."Mobile Phone No." <> '') OR NOT KeepPersonalData THEN
          "Mobile Phone No." := Cont."Mobile Phone No.";
        IF (Cont.Pager <> '') OR NOT KeepPersonalData THEN
          Pager := Cont.Pager;
        IF (Cont."Correspondence Type" <> "Correspondence Type"::" ") OR NOT KeepPersonalData THEN
          "Correspondence Type" := Cont."Correspondence Type";
      END;
      CALCFIELDS("No. of Industry Groups","No. of Business Relations");
    END;

    PROCEDURE SetHideValidationDialog@26(NewHideValidationDialog@1000 : Boolean) : Boolean;
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    PROCEDURE DisplayMap@36();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::Contact,GETPOSITION)
      ELSE
        MESSAGE(Text033);
    END;

    PROCEDURE ProcessNameChange@37();
    VAR
      ContBusRel@1000 : Record 5054;
      Cust@1001 : Record 18;
      Vend@1002 : Record 23;
    BEGIN
      UpdateSearchName;

      IF Type = Type::Company THEN
        "Company Name" := Name;

      IF Type = Type::Person THEN BEGIN
        ContBusRel.RESET;
        ContBusRel.SETCURRENTKEY("Link to Table","Contact No.");
        ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
        ContBusRel.SETRANGE("Contact No.","Company No.");
        IF ContBusRel.FINDFIRST THEN
          IF Cust.GET(ContBusRel."No.") THEN
            IF Cust."Primary Contact No." = "No." THEN BEGIN
              Cust.Contact := Name;
              Cust.MODIFY;
            END;

        ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
        IF ContBusRel.FINDFIRST THEN
          IF Vend.GET(ContBusRel."No.") THEN
            IF Vend."Primary Contact No." = "No." THEN BEGIN
              Vend.Contact := Name;
              Vend.MODIFY;
            END;
      END;
    END;

    BEGIN
    END.
  }
}

OBJECT Page 21 Customer Card
{
  OBJECT-PROPERTIES
  {
    Date=10/16/12;
    Time=[ 2:36:31 PM];
    Modified=Yes;
    Version List=NAVW17.00,Lync;
  }
  PROPERTIES
  {
    CaptionML=ENU=Customer Card;
    SourceTable=Table18;
    PageType=Card;
    RefreshOnActivate=Yes;
    OnInit=BEGIN
             ContactEditable := TRUE;
             MapPointVisible := TRUE;
           END;

    OnOpenPage=VAR
                 MapMgt@1000 : Codeunit 802;
               BEGIN
                 ActivateFields;
                 IF NOT MapMgt.TestSetup THEN
                   MapPointVisible := FALSE;
               END;

    OnAfterGetRecord=VAR
                       searchCandidates@1000 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.StringCollection";
                     BEGIN
                       ActivateFields;
                       StyleTxt := SetStyle;

                       IF (LyncAvailable) THEN
                       BEGIN
                         CurrPage.Communication.AllowSearch := TRUE;
                         searchCandidates := searchCandidates.StringCollection();
                         BuildSearchCandidates(searchCandidates);
                         CurrPage.Communication.SetSearchCandidates(searchCandidates);
                       END;
                     END;

    OnAfterGetCurrRecord=BEGIN
                           ActivateFields;
                           StyleTxt := SetStyle;
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 74      ;1   ;ActionGroup;
                      CaptionML=ENU=&Customer;
                      Image=Customer }
      { 84      ;2   ;Action    ;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=ENU=Dimensions;
                      RunObject=Page 540;
                      RunPageLink=Table ID=CONST(18),
                                  No.=FIELD(No.);
                      Image=Dimensions }
      { 99      ;2   ;Action    ;
                      CaptionML=ENU=Bank Accounts;
                      RunObject=Page 424;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=BankAccount }
      { 81      ;2   ;Action    ;
                      CaptionML=ENU=Ship-&to Addresses;
                      RunObject=Page 301;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=ShipAddress }
      { 14      ;2   ;Action    ;
                      CaptionML=ENU=C&ontact;
                      Image=ContactPerson;
                      OnAction=BEGIN
                                 ShowContact;
                               END;
                                }
      { 94      ;2   ;Action    ;
                      CaptionML=ENU=Cross Re&ferences;
                      RunObject=Page 5723;
                      RunPageView=SORTING(Cross-Reference Type,Cross-Reference Type No.);
                      RunPageLink=Cross-Reference Type=CONST(Customer),
                                  Cross-Reference Type No.=FIELD(No.);
                      Image=Change }
      { 78      ;2   ;Action    ;
                      CaptionML=ENU=Co&mments;
                      RunObject=Page 124;
                      RunPageLink=Table Name=CONST(Customer),
                                  No.=FIELD(No.);
                      Image=ViewComments }
      { 118     ;2   ;Action    ;
                      CaptionML=ENU=Online Map;
                      Image=Map;
                      OnAction=BEGIN
                                 DisplayMap;
                               END;
                                }
      { 5       ;1   ;ActionGroup;
                      CaptionML=ENU=History;
                      Image=History }
      { 80      ;2   ;Action    ;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=ENU=Ledger E&ntries;
                      RunObject=Page 25;
                      RunPageView=SORTING(Customer No.);
                      RunPageLink=Customer No.=FIELD(No.);
                      Promoted=No;
                      Image=CustomerLedger;
                      PromotedCategory=Process }
      { 76      ;2   ;Action    ;
                      ShortCutKey=F7;
                      CaptionML=ENU=Statistics;
                      RunObject=Page 151;
                      RunPageLink=No.=FIELD(No.),
                                  Date Filter=FIELD(Date Filter),
                                  Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                                  Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                      Promoted=Yes;
                      Image=Statistics;
                      PromotedCategory=Process }
      { 79      ;2   ;Action    ;
                      CaptionML=ENU=S&ales;
                      RunObject=Page 155;
                      RunPageLink=No.=FIELD(No.),
                                  Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                                  Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                      Image=Sales }
      { 77      ;2   ;Action    ;
                      CaptionML=ENU=Entry Statistics;
                      RunObject=Page 302;
                      RunPageLink=No.=FIELD(No.),
                                  Date Filter=FIELD(Date Filter),
                                  Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                                  Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                      Image=EntryStatistics }
      { 112     ;2   ;Action    ;
                      CaptionML=ENU=Statistics by C&urrencies;
                      RunObject=Page 481;
                      RunPageLink=No.=FIELD(No.),
                                  Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                                  Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter),
                                  Date Filter=FIELD(Date Filter);
                      Image=Currencies }
      { 6500    ;2   ;Action    ;
                      CaptionML=ENU=Item &Tracking Entries;
                      Image=ItemTrackingLedger;
                      OnAction=VAR
                                 ItemTrackingMgt@1000 : Codeunit 6500;
                               BEGIN
                                 ItemTrackingMgt.CallItemTrackingEntryForm(1,"No.",'','','','','');
                               END;
                                }
      { 140     ;2   ;Separator  }
      { 82      ;1   ;ActionGroup;
                      CaptionML=ENU=S&ales;
                      Image=Sales }
      { 83      ;2   ;Action    ;
                      CaptionML=ENU=Invoice &Discounts;
                      RunObject=Page 23;
                      RunPageLink=Code=FIELD(Invoice Disc. Code);
                      Image=CalculateInvoiceDiscount }
      { 113     ;2   ;Action    ;
                      CaptionML=ENU=Prices;
                      RunObject=Page 7002;
                      RunPageView=SORTING(Sales Type,Sales Code);
                      RunPageLink=Sales Type=CONST(Customer),
                                  Sales Code=FIELD(No.);
                      Image=Price }
      { 136     ;2   ;Action    ;
                      CaptionML=ENU=Line Discounts;
                      RunObject=Page 7004;
                      RunPageView=SORTING(Sales Type,Sales Code);
                      RunPageLink=Sales Type=CONST(Customer),
                                  Sales Code=FIELD(No.);
                      Image=LineDiscount }
      { 162     ;2   ;Action    ;
                      CaptionML=ENU=Prepa&yment Percentages;
                      RunObject=Page 664;
                      RunPageView=SORTING(Sales Type,Sales Code);
                      RunPageLink=Sales Type=CONST(Customer),
                                  Sales Code=FIELD(No.);
                      Image=PrepaymentPercentages }
      { 148     ;2   ;Action    ;
                      CaptionML=ENU=S&td. Cust. Sales Codes;
                      RunObject=Page 173;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=CodesList }
      { 7       ;1   ;ActionGroup;
                      CaptionML=ENU=Documents;
                      Image=Documents }
      { 85      ;2   ;Action    ;
                      CaptionML=ENU=Quotes;
                      RunObject=Page 9300;
                      RunPageView=SORTING(Document Type,Sell-to Customer No.);
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Image=Quote }
      { 86      ;2   ;Action    ;
                      CaptionML=ENU=Orders;
                      RunObject=Page 9305;
                      RunPageView=SORTING(Document Type,Sell-to Customer No.);
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Image=Document }
      { 121     ;2   ;Action    ;
                      CaptionML=ENU=Return Orders;
                      RunObject=Page 9304;
                      RunPageView=SORTING(Document Type,Sell-to Customer No.);
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Image=ReturnOrder }
      { 151     ;2   ;ActionGroup;
                      CaptionML=ENU=Issued Documents;
                      Image=Documents }
      { 152     ;3   ;Action    ;
                      CaptionML=ENU=Issued &Reminders;
                      RunObject=Page 440;
                      RunPageView=SORTING(Customer No.,Posting Date);
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=OrderReminder }
      { 153     ;3   ;Action    ;
                      CaptionML=ENU=Issued &Finance Charge Memos;
                      RunObject=Page 452;
                      RunPageView=SORTING(Customer No.,Posting Date);
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=FinChargeMemo }
      { 114     ;2   ;Action    ;
                      CaptionML=ENU=Blanket Orders;
                      RunObject=Page 9303;
                      RunPageView=SORTING(Document Type,Sell-to Customer No.);
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Image=BlanketOrder }
      { 147     ;2   ;Action    ;
                      CaptionML=ENU=&Jobs;
                      RunObject=Page 89;
                      RunPageView=SORTING(Bill-to Customer No.);
                      RunPageLink=Bill-to Customer No.=FIELD(No.);
                      Image=Job }
      { 9       ;1   ;ActionGroup;
                      CaptionML=ENU=Credit Card;
                      Image=CreditCard }
      { 17      ;2   ;ActionGroup;
                      CaptionML=ENU=Credit Cards;
                      Image=CreditCard }
      { 149     ;3   ;Action    ;
                      CaptionML=ENU=C&redit Cards;
                      RunObject=Page 828;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=CreditCard }
      { 165     ;3   ;Action    ;
                      CaptionML=ENU=Credit Cards Transaction Lo&g Entries;
                      RunObject=Page 829;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=CreditCardLog }
      { 13      ;1   ;ActionGroup;
                      CaptionML=ENU=Service;
                      Image=ServiceItem }
      { 128     ;2   ;Action    ;
                      CaptionML=ENU=Service Orders;
                      RunObject=Page 9318;
                      RunPageView=SORTING(Document Type,Customer No.);
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=Document }
      { 126     ;2   ;Action    ;
                      CaptionML=ENU=Ser&vice Contracts;
                      RunObject=Page 6065;
                      RunPageView=SORTING(Customer No.,Ship-to Code);
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=ServiceAgreement }
      { 127     ;2   ;Action    ;
                      CaptionML=ENU=Service &Items;
                      RunObject=Page 5988;
                      RunPageView=SORTING(Customer No.,Ship-to Code,Item No.,Serial No.);
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=ServiceItem }
      { 1900000005;0 ;ActionContainer;
                      ActionContainerType=NewDocumentItems }
      { 1902575205;1 ;Action    ;
                      CaptionML=ENU=Blanket Sales Order;
                      RunObject=Page 507;
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Promoted=No;
                      Image=BlanketOrder;
                      PromotedCategory=New;
                      RunPageMode=Create }
      { 1900246505;1 ;Action    ;
                      CaptionML=ENU=Sales Quote;
                      RunObject=Page 41;
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Promoted=No;
                      Image=Quote;
                      PromotedCategory=New;
                      RunPageMode=Create }
      { 1906384905;1 ;Action    ;
                      CaptionML=ENU=Sales Invoice;
                      RunObject=Page 43;
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Promoted=Yes;
                      Image=Invoice;
                      PromotedCategory=New;
                      RunPageMode=Create }
      { 1904747105;1 ;Action    ;
                      CaptionML=ENU=Sales Order;
                      RunObject=Page 42;
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Promoted=Yes;
                      Image=Document;
                      PromotedCategory=New;
                      RunPageMode=Create }
      { 1902583505;1 ;Action    ;
                      CaptionML=ENU=Sales Credit Memo;
                      RunObject=Page 44;
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Promoted=No;
                      Image=CreditMemo;
                      PromotedCategory=New;
                      RunPageMode=Create }
      { 1905163705;1 ;Action    ;
                      CaptionML=ENU=Sales Return Order;
                      RunObject=Page 6630;
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Promoted=No;
                      Image=ReturnOrder;
                      PromotedCategory=New;
                      RunPageMode=Create }
      { 1905185205;1 ;Action    ;
                      CaptionML=ENU=Service Quote;
                      RunObject=Page 5964;
                      RunPageLink=Customer No.=FIELD(No.);
                      Promoted=No;
                      Image=Quote;
                      PromotedCategory=New;
                      RunPageMode=Create }
      { 1902079405;1 ;Action    ;
                      CaptionML=ENU=Service Invoice;
                      RunObject=Page 5933;
                      RunPageLink=Customer No.=FIELD(No.);
                      Promoted=No;
                      Image=Invoice;
                      PromotedCategory=New;
                      RunPageMode=Create }
      { 1907102005;1 ;Action    ;
                      CaptionML=ENU=Service Order;
                      RunObject=Page 5900;
                      RunPageLink=Customer No.=FIELD(No.);
                      Promoted=No;
                      Image=Document;
                      PromotedCategory=New;
                      RunPageMode=Create }
      { 1901662105;1 ;Action    ;
                      CaptionML=ENU=Service Credit Memo;
                      RunObject=Page 5935;
                      RunPageLink=Customer No.=FIELD(No.);
                      Promoted=No;
                      Image=CreditMemo;
                      PromotedCategory=New;
                      RunPageMode=Create }
      { 1903839805;1 ;Action    ;
                      CaptionML=ENU=Reminder;
                      RunObject=Page 434;
                      RunPageLink=Customer No.=FIELD(No.);
                      Promoted=Yes;
                      Image=Reminder;
                      PromotedCategory=New;
                      RunPageMode=Create }
      { 1901102005;1 ;Action    ;
                      CaptionML=ENU=Financial Charge Memo;
                      RunObject=Page 446;
                      RunPageLink=Customer No.=FIELD(No.);
                      Promoted=No;
                      Image=FinChargeMemo;
                      PromotedCategory=New;
                      RunPageMode=Create }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 163     ;1   ;ActionGroup;
                      CaptionML=ENU=F&unctions;
                      Image=Action }
      { 167     ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Apply Template;
                      Promoted=Yes;
                      Image=ApplyTemplate;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ConfigTemplateMgt@1000 : Codeunit 8612;
                                 RecRef@1001 : RecordRef;
                               BEGIN
                                 RecRef.GETTABLE(Rec);
                                 ConfigTemplateMgt.UpdateFromTemplateSelection(RecRef);
                               END;
                                }
      { 1900839804;1 ;Action    ;
                      CaptionML=ENU=Cash Receipt Journal;
                      RunObject=Page 255;
                      Promoted=Yes;
                      Image=CashReceiptJournal;
                      PromotedCategory=Process }
      { 1905171704;1 ;Action    ;
                      CaptionML=ENU=Sales Journal;
                      RunObject=Page 253;
                      Promoted=Yes;
                      Image=Journals;
                      PromotedCategory=Process }
      { 1900000006;0 ;ActionContainer;
                      ActionContainerType=Reports }
      { 1906813206;1 ;Action    ;
                      CaptionML=ENU=Customer Detailed Aging;
                      RunObject=Report 106;
                      Promoted=No;
                      Image=Report;
                      PromotedCategory=Report }
      { 1907586706;1 ;Action    ;
                      CaptionML=ENU=Customer - Labels;
                      RunObject=Report 110;
                      Promoted=No;
                      Image=Report;
                      PromotedCategory=Report }
      { 1902299006;1 ;Action    ;
                      CaptionML=ENU=Customer - Balance to Date;
                      RunObject=Report 121;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Report }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=ENU=General }

    { 2   ;2   ;Field     ;
                SourceExpr="No.";
                Importance=Promoted;
                OnAssistEdit=BEGIN
                               IF AssistEdit(xRec) THEN
                                 CurrPage.UPDATE;
                             END;
                              }

    { 4   ;2   ;Field     ;
                SourceExpr=Name;
                Importance=Promoted }

    { 6   ;2   ;Field     ;
                SourceExpr=Address }

    { 8   ;2   ;Field     ;
                SourceExpr="Address 2" }

    { 90  ;2   ;Field     ;
                SourceExpr="Post Code";
                Importance=Promoted }

    { 10  ;2   ;Field     ;
                SourceExpr=City }

    { 91  ;2   ;Field     ;
                SourceExpr="Country/Region Code" }

    { 12  ;2   ;Field     ;
                SourceExpr="Phone No." }

    { 122 ;2   ;Field     ;
                SourceExpr="Primary Contact No." }

    { 16  ;2   ;Field     ;
                SourceExpr=Contact;
                Importance=Promoted;
                Editable=ContactEditable;
                OnValidate=BEGIN
                             ContactOnAfterValidate;
                           END;
                            }

    { 18  ;2   ;Field     ;
                SourceExpr="Search Name" }

    { 20  ;2   ;Field     ;
                SourceExpr="Balance (LCY)";
                OnDrillDown=VAR
                              DtldCustLedgEntry@1001 : Record 379;
                              CustLedgEntry@1002 : Record 21;
                            BEGIN
                              DtldCustLedgEntry.SETRANGE("Customer No.","No.");
                              COPYFILTER("Global Dimension 1 Filter",DtldCustLedgEntry."Initial Entry Global Dim. 1");
                              COPYFILTER("Global Dimension 2 Filter",DtldCustLedgEntry."Initial Entry Global Dim. 2");
                              COPYFILTER("Currency Filter",DtldCustLedgEntry."Currency Code");
                              CustLedgEntry.DrillDownOnEntries(DtldCustLedgEntry);
                            END;
                             }

    { 22  ;2   ;Field     ;
                SourceExpr="Credit Limit (LCY)";
                StyleExpr=StyleTxt;
                OnValidate=BEGIN
                             StyleTxt := SetStyle;
                           END;
                            }

    { 24  ;2   ;Field     ;
                SourceExpr="Salesperson Code" }

    { 64  ;2   ;Field     ;
                SourceExpr="Responsibility Center" }

    { 93  ;2   ;Field     ;
                SourceExpr="Service Zone Code" }

    { 26  ;2   ;Field     ;
                SourceExpr=Blocked }

    { 28  ;2   ;Field     ;
                SourceExpr="Last Date Modified" }

    { 1902768601;1;Group  ;
                CaptionML=ENU=Communication }

    { 103 ;2   ;Field     ;
                Name=Phone No.2;
                SourceExpr="Phone No.";
                Importance=Promoted }

    { 19  ;2   ;Field     ;
                Name=Communication;
                SourceExpr=SipAddress;
                ControlAddIn=[LyncCommunicationControlAddIn;PublicKeyToken=48f3911b65e24838] }

    { 104 ;2   ;Field     ;
                SourceExpr="Fax No." }

    { 107 ;2   ;Field     ;
                SourceExpr="E-Mail";
                Importance=Promoted }

    { 109 ;2   ;Field     ;
                SourceExpr="Home Page" }

    { 154 ;2   ;Field     ;
                SourceExpr="IC Partner Code" }

    { 1905885101;1;Group  ;
                CaptionML=ENU=Invoicing }

    { 34  ;2   ;Field     ;
                SourceExpr="Bill-to Customer No." }

    { 36  ;2   ;Field     ;
                SourceExpr="Invoice Copies" }

    { 42  ;2   ;Field     ;
                SourceExpr="Invoice Disc. Code" }

    { 156 ;2   ;Field     ;
                SourceExpr="Copy Sell-to Addr. to Qte From" }

    { 70  ;2   ;Field     ;
                SourceExpr="Gen. Bus. Posting Group";
                Importance=Promoted }

    { 58  ;2   ;Field     ;
                SourceExpr="VAT Bus. Posting Group" }

    { 38  ;2   ;Field     ;
                SourceExpr="Customer Posting Group";
                Importance=Promoted }

    { 40  ;2   ;Field     ;
                SourceExpr="Customer Price Group";
                Importance=Promoted }

    { 44  ;2   ;Field     ;
                SourceExpr="Customer Disc. Group";
                Importance=Promoted }

    { 46  ;2   ;Field     ;
                SourceExpr="Allow Line Disc." }

    { 129 ;2   ;Field     ;
                SourceExpr="Prices Including VAT" }

    { 160 ;2   ;Field     ;
                SourceExpr="Prepayment %" }

    { 1901677601;1;Group  ;
                CaptionML=ENU=Payments }

    { 48  ;2   ;Field     ;
                SourceExpr="Application Method" }

    { 50  ;2   ;Field     ;
                SourceExpr="Payment Terms Code";
                Importance=Promoted }

    { 11  ;2   ;Field     ;
                SourceExpr="Payment Method Code";
                Importance=Promoted }

    { 15  ;2   ;Field     ;
                SourceExpr="Reminder Terms Code";
                Importance=Promoted }

    { 52  ;2   ;Field     ;
                SourceExpr="Fin. Charge Terms Code";
                Importance=Promoted }

    { 3   ;2   ;Field     ;
                SourceExpr="Cash Flow Payment Terms Code" }

    { 54  ;2   ;Field     ;
                SourceExpr="Print Statements" }

    { 60  ;2   ;Field     ;
                SourceExpr="Last Statement No." }

    { 143 ;2   ;Field     ;
                SourceExpr="Block Payment Tolerance";
                OnValidate=BEGIN
                             IF "Block Payment Tolerance" THEN BEGIN
                               IF CONFIRM(Text002,FALSE) THEN
                                 PaymentToleranceMgt.DelTolCustLedgEntry(Rec);
                             END ELSE BEGIN
                               IF CONFIRM(Text001,FALSE) THEN
                                 PaymentToleranceMgt.CalcTolCustLedgEntry(Rec);
                             END;
                           END;
                            }

    { 1906801201;1;Group  ;
                CaptionML=ENU=Shipping }

    { 95  ;2   ;Field     ;
                SourceExpr="Location Code";
                Importance=Promoted }

    { 32  ;2   ;Field     ;
                SourceExpr="Combine Shipments" }

    { 158 ;2   ;Field     ;
                SourceExpr=Reserve }

    { 123 ;2   ;Field     ;
                SourceExpr="Shipping Advice";
                Importance=Promoted }

    { 30  ;2   ;Field     ;
                SourceExpr="Shipment Method Code";
                Importance=Promoted }

    { 101 ;2   ;Field     ;
                SourceExpr="Shipping Agent Code";
                Importance=Promoted }

    { 131 ;2   ;Field     ;
                SourceExpr="Shipping Agent Service Code" }

    { 119 ;2   ;Field     ;
                SourceExpr="Shipping Time" }

    { 141 ;2   ;Field     ;
                DrillDown=No;
                SourceExpr="Base Calendar Code" }

    { 146 ;2   ;Field     ;
                Name=Customized Calendar;
                CaptionML=ENU=Customized Calendar;
                SourceExpr=CalendarMgmt.CustomizedCalendarExistText(CustomizedCalendar."Source Type"::Customer,"No.",'',"Base Calendar Code");
                Editable=FALSE;
                OnDrillDown=BEGIN
                              CurrPage.SAVERECORD;
                              TESTFIELD("Base Calendar Code");
                              CalendarMgmt.ShowCustomizedCalendar(CustomizedCalEntry."Source Type"::Customer,"No.",'',"Base Calendar Code");
                            END;
                             }

    { 1907468901;1;Group  ;
                CaptionML=ENU=Foreign Trade }

    { 67  ;2   ;Field     ;
                SourceExpr="Currency Code";
                Importance=Promoted }

    { 66  ;2   ;Field     ;
                SourceExpr="Language Code" }

    { 69  ;2   ;Field     ;
                SourceExpr="VAT Registration No." }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1903720907;1;Part   ;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9080;
                Visible=TRUE;
                PartType=Page }

    { 1907234507;1;Part   ;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9081;
                Visible=FALSE;
                PartType=Page }

    { 1902018507;1;Part   ;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9082;
                Visible=TRUE;
                PartType=Page }

    { 1905532107;1;Part   ;
                SubPageLink=Table ID=CONST(18),
                            No.=FIELD(No.);
                PagePartID=Page9083;
                Visible=FALSE;
                PartType=Page }

    { 1907829707;1;Part   ;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9085;
                Visible=FALSE;
                PartType=Page }

    { 1902613707;1;Part   ;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9086;
                Visible=FALSE;
                PartType=Page }

    { 1900383207;1;Part   ;
                Visible=TRUE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=TRUE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      CustomizedCalEntry@1001 : Record 7603;
      Text001@1003 : TextConst 'ENU=Do you want to allow payment tolerance for entries that are currently open?';
      CustomizedCalendar@1005 : Record 7602;
      Text002@1006 : TextConst 'ENU=Do you want to remove payment tolerance from entries that are currently open?';
      CalendarMgmt@1002 : Codeunit 7600;
      PaymentToleranceMgt@1000 : Codeunit 426;
      StyleTxt@1004 : Text;
      MapPointVisible@19022708 : Boolean INDATASET;
      ContactEditable@19051436 : Boolean INDATASET;
      LyncAvailable@1007 : Boolean;

    PROCEDURE ActivateFields@3();
    BEGIN
      ContactEditable := "Primary Contact No." = '';
    END;

    LOCAL PROCEDURE ContactOnAfterValidate@19013243();
    BEGIN
      ActivateFields;
    END;

    PROCEDURE BuildSearchCandidates@2(VAR searchCandidates@1000 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.StringCollection");
    BEGIN
      IF (Rec.Name <> '') THEN BEGIN
        searchCandidates.Add(Rec.Name);
      END;

      IF (Rec."Search Name" <> '') THEN BEGIN
        searchCandidates.Add(Rec."Search Name");
      END;

      IF (Rec."Name 2" <> '') THEN BEGIN
        searchCandidates.Add(Rec."Name 2");
      END;

      IF (Rec."E-Mail" <> '') THEN BEGIN
        searchCandidates.Add(Rec."E-Mail");
      END;

      IF (Rec."Phone No." <> '') THEN BEGIN
        searchCandidates.Add(Rec."Phone No.");
      END;

      IF (Rec."Fax No." <> '') THEN BEGIN
        searchCandidates.Add(Rec."Fax No.");
      END;
    END;

    EVENT Communication@-19::AddInReady@5();
    BEGIN
      LyncAvailable := TRUE;
    END;

    BEGIN
    END.
  }
}

OBJECT Page 26 Vendor Card
{
  OBJECT-PROPERTIES
  {
    Date=10/16/12;
    Time=[ 2:37:07 PM];
    Modified=Yes;
    Version List=NAVW17.00,Lync;
  }
  PROPERTIES
  {
    CaptionML=ENU=Vendor Card;
    SourceTable=Table23;
    PageType=Card;
    RefreshOnActivate=Yes;
    OnInit=BEGIN
             ContactEditable := TRUE;
             MapPointVisible := TRUE;
           END;

    OnOpenPage=VAR
                 MapMgt@1000 : Codeunit 802;
               BEGIN
                 ActivateFields;
                 IF NOT MapMgt.TestSetup THEN
                   MapPointVisible := FALSE;
               END;

    OnAfterGetRecord=VAR
                       searchCandidates@1000 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.StringCollection";
                     BEGIN
                       ActivateFields;

                       IF (LyncAvailable) THEN
                       BEGIN
                         CurrPage.Communication.AllowSearch := TRUE;
                         searchCandidates := searchCandidates.StringCollection();
                         BuildSearchCandidates(searchCandidates);
                         CurrPage.Communication.SetSearchCandidates(searchCandidates);
                       END;
                     END;

    OnAfterGetCurrRecord=BEGIN
                           ActivateFields;
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 64      ;1   ;ActionGroup;
                      CaptionML=ENU=Ven&dor;
                      Image=Vendor }
      { 184     ;2   ;Action    ;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=ENU=Dimensions;
                      RunObject=Page 540;
                      RunPageLink=Table ID=CONST(23),
                                  No.=FIELD(No.);
                      Image=Dimensions }
      { 87      ;2   ;Action    ;
                      CaptionML=ENU=Bank Accounts;
                      RunObject=Page 426;
                      RunPageLink=Vendor No.=FIELD(No.);
                      Image=BankAccount }
      { 14      ;2   ;Action    ;
                      CaptionML=ENU=C&ontact;
                      Image=ContactPerson;
                      OnAction=BEGIN
                                 ShowContact;
                               END;
                                }
      { 54      ;2   ;Action    ;
                      CaptionML=ENU=Order &Addresses;
                      RunObject=Page 369;
                      RunPageLink=Vendor No.=FIELD(No.);
                      Image=Addresses }
      { 68      ;2   ;Action    ;
                      CaptionML=ENU=Co&mments;
                      RunObject=Page 124;
                      RunPageLink=Table Name=CONST(Vendor),
                                  No.=FIELD(No.);
                      Image=ViewComments }
      { 84      ;2   ;Action    ;
                      CaptionML=ENU=Cross References;
                      RunObject=Page 5723;
                      RunPageView=SORTING(Cross-Reference Type,Cross-Reference Type No.);
                      RunPageLink=Cross-Reference Type=CONST(Vendor),
                                  Cross-Reference Type No.=FIELD(No.);
                      Image=Change }
      { 102     ;2   ;Action    ;
                      CaptionML=ENU=Online Map;
                      Image=Map;
                      OnAction=BEGIN
                                 DisplayMap;
                               END;
                                }
      { 11      ;2   ;Separator  }
      { 83      ;2   ;Separator ;
                      CaptionML=ENU="" }
      { 108     ;2   ;Separator  }
      { 71      ;1   ;ActionGroup;
                      CaptionML=ENU=&Purchases;
                      Image=Purchasing }
      { 118     ;2   ;Action    ;
                      CaptionML=ENU=Items;
                      RunObject=Page 297;
                      RunPageView=SORTING(Vendor No.,Item No.);
                      RunPageLink=Vendor No.=FIELD(No.);
                      Image=Item }
      { 73      ;2   ;Action    ;
                      CaptionML=ENU=Invoice &Discounts;
                      RunObject=Page 28;
                      RunPageLink=Code=FIELD(Invoice Disc. Code);
                      Image=CalculateInvoiceDiscount }
      { 72      ;2   ;Action    ;
                      CaptionML=ENU=Prices;
                      RunObject=Page 7012;
                      RunPageView=SORTING(Vendor No.);
                      RunPageLink=Vendor No.=FIELD(No.);
                      Image=Price }
      { 116     ;2   ;Action    ;
                      CaptionML=ENU=Line Discounts;
                      RunObject=Page 7014;
                      RunPageView=SORTING(Vendor No.);
                      RunPageLink=Vendor No.=FIELD(No.);
                      Image=LineDiscount }
      { 129     ;2   ;Action    ;
                      CaptionML=ENU=Prepa&yment Percentages;
                      RunObject=Page 665;
                      RunPageView=SORTING(Vendor No.);
                      RunPageLink=Vendor No.=FIELD(No.);
                      Image=PrepaymentPercentages }
      { 123     ;2   ;Action    ;
                      CaptionML=ENU=S&td. Vend. Purchase Codes;
                      RunObject=Page 178;
                      RunPageLink=Vendor No.=FIELD(No.);
                      Image=CodesList }
      { 117     ;2   ;Separator  }
      { 5       ;1   ;ActionGroup;
                      CaptionML=ENU=Documents;
                      Image=Administration }
      { 74      ;2   ;Action    ;
                      CaptionML=ENU=Quotes;
                      RunObject=Page 9306;
                      RunPageView=SORTING(Document Type,Buy-from Vendor No.);
                      RunPageLink=Buy-from Vendor No.=FIELD(No.);
                      Image=Quote }
      { 75      ;2   ;Action    ;
                      CaptionML=ENU=Orders;
                      RunObject=Page 9307;
                      RunPageView=SORTING(Document Type,Buy-from Vendor No.);
                      RunPageLink=Buy-from Vendor No.=FIELD(No.);
                      Image=Document }
      { 99      ;2   ;Action    ;
                      CaptionML=ENU=Return Orders;
                      RunObject=Page 9311;
                      RunPageView=SORTING(Document Type,Buy-from Vendor No.);
                      RunPageLink=Buy-from Vendor No.=FIELD(No.);
                      Image=ReturnOrder }
      { 21      ;2   ;Action    ;
                      CaptionML=ENU=Blanket Orders;
                      RunObject=Page 9310;
                      RunPageView=SORTING(Document Type,Buy-from Vendor No.);
                      RunPageLink=Buy-from Vendor No.=FIELD(No.);
                      Image=BlanketOrder }
      { 7       ;1   ;ActionGroup;
                      CaptionML=ENU=History;
                      Image=History }
      { 70      ;2   ;Action    ;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=ENU=Ledger E&ntries;
                      RunObject=Page 29;
                      RunPageView=SORTING(Vendor No.);
                      RunPageLink=Vendor No.=FIELD(No.);
                      Promoted=No;
                      Image=VendorLedger;
                      PromotedCategory=Process }
      { 66      ;2   ;Action    ;
                      ShortCutKey=F7;
                      CaptionML=ENU=Statistics;
                      RunObject=Page 152;
                      RunPageLink=No.=FIELD(No.),
                                  Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                                  Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                      Promoted=Yes;
                      Image=Statistics;
                      PromotedCategory=Process }
      { 69      ;2   ;Action    ;
                      CaptionML=ENU=Purchases;
                      RunObject=Page 156;
                      RunPageLink=No.=FIELD(No.),
                                  Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                                  Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                      Image=Purchase }
      { 67      ;2   ;Action    ;
                      CaptionML=ENU=Entry Statistics;
                      RunObject=Page 303;
                      RunPageLink=No.=FIELD(No.),
                                  Date Filter=FIELD(Date Filter),
                                  Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                                  Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                      Image=EntryStatistics }
      { 20      ;2   ;Action    ;
                      CaptionML=ENU=Statistics by C&urrencies;
                      RunObject=Page 482;
                      RunPageLink=No.=FIELD(No.),
                                  Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                                  Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter),
                                  Date Filter=FIELD(Date Filter);
                      Image=Currencies }
      { 6500    ;2   ;Action    ;
                      CaptionML=ENU=Item &Tracking Entries;
                      Image=ItemTrackingLedger;
                      OnAction=VAR
                                 ItemTrackingMgt@1000 : Codeunit 6500;
                               BEGIN
                                 ItemTrackingMgt.CallItemTrackingEntryForm(2,"No.",'','','','','');
                               END;
                                }
      { 1900000005;0 ;ActionContainer;
                      ActionContainerType=NewDocumentItems }
      { 1903213705;1 ;Action    ;
                      CaptionML=ENU=Blanket Purchase Order;
                      RunObject=Page 509;
                      RunPageLink=Buy-from Vendor No.=FIELD(No.);
                      Promoted=No;
                      Image=BlanketOrder;
                      PromotedCategory=New;
                      RunPageMode=Create }
      { 1901469405;1 ;Action    ;
                      CaptionML=ENU=Purchase Quote;
                      RunObject=Page 49;
                      RunPageLink=Buy-from Vendor No.=FIELD(No.);
                      Promoted=No;
                      Image=Quote;
                      PromotedCategory=New;
                      RunPageMode=Create }
      { 1907709505;1 ;Action    ;
                      CaptionML=ENU=Purchase Invoice;
                      RunObject=Page 51;
                      RunPageLink=Buy-from Vendor No.=FIELD(No.);
                      Promoted=Yes;
                      Image=Invoice;
                      PromotedCategory=New;
                      RunPageMode=Create }
      { 1907375405;1 ;Action    ;
                      CaptionML=ENU=Purchase Order;
                      RunObject=Page 50;
                      RunPageLink=Buy-from Vendor No.=FIELD(No.);
                      Promoted=Yes;
                      Image=Document;
                      PromotedCategory=New;
                      RunPageMode=Create }
      { 1905024805;1 ;Action    ;
                      CaptionML=ENU=Purchase Credit Memo;
                      RunObject=Page 52;
                      RunPageLink=Buy-from Vendor No.=FIELD(No.);
                      Promoted=No;
                      Image=CreditMemo;
                      PromotedCategory=New;
                      RunPageMode=Create }
      { 1904749705;1 ;Action    ;
                      CaptionML=ENU=Purchase Return Order;
                      RunObject=Page 6640;
                      RunPageLink=Buy-from Vendor No.=FIELD(No.);
                      Promoted=No;
                      Image=ReturnOrder;
                      PromotedCategory=New;
                      RunPageMode=Create }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 130     ;1   ;ActionGroup;
                      CaptionML=ENU=F&unctions;
                      Image=Action }
      { 131     ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Apply Template;
                      Promoted=Yes;
                      Image=ApplyTemplate;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ConfigTemplateMgt@1000 : Codeunit 8612;
                                 RecRef@1001 : RecordRef;
                               BEGIN
                                 RecRef.GETTABLE(Rec);
                                 ConfigTemplateMgt.UpdateFromTemplateSelection(RecRef);
                               END;
                                }
      { 1902327104;1 ;Action    ;
                      CaptionML=ENU=Payment Journal;
                      RunObject=Page 256;
                      Promoted=Yes;
                      Image=PaymentJournal;
                      PromotedCategory=Process }
      { 1906371704;1 ;Action    ;
                      CaptionML=ENU=Purchase Journal;
                      RunObject=Page 254;
                      Promoted=Yes;
                      Image=Journals;
                      PromotedCategory=Process }
      { 1900000006;0 ;ActionContainer;
                      ActionContainerType=Reports }
      { 1905916106;1 ;Action    ;
                      CaptionML=ENU=Vendor - Labels;
                      RunObject=Report 310;
                      Promoted=No;
                      Image=Report;
                      PromotedCategory=Report }
      { 1904504206;1 ;Action    ;
                      CaptionML=ENU=Vendor - Balance to Date;
                      RunObject=Report 321;
                      Promoted=No;
                      Image=Report;
                      PromotedCategory=Report }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=ENU=General }

    { 2   ;2   ;Field     ;
                SourceExpr="No.";
                Importance=Promoted;
                OnAssistEdit=BEGIN
                               IF AssistEdit(xRec) THEN
                                 CurrPage.UPDATE;
                             END;
                              }

    { 4   ;2   ;Field     ;
                SourceExpr=Name;
                Importance=Promoted }

    { 6   ;2   ;Field     ;
                SourceExpr=Address }

    { 8   ;2   ;Field     ;
                SourceExpr="Address 2" }

    { 79  ;2   ;Field     ;
                SourceExpr="Post Code";
                Importance=Promoted }

    { 81  ;2   ;Field     ;
                SourceExpr="Country/Region Code" }

    { 12  ;2   ;Field     ;
                SourceExpr="Phone No." }

    { 114 ;2   ;Field     ;
                SourceExpr="Primary Contact No.";
                OnValidate=BEGIN
                             ActivateFields;
                           END;
                            }

    { 16  ;2   ;Field     ;
                SourceExpr=Contact;
                Importance=Promoted;
                Editable=ContactEditable;
                OnValidate=BEGIN
                             ContactOnAfterValidate;
                           END;
                            }

    { 10  ;2   ;Field     ;
                SourceExpr=City }

    { 18  ;2   ;Field     ;
                SourceExpr="Search Name" }

    { 92  ;2   ;Field     ;
                SourceExpr="Balance (LCY)";
                OnDrillDown=VAR
                              VendLedgEntry@1001 : Record 25;
                              DtldVendLedgEntry@1002 : Record 380;
                            BEGIN
                              DtldVendLedgEntry.SETRANGE("Vendor No.","No.");
                              COPYFILTER("Global Dimension 1 Filter",DtldVendLedgEntry."Initial Entry Global Dim. 1");
                              COPYFILTER("Global Dimension 2 Filter",DtldVendLedgEntry."Initial Entry Global Dim. 2");
                              COPYFILTER("Currency Filter",DtldVendLedgEntry."Currency Code");
                              VendLedgEntry.DrillDownOnEntries(DtldVendLedgEntry);
                            END;
                             }

    { 22  ;2   ;Field     ;
                SourceExpr="Purchaser Code" }

    { 55  ;2   ;Field     ;
                SourceExpr="Responsibility Center" }

    { 24  ;2   ;Field     ;
                SourceExpr=Blocked }

    { 26  ;2   ;Field     ;
                SourceExpr="Last Date Modified" }

    { 1902768601;1;Group  ;
                CaptionML=ENU=Communication }

    { 44  ;2   ;Field     ;
                Name=Phone No.2;
                SourceExpr="Phone No.";
                Importance=Promoted }

    { 45  ;2   ;Field     ;
                SourceExpr="Fax No." }

    { 48  ;2   ;Field     ;
                SourceExpr="E-Mail";
                Importance=Promoted }

    { 86  ;2   ;Field     ;
                SourceExpr="Home Page" }

    { 125 ;2   ;Field     ;
                SourceExpr="IC Partner Code" }

    { 9   ;2   ;Field     ;
                Name=Communication;
                SourceExpr=SipAddress;
                ControlAddIn=[LyncCommunicationControlAddIn;PublicKeyToken=48f3911b65e24838] }

    { 1905885101;1;Group  ;
                CaptionML=ENU=Invoicing }

    { 30  ;2   ;Field     ;
                SourceExpr="Pay-to Vendor No." }

    { 60  ;2   ;Field     ;
                SourceExpr="Gen. Bus. Posting Group";
                Importance=Promoted }

    { 90  ;2   ;Field     ;
                SourceExpr="VAT Bus. Posting Group" }

    { 32  ;2   ;Field     ;
                SourceExpr="Vendor Posting Group";
                Importance=Promoted }

    { 34  ;2   ;Field     ;
                SourceExpr="Invoice Disc. Code" }

    { 94  ;2   ;Field     ;
                SourceExpr="Prices Including VAT" }

    { 127 ;2   ;Field     ;
                SourceExpr="Prepayment %" }

    { 1901677601;1;Group  ;
                CaptionML=ENU=Payments }

    { 36  ;2   ;Field     ;
                SourceExpr="Application Method" }

    { 38  ;2   ;Field     ;
                SourceExpr="Payment Terms Code";
                Importance=Promoted }

    { 40  ;2   ;Field     ;
                SourceExpr="Payment Method Code";
                Importance=Promoted }

    { 42  ;2   ;Field     ;
                SourceExpr=Priority }

    { 3   ;2   ;Field     ;
                SourceExpr="Cash Flow Payment Terms Code" }

    { 50  ;2   ;Field     ;
                SourceExpr="Our Account No." }

    { 119 ;2   ;Field     ;
                SourceExpr="Block Payment Tolerance";
                OnValidate=BEGIN
                             IF "Block Payment Tolerance" THEN BEGIN
                               IF CONFIRM(Text002,FALSE) THEN
                                 PaymentToleranceMgt.DelTolVendLedgEntry(Rec);
                             END ELSE BEGIN
                               IF CONFIRM(Text001,FALSE) THEN
                                 PaymentToleranceMgt.CalcTolVendLedgEntry(Rec);
                             END;
                           END;
                            }

    { 1901075901;1;Group  ;
                CaptionML=ENU=Receiving }

    { 100 ;2   ;Field     ;
                SourceExpr="Location Code";
                Importance=Promoted }

    { 28  ;2   ;Field     ;
                SourceExpr="Shipment Method Code";
                Importance=Promoted }

    { 96  ;2   ;Field     ;
                SourceExpr="Lead Time Calculation";
                Importance=Promoted }

    { 112 ;2   ;Field     ;
                DrillDown=No;
                SourceExpr="Base Calendar Code" }

    { 121 ;2   ;Field     ;
                Name=Customized Calendar;
                CaptionML=ENU=Customized Calendar;
                SourceExpr=CalendarMgmt.CustomizedCalendarExistText(CustomizedCalendar."Source Type"::Vendor,"No.",'',"Base Calendar Code");
                Editable=FALSE;
                OnDrillDown=BEGIN
                              CurrPage.SAVERECORD;
                              TESTFIELD("Base Calendar Code");
                              CalendarMgmt.ShowCustomizedCalendar(CustomizedCalEntry."Source Type"::Vendor,"No.",'',"Base Calendar Code");
                            END;
                             }

    { 1907468901;1;Group  ;
                CaptionML=ENU=Foreign Trade }

    { 52  ;2   ;Field     ;
                SourceExpr="Currency Code";
                Importance=Promoted }

    { 56  ;2   ;Field     ;
                SourceExpr="Language Code" }

    { 58  ;2   ;Field     ;
                SourceExpr="VAT Registration No." }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1904651607;1;Part   ;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9094;
                Visible=TRUE;
                PartType=Page }

    { 1903435607;1;Part   ;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9095;
                Visible=TRUE;
                PartType=Page }

    { 1906949207;1;Part   ;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9096;
                Visible=FALSE;
                PartType=Page }

    { 1900383207;1;Part   ;
                Visible=TRUE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=TRUE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      CalendarMgmt@1000 : Codeunit 7600;
      PaymentToleranceMgt@1002 : Codeunit 426;
      CustomizedCalEntry@1001 : Record 7603;
      CustomizedCalendar@1003 : Record 7602;
      Text001@1005 : TextConst 'ENU=Do you want to allow payment tolerance for entries that are currently open?';
      Text002@1004 : TextConst 'ENU=Do you want to remove payment tolerance from entries that are currently open?';
      MapPointVisible@19022708 : Boolean INDATASET;
      ContactEditable@19051436 : Boolean INDATASET;
      LyncAvailable@1006 : Boolean;

    PROCEDURE ActivateFields@3();
    BEGIN
      ContactEditable := "Primary Contact No." = '';
    END;

    LOCAL PROCEDURE ContactOnAfterValidate@19013243();
    BEGIN
      ActivateFields;
    END;

    PROCEDURE BuildSearchCandidates@2(VAR searchCandidates@1000 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.StringCollection");
    BEGIN
      IF (Rec.Name <> '') THEN BEGIN
        searchCandidates.Add(Rec.Name);
      END;

      IF (Rec."Search Name" <> '') THEN BEGIN
        searchCandidates.Add(Rec."Search Name");
      END;

      IF (Rec."Name 2" <> '') THEN BEGIN
        searchCandidates.Add(Rec."Name 2");
      END;

      IF (Rec."E-Mail" <> '') THEN BEGIN
        searchCandidates.Add(Rec."E-Mail");
      END;

      IF (Rec."Phone No." <> '') THEN BEGIN
        searchCandidates.Add(Rec."Phone No.");
      END;

      IF (Rec."Fax No." <> '') THEN BEGIN
        searchCandidates.Add(Rec."Fax No.");
      END;
    END;

    EVENT Communication@-9::AddInReady@5();
    BEGIN
      LyncAvailable := TRUE;
    END;

    BEGIN
    END.
  }
}

OBJECT Page 41 Sales Quote
{
  OBJECT-PROPERTIES
  {
    Date=10/16/12;
    Time=[ 2:40:53 PM];
    Modified=Yes;
    Version List=NAVW17.00,Lync;
  }
  PROPERTIES
  {
    CaptionML=ENU=Sales Quote;
    SourceTable=Table36;
    SourceTableView=WHERE(Document Type=FILTER(Quote));
    PageType=Document;
    RefreshOnActivate=Yes;
    OnInit=BEGIN
             "Bill-to Customer No.Enable" := TRUE;
             "Sell-to Customer No.Enable" := TRUE;
             SelltoCustomerTemplateCodeEnab := TRUE;
             BilltoCustomerTemplateCodeEnab := TRUE;
           END;

    OnOpenPage=BEGIN
                 IF UserMgt.GetSalesFilter <> '' THEN BEGIN
                   FILTERGROUP(2);
                   SETRANGE("Responsibility Center",UserMgt.GetSalesFilter);
                   FILTERGROUP(0);
                 END;

                 ActivateFields;
               END;

    OnAfterGetRecord=VAR
                       searchCandidates@1000 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.StringCollection";
                     BEGIN
                       ActivateFields;

                       IF (LyncAvailable) THEN
                       BEGIN
                         CurrPage.Communication.AllowSearch := TRUE;
                         searchCandidates := searchCandidates.StringCollection();
                         BuildSearchCandidates(searchCandidates);
                         CurrPage.Communication.SetSearchCandidates(searchCandidates);
                       END;
                     END;

    OnNewRecord=BEGIN
                  "Responsibility Center" := UserMgt.GetSalesFilter;
                END;

    OnInsertRecord=BEGIN
                     CheckCreditMaxBeforeInsert;
                   END;

    OnDeleteRecord=BEGIN
                     CurrPage.SAVERECORD;
                     EXIT(ConfirmDeletion);
                   END;

    OnAfterGetCurrRecord=BEGIN
                           ActivateFields;
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 59      ;1   ;ActionGroup;
                      CaptionML=ENU=&Quote;
                      Image=Quote }
      { 61      ;2   ;Action    ;
                      Name=Statistics;
                      ShortCutKey=F7;
                      CaptionML=ENU=Statistics;
                      Promoted=Yes;
                      Image=Statistics;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CalcInvDiscForHeader;
                                 COMMIT;
                                 PAGE.RUNMODAL(PAGE::"Sales Statistics",Rec);
                               END;
                                }
      { 62      ;2   ;Action    ;
                      ShortCutKey=Shift+F7;
                      CaptionML=ENU=Customer Card;
                      RunObject=Page 21;
                      RunPageLink=No.=FIELD(Sell-to Customer No.);
                      Image=Customer }
      { 146     ;2   ;Action    ;
                      CaptionML=ENU=C&ontact Card;
                      RunObject=Page 5050;
                      RunPageLink=No.=FIELD(Sell-to Contact No.);
                      Image=Card }
      { 63      ;2   ;Action    ;
                      CaptionML=ENU=Co&mments;
                      RunObject=Page 67;
                      RunPageLink=Document Type=FIELD(Document Type),
                                  No.=FIELD(No.),
                                  Document Line No.=CONST(0);
                      Image=ViewComments }
      { 104     ;2   ;Action    ;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=ENU=Dimensions;
                      Image=Dimensions;
                      OnAction=BEGIN
                                 ShowDocDim;
                                 CurrPage.SAVERECORD;
                               END;
                                }
      { 189     ;2   ;Action    ;
                      CaptionML=ENU=Approvals;
                      Image=Approvals;
                      OnAction=VAR
                                 ApprovalEntries@1001 : Page 658;
                               BEGIN
                                 ApprovalEntries.Setfilters(DATABASE::"Sales Header","Document Type","No.");
                                 ApprovalEntries.RUN;
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 69      ;1   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=&Print;
                      Promoted=Yes;
                      Image=Print;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 DocPrint.PrintSalesHeader(Rec);
                               END;
                                }
      { 3       ;1   ;ActionGroup;
                      CaptionML=ENU=Release;
                      Image=ReleaseDoc }
      { 115     ;2   ;Action    ;
                      Name=Release;
                      ShortCutKey=Ctrl+F9;
                      CaptionML=ENU=Re&lease;
                      Image=ReleaseDoc;
                      OnAction=VAR
                                 ReleaseSalesDoc@1000 : Codeunit 414;
                               BEGIN
                                 ReleaseSalesDoc.PerformManualRelease(Rec);
                               END;
                                }
      { 116     ;2   ;Action    ;
                      CaptionML=ENU=Re&open;
                      Image=ReOpen;
                      OnAction=VAR
                                 ReleaseSalesDoc@1001 : Codeunit 414;
                               BEGIN
                                 ReleaseSalesDoc.PerformManualReopen(Rec);
                               END;
                                }
      { 137     ;2   ;Separator  }
      { 64      ;1   ;ActionGroup;
                      CaptionML=ENU=F&unctions;
                      Image=Action }
      { 65      ;2   ;Action    ;
                      CaptionML=ENU=Calculate &Invoice Discount;
                      Image=CalculateInvoiceDiscount;
                      OnAction=BEGIN
                                 ApproveCalcInvDisc;
                               END;
                                }
      { 168     ;2   ;Separator  }
      { 124     ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Get St&d. Cust. Sales Codes;
                      Image=CustomerCode;
                      OnAction=VAR
                                 StdCustSalesCode@1000 : Record 172;
                               BEGIN
                                 StdCustSalesCode.InsertSalesLines(Rec);
                               END;
                                }
      { 139     ;2   ;Separator  }
      { 66      ;2   ;Action    ;
                      Name=CopyDocument;
                      Ellipsis=Yes;
                      CaptionML=ENU=Copy Document;
                      Promoted=Yes;
                      Image=CopyDocument;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CopySalesDoc.SetSalesHeader(Rec);
                                 CopySalesDoc.RUNMODAL;
                                 CLEAR(CopySalesDoc);
                               END;
                                }
      { 165     ;2   ;Action    ;
                      Name=Archive Document;
                      CaptionML=ENU=Archi&ve Document;
                      Image=Archive;
                      OnAction=BEGIN
                                 ArchiveManagement.ArchiveSalesDocument(Rec);
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 141     ;2   ;Separator  }
      { 5       ;1   ;ActionGroup;
                      CaptionML=ENU=Create;
                      Image=NewCustomer }
      { 68      ;2   ;Action    ;
                      Name=Make Order;
                      CaptionML=ENU=Make &Order;
                      Promoted=Yes;
                      Image=MakeOrder;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 PurchaseHeader@1001 : Record 38;
                                 ApprovalMgt@1000 : Codeunit 439;
                               BEGIN
                                 IF ApprovalMgt.PrePostApprovalCheck(Rec,PurchaseHeader) THEN
                                   CODEUNIT.RUN(CODEUNIT::"Sales-Quote to Order (Yes/No)",Rec);
                               END;
                                }
      { 126     ;2   ;Action    ;
                      CaptionML=ENU=C&reate Customer;
                      Image=NewCustomer;
                      OnAction=BEGIN
                                 IF CheckCustomerCreated(FALSE) THEN
                                   CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 169     ;2   ;Action    ;
                      CaptionML=ENU=Create &To-do;
                      Image=NewToDo;
                      OnAction=BEGIN
                                 CreateTodo;
                               END;
                                }
      { 143     ;2   ;Separator  }
      { 7       ;1   ;ActionGroup;
                      CaptionML=ENU=Approval;
                      Image=Approval }
      { 190     ;2   ;Action    ;
                      CaptionML=ENU=Send A&pproval Request;
                      Image=SendApprovalRequest;
                      OnAction=VAR
                                 ApprovalMgt@1001 : Codeunit 439;
                               BEGIN
                                 IF ApprovalMgt.SendSalesApprovalRequest(Rec) THEN;
                               END;
                                }
      { 191     ;2   ;Action    ;
                      CaptionML=ENU=Cancel Approval Re&quest;
                      Image=Cancel;
                      OnAction=VAR
                                 ApprovalMgt@1001 : Codeunit 439;
                               BEGIN
                                 IF ApprovalMgt.CancelSalesApprovalRequest(Rec,TRUE,TRUE) THEN;
                               END;
                                }
      { 142     ;2   ;Separator  }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=ENU=General }

    { 2   ;2   ;Field     ;
                SourceExpr="No.";
                Importance=Promoted;
                OnAssistEdit=BEGIN
                               IF AssistEdit(xRec) THEN
                                 CurrPage.UPDATE;
                             END;
                              }

    { 4   ;2   ;Field     ;
                SourceExpr="Sell-to Customer No.";
                Importance=Promoted;
                Enabled="Sell-to Customer No.Enable";
                OnValidate=BEGIN
                             SelltoCustomerNoOnAfterValidat;
                           END;
                            }

    { 120 ;2   ;Field     ;
                SourceExpr="Sell-to Contact No.";
                OnValidate=BEGIN
                             SelltoContactNoOnAfterValidate;
                           END;

                QuickEntry=FALSE }

    { 127 ;2   ;Field     ;
                SourceExpr="Sell-to Customer Template Code";
                Importance=Additional;
                Enabled=SelltoCustomerTemplateCodeEnab;
                OnValidate=BEGIN
                             SelltoCustomerTemplateCodeOnAf;
                           END;
                            }

    { 6   ;2   ;Field     ;
                SourceExpr="Sell-to Customer Name";
                QuickEntry=FALSE }

    { 71  ;2   ;Field     ;
                SourceExpr="Sell-to Address";
                Importance=Additional }

    { 73  ;2   ;Field     ;
                SourceExpr="Sell-to Address 2";
                Importance=Additional }

    { 77  ;2   ;Field     ;
                SourceExpr="Sell-to Post Code";
                Importance=Additional }

    { 74  ;2   ;Field     ;
                SourceExpr="Sell-to City";
                QuickEntry=FALSE }

    { 8   ;2   ;Field     ;
                SourceExpr="Sell-to Contact";
                Importance=Additional }

    { 9   ;2   ;Field     ;
                Name=Communication;
                SourceExpr="Sell-to SipAddress";
                TableRelation=Contact;
                ControlAddIn=[LyncCommunicationControlAddIn;PublicKeyToken=48f3911b65e24838] }

    { 163 ;2   ;Field     ;
                SourceExpr="No. of Archived Versions";
                Importance=Additional;
                OnDrillDown=BEGIN
                              CurrPage.SAVERECORD;
                              COMMIT;
                              SalesHeaderArchive.SETRANGE("Document Type","Document Type"::Quote);
                              SalesHeaderArchive.SETRANGE("No.","No.");
                              SalesHeaderArchive.SETRANGE("Doc. No. Occurrence","Doc. No. Occurrence");
                              IF SalesHeaderArchive.GET("Document Type"::Quote,"No.","Doc. No. Occurrence","No. of Archived Versions") THEN ;
                              PAGE.RUNMODAL(PAGE::"Sales List Archive",SalesHeaderArchive);
                              CurrPage.UPDATE(FALSE);
                            END;
                             }

    { 12  ;2   ;Field     ;
                SourceExpr="Order Date";
                Importance=Promoted;
                QuickEntry=FALSE }

    { 15  ;2   ;Field     ;
                SourceExpr="Document Date";
                QuickEntry=FALSE }

    { 118 ;2   ;Field     ;
                SourceExpr="Requested Delivery Date" }

    { 10  ;2   ;Field     ;
                SourceExpr="Salesperson Code";
                OnValidate=BEGIN
                             SalespersonCodeOnAfterValidate;
                           END;

                QuickEntry=FALSE }

    { 103 ;2   ;Field     ;
                SourceExpr="Campaign No.";
                QuickEntry=FALSE }

    { 170 ;2   ;Field     ;
                SourceExpr="Opportunity No.";
                QuickEntry=FALSE }

    { 108 ;2   ;Field     ;
                SourceExpr="Responsibility Center";
                Importance=Additional }

    { 192 ;2   ;Field     ;
                SourceExpr="Assigned User ID";
                Importance=Additional }

    { 106 ;2   ;Field     ;
                SourceExpr=Status;
                Importance=Promoted;
                QuickEntry=FALSE }

    { 58  ;1   ;Part      ;
                Name=SalesLines;
                SubPageLink=Document No.=FIELD(No.);
                PagePartID=Page95 }

    { 1905885101;1;Group  ;
                CaptionML=ENU=Invoicing }

    { 16  ;2   ;Field     ;
                SourceExpr="Bill-to Customer No.";
                Importance=Promoted;
                Enabled="Bill-to Customer No.Enable";
                OnValidate=BEGIN
                             BilltoCustomerNoOnAfterValidat;
                           END;
                            }

    { 122 ;2   ;Field     ;
                SourceExpr="Bill-to Contact No." }

    { 166 ;2   ;Field     ;
                SourceExpr="Bill-to Customer Template Code";
                Importance=Additional;
                Enabled=BilltoCustomerTemplateCodeEnab;
                OnValidate=BEGIN
                             BilltoCustomerTemplateCodeOnAf;
                           END;
                            }

    { 18  ;2   ;Field     ;
                SourceExpr="Bill-to Name" }

    { 20  ;2   ;Field     ;
                SourceExpr="Bill-to Address";
                Importance=Additional }

    { 22  ;2   ;Field     ;
                SourceExpr="Bill-to Address 2";
                Importance=Additional }

    { 91  ;2   ;Field     ;
                SourceExpr="Bill-to Post Code";
                Importance=Additional }

    { 89  ;2   ;Field     ;
                SourceExpr="Bill-to City" }

    { 26  ;2   ;Field     ;
                SourceExpr="Bill-to Contact";
                Importance=Additional }

    { 80  ;2   ;Field     ;
                SourceExpr="Shortcut Dimension 1 Code";
                OnValidate=BEGIN
                             ShortcutDimension1CodeOnAfterV;
                           END;
                            }

    { 84  ;2   ;Field     ;
                SourceExpr="Shortcut Dimension 2 Code";
                OnValidate=BEGIN
                             ShortcutDimension2CodeOnAfterV;
                           END;
                            }

    { 28  ;2   ;Field     ;
                SourceExpr="Payment Terms Code";
                Importance=Promoted }

    { 30  ;2   ;Field     ;
                SourceExpr="Due Date";
                Importance=Promoted }

    { 32  ;2   ;Field     ;
                SourceExpr="Payment Discount %" }

    { 34  ;2   ;Field     ;
                SourceExpr="Pmt. Discount Date";
                Importance=Additional }

    { 90  ;2   ;Field     ;
                SourceExpr="Payment Method Code" }

    { 113 ;2   ;Field     ;
                SourceExpr="Prices Including VAT";
                OnValidate=BEGIN
                             PricesIncludingVATOnAfterValid;
                           END;
                            }

    { 187 ;2   ;Field     ;
                SourceExpr="VAT Bus. Posting Group" }

    { 1906801201;1;Group  ;
                CaptionML=ENU=Shipping }

    { 36  ;2   ;Field     ;
                SourceExpr="Ship-to Code";
                Importance=Promoted }

    { 38  ;2   ;Field     ;
                SourceExpr="Ship-to Name" }

    { 40  ;2   ;Field     ;
                SourceExpr="Ship-to Address";
                Importance=Additional }

    { 42  ;2   ;Field     ;
                SourceExpr="Ship-to Address 2";
                Importance=Additional }

    { 95  ;2   ;Field     ;
                SourceExpr="Ship-to Post Code";
                Importance=Additional }

    { 93  ;2   ;Field     ;
                SourceExpr="Ship-to City" }

    { 46  ;2   ;Field     ;
                SourceExpr="Ship-to Contact";
                Importance=Additional }

    { 86  ;2   ;Field     ;
                SourceExpr="Location Code";
                Importance=Promoted }

    { 48  ;2   ;Field     ;
                SourceExpr="Shipment Method Code" }

    { 50  ;2   ;Field     ;
                SourceExpr="Shipment Date";
                Importance=Promoted }

    { 1907468901;1;Group  ;
                CaptionML=ENU=Foreign Trade }

    { 97  ;2   ;Field     ;
                SourceExpr="Currency Code";
                Importance=Promoted;
                OnValidate=BEGIN
                             CurrencyCodeOnAfterValidate;
                           END;

                OnAssistEdit=BEGIN
                               CLEAR(ChangeExchangeRate);
                               ChangeExchangeRate.SetParameter("Currency Code","Currency Factor",WORKDATE);
                               IF ChangeExchangeRate.RUNMODAL = ACTION::OK THEN BEGIN
                                 VALIDATE("Currency Factor",ChangeExchangeRate.GetParameter);
                                 CurrPage.UPDATE;
                               END;
                               CLEAR(ChangeExchangeRate);
                             END;
                              }

    { 52  ;2   ;Field     ;
                SourceExpr="EU 3-Party Trade" }

    { 54  ;2   ;Field     ;
                SourceExpr="Transaction Type" }

    { 81  ;2   ;Field     ;
                SourceExpr="Transaction Specification" }

    { 56  ;2   ;Field     ;
                SourceExpr="Transport Method" }

    { 25  ;2   ;Field     ;
                SourceExpr="Exit Point" }

    { 45  ;2   ;Field     ;
                SourceExpr=Area }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1903720907;1;Part   ;
                SubPageLink=No.=FIELD(Sell-to Customer No.);
                PagePartID=Page9080;
                Visible=TRUE;
                PartType=Page }

    { 1907234507;1;Part   ;
                SubPageLink=No.=FIELD(Bill-to Customer No.);
                PagePartID=Page9081;
                Visible=FALSE;
                PartType=Page }

    { 1902018507;1;Part   ;
                SubPageLink=No.=FIELD(Bill-to Customer No.);
                PagePartID=Page9082;
                Visible=FALSE;
                PartType=Page }

    { 1900316107;1;Part   ;
                SubPageLink=No.=FIELD(Sell-to Customer No.);
                PagePartID=Page9084;
                Visible=FALSE;
                PartType=Page }

    { 1906127307;1;Part   ;
                SubPageLink=Document Type=FIELD(Document Type),
                            Document No.=FIELD(Document No.),
                            Line No.=FIELD(Line No.);
                PagePartID=Page9087;
                ProviderID=58;
                Visible=TRUE;
                PartType=Page }

    { 1901314507;1;Part   ;
                SubPageLink=No.=FIELD(No.);
                PagePartID=Page9089;
                ProviderID=58;
                Visible=FALSE;
                PartType=Page }

    { 1906354007;1;Part   ;
                SubPageLink=Table ID=CONST(36),
                            Document Type=FIELD(Document Type),
                            Document No.=FIELD(No.);
                PagePartID=Page9092;
                Visible=FALSE;
                PartType=Page }

    { 1907012907;1;Part   ;
                SubPageLink=No.=FIELD(No.);
                PagePartID=Page9108;
                ProviderID=58;
                Visible=FALSE;
                PartType=Page }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=TRUE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Unable to execute this function while in view only mode.';
      ChangeExchangeRate@1002 : Page 511;
      CopySalesDoc@1003 : Report 292;
      DocPrint@1004 : Codeunit 229;
      UserMgt@1005 : Codeunit 5700;
      ArchiveManagement@1007 : Codeunit 5063;
      SalesHeaderArchive@1006 : Record 5107;
      BilltoCustomerTemplateCodeEnab@19078724 : Boolean INDATASET;
      SelltoCustomerTemplateCodeEnab@19001802 : Boolean INDATASET;
      "Sell-to Customer No.Enable"@19037337 : Boolean INDATASET;
      "Bill-to Customer No.Enable"@19072970 : Boolean INDATASET;
      LyncAvailable@1001 : Boolean;

    PROCEDURE UpdateAllowed@1() : Boolean;
    BEGIN
      IF CurrPage.EDITABLE = FALSE THEN BEGIN
        MESSAGE(Text000);
        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ActivateFields@2();
    BEGIN
      BilltoCustomerTemplateCodeEnab := "Bill-to Customer No." = '';
      SelltoCustomerTemplateCodeEnab := "Sell-to Customer No." = '';
      "Sell-to Customer No.Enable" := "Sell-to Customer Template Code" = '';
      "Bill-to Customer No.Enable" := "Bill-to Customer Template Code" = '';
    END;

    LOCAL PROCEDURE ApproveCalcInvDisc@3();
    BEGIN
      CurrPage.SalesLines.PAGE.ApproveCalcInvDisc;
    END;

    LOCAL PROCEDURE SelltoCustomerNoOnAfterValidat@19034782();
    BEGIN
      ClearSellToFilter;
      ActivateFields;
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE SalespersonCodeOnAfterValidate@19011896();
    BEGIN
      CurrPage.SalesLines.PAGE.UpdateForm(TRUE);
    END;

    LOCAL PROCEDURE SelltoContactNoOnAfterValidate@19015826();
    BEGIN
      ClearSellToFilter;
      ActivateFields;
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE SelltoCustomerTemplateCodeOnAf@19025930();
    BEGIN
      ActivateFields;
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE BilltoCustomerNoOnAfterValidat@19044114();
    BEGIN
      ActivateFields;
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ShortcutDimension1CodeOnAfterV@19029405();
    BEGIN
      CurrPage.SalesLines.PAGE.UpdateForm(TRUE);
    END;

    LOCAL PROCEDURE ShortcutDimension2CodeOnAfterV@19008725();
    BEGIN
      CurrPage.SalesLines.PAGE.UpdateForm(TRUE);
    END;

    LOCAL PROCEDURE PricesIncludingVATOnAfterValid@19009096();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE BilltoCustomerTemplateCodeOnAf@19070097();
    BEGIN
      ActivateFields;
      CurrPage.UPDATE;
    END;

    PROCEDURE ClearSellToFilter@1100();
    BEGIN
      IF GETFILTER("Sell-to Customer No.") = xRec."Sell-to Customer No." THEN
        IF "Sell-to Customer No." <> xRec."Sell-to Customer No." THEN
          SETRANGE("Sell-to Customer No.");
      IF GETFILTER("Sell-to Contact No.") = xRec."Sell-to Contact No." THEN
        IF "Sell-to Contact No." <> xRec."Sell-to Contact No." THEN
          SETRANGE("Sell-to Contact No.");
    END;

    LOCAL PROCEDURE CurrencyCodeOnAfterValidate@19068298();
    BEGIN
      CurrPage.SalesLines.PAGE.UpdateForm(TRUE);
    END;

    PROCEDURE BuildSearchCandidates@5(VAR searchCandidates@1000 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.StringCollection");
    BEGIN
      IF (Rec."Sell-to Customer Name" <> '') THEN BEGIN
        searchCandidates.Add(Rec."Sell-to Customer Name");
      END;

      IF (Rec."Sell-to Customer Name 2" <> '') THEN BEGIN
        searchCandidates.Add(Rec."Sell-to Customer Name 2");
      END;

      IF (Rec."Sell-to Contact" <> '') THEN BEGIN
        searchCandidates.Add(Rec."Sell-to Contact");
      END;
    END;

    EVENT Communication@-9::AddInReady@5();
    BEGIN
      LyncAvailable := TRUE;
    END;

    BEGIN
    END.
  }
}

OBJECT Page 42 Sales Order
{
  OBJECT-PROPERTIES
  {
    Date=10/16/12;
    Time=[ 2:41:10 PM];
    Modified=Yes;
    Version List=NAVW17.00,Lync;
  }
  PROPERTIES
  {
    CaptionML=ENU=Sales Order;
    SourceTable=Table36;
    SourceTableView=WHERE(Document Type=FILTER(Order));
    PageType=Document;
    RefreshOnActivate=Yes;
    OnOpenPage=BEGIN
                 IF UserMgt.GetSalesFilter <> '' THEN BEGIN
                   FILTERGROUP(2);
                   SETRANGE("Responsibility Center",UserMgt.GetSalesFilter);
                   FILTERGROUP(0);
                 END;

                 SETRANGE("Date Filter",0D,WORKDATE - 1);
               END;

    OnAfterGetRecord=VAR
                       searchCandidates@1000 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.StringCollection";
                     BEGIN
                       JobQueueVisible := "Job Queue Status" = "Job Queue Status"::"Scheduled for Posting";

                       IF (LyncAvailable) THEN
                       BEGIN
                         CurrPage.Communication.AllowSearch := TRUE;
                         searchCandidates := searchCandidates.StringCollection();
                         BuildSearchCandidates(searchCandidates);
                         CurrPage.Communication.SetSearchCandidates(searchCandidates);
                       END;
                     END;

    OnNewRecord=BEGIN
                  "Responsibility Center" := UserMgt.GetSalesFilter;
                END;

    OnInsertRecord=BEGIN
                     CheckCreditMaxBeforeInsert;
                   END;

    OnDeleteRecord=BEGIN
                     CurrPage.SAVERECORD;
                     EXIT(ConfirmDeletion);
                   END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 59      ;1   ;ActionGroup;
                      CaptionML=ENU=O&rder;
                      Image=Order }
      { 61      ;2   ;Action    ;
                      Name=Statistics;
                      ShortCutKey=F7;
                      CaptionML=ENU=Statistics;
                      Promoted=Yes;
                      Image=Statistics;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CalcInvDiscForHeader;
                                 COMMIT;
                                 PAGE.RUNMODAL(PAGE::"Sales Order Statistics",Rec);
                               END;
                                }
      { 62      ;2   ;Action    ;
                      ShortCutKey=Shift+F7;
                      CaptionML=ENU=Card;
                      RunObject=Page 21;
                      RunPageLink=No.=FIELD(Sell-to Customer No.);
                      Image=EditLines }
      { 122     ;2   ;Action    ;
                      Name=Dimensions;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=ENU=Dimensions;
                      Image=Dimensions;
                      OnAction=BEGIN
                                 ShowDocDim;
                                 CurrPage.SAVERECORD;
                               END;
                                }
      { 78      ;2   ;Action    ;
                      CaptionML=ENU=A&pprovals;
                      Image=Approvals;
                      OnAction=VAR
                                 ApprovalEntries@1001 : Page 658;
                               BEGIN
                                 ApprovalEntries.Setfilters(DATABASE::"Sales Header","Document Type","No.");
                                 ApprovalEntries.RUN;
                               END;
                                }
      { 63      ;2   ;Action    ;
                      CaptionML=ENU=Co&mments;
                      RunObject=Page 67;
                      RunPageLink=Document Type=FIELD(Document Type),
                                  No.=FIELD(No.),
                                  Document Line No.=CONST(0);
                      Image=ViewComments }
      { 259     ;2   ;Action    ;
                      CaptionML=ENU=Credit Cards Transaction Lo&g Entries;
                      RunObject=Page 829;
                      RunPageLink=Document No.=FIELD(No.),
                                  Customer No.=FIELD(Bill-to Customer No.);
                      Image=CreditCardLog }
      { 11      ;2   ;Action    ;
                      CaptionML=ENU=Assembly Orders;
                      Image=AssemblyOrder;
                      OnAction=VAR
                                 AssembleToOrderLink@1000 : Record 904;
                               BEGIN
                                 AssembleToOrderLink.ShowAsmOrders(Rec);
                               END;
                                }
      { 13      ;1   ;ActionGroup;
                      CaptionML=ENU=Documents;
                      Image=Documents }
      { 64      ;2   ;Action    ;
                      CaptionML=ENU=S&hipments;
                      RunObject=Page 142;
                      RunPageView=SORTING(Order No.);
                      RunPageLink=Order No.=FIELD(No.);
                      Image=Shipment }
      { 65      ;2   ;Action    ;
                      CaptionML=ENU=Invoices;
                      RunObject=Page 143;
                      RunPageView=SORTING(Order No.);
                      RunPageLink=Order No.=FIELD(No.);
                      Image=Invoice }
      { 15      ;1   ;ActionGroup;
                      CaptionML=ENU=Warehouse;
                      Image=Warehouse }
      { 150     ;2   ;Action    ;
                      CaptionML=ENU=In&vt. Put-away/Pick Lines;
                      RunObject=Page 5774;
                      RunPageView=SORTING(Source Document,Source No.,Location Code);
                      RunPageLink=Source Document=CONST(Sales Order),
                                  Source No.=FIELD(No.);
                      Image=PickLines }
      { 168     ;2   ;Action    ;
                      CaptionML=ENU=Whse. Shipment Lines;
                      RunObject=Page 7341;
                      RunPageView=SORTING(Source Type,Source Subtype,Source No.,Source Line No.);
                      RunPageLink=Source Type=CONST(37),
                                  Source Subtype=FIELD(Document Type),
                                  Source No.=FIELD(No.);
                      Image=ShipmentLines }
      { 17      ;1   ;ActionGroup;
                      CaptionML=ENU=Prepayment;
                      Image=Prepayment }
      { 234     ;2   ;Action    ;
                      CaptionML=ENU=Prepa&yment Invoices;
                      RunObject=Page 143;
                      RunPageView=SORTING(Prepayment Order No.);
                      RunPageLink=Prepayment Order No.=FIELD(No.);
                      Image=PrepaymentInvoice }
      { 235     ;2   ;Action    ;
                      CaptionML=ENU=Prepayment Credi&t Memos;
                      RunObject=Page 144;
                      RunPageView=SORTING(Prepayment Order No.);
                      RunPageLink=Prepayment Order No.=FIELD(No.);
                      Image=PrepaymentCreditMemo }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 21      ;1   ;ActionGroup;
                      CaptionML=ENU=Release;
                      Image=ReleaseDoc }
      { 133     ;2   ;Action    ;
                      Name=Release;
                      ShortCutKey=Ctrl+F9;
                      CaptionML=ENU=Re&lease;
                      Promoted=Yes;
                      Image=ReleaseDoc;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ReleaseSalesDoc@1000 : Codeunit 414;
                               BEGIN
                                 ReleaseSalesDoc.PerformManualRelease(Rec);
                               END;
                                }
      { 134     ;2   ;Action    ;
                      CaptionML=ENU=Re&open;
                      Promoted=Yes;
                      Image=ReOpen;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ReleaseSalesDoc@1001 : Codeunit 414;
                               BEGIN
                                 ReleaseSalesDoc.PerformManualReopen(Rec);
                               END;
                                }
      { 66      ;1   ;ActionGroup;
                      CaptionML=ENU=F&unctions;
                      Image=Action }
      { 67      ;2   ;Action    ;
                      CaptionML=ENU=Calculate &Invoice Discount;
                      Image=CalculateInvoiceDiscount;
                      OnAction=BEGIN
                                 ApproveCalcInvDisc;
                               END;
                                }
      { 167     ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Get St&d. Cust. Sales Codes;
                      Image=CustomerCode;
                      OnAction=VAR
                                 StdCustSalesCode@1000 : Record 172;
                               BEGIN
                                 StdCustSalesCode.InsertSalesLines(Rec);
                               END;
                                }
      { 68      ;2   ;Action    ;
                      Name=CopyDocument;
                      Ellipsis=Yes;
                      CaptionML=ENU=Copy Document;
                      Promoted=Yes;
                      Image=CopyDocument;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CopySalesDoc.SetSalesHeader(Rec);
                                 CopySalesDoc.RUNMODAL;
                                 CLEAR(CopySalesDoc);
                               END;
                                }
      { 154     ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Move Negative Lines;
                      Image=MoveNegativeLines;
                      OnAction=BEGIN
                                 CLEAR(MoveNegSalesLines);
                                 MoveNegSalesLines.SetSalesHeader(Rec);
                                 MoveNegSalesLines.RUNMODAL;
                                 MoveNegSalesLines.ShowDocument;
                               END;
                                }
      { 196     ;2   ;Action    ;
                      Name=Archive Document;
                      CaptionML=ENU=Archi&ve Document;
                      Image=Archive;
                      OnAction=BEGIN
                                 ArchiveManagement.ArchiveSalesDocument(Rec);
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 204     ;2   ;Action    ;
                      CaptionML=ENU=Send IC Sales Order Cnfmn.;
                      Image=IntercompanyOrder;
                      OnAction=VAR
                                 ICInOutboxMgt@1000 : Codeunit 427;
                                 ApprovalMgt@1003 : Codeunit 439;
                                 PurchaseHeader@1002 : Record 38;
                               BEGIN
                                 IF ApprovalMgt.PrePostApprovalCheck(Rec,PurchaseHeader) THEN
                                   ICInOutboxMgt.SendSalesDoc(Rec,FALSE);
                               END;
                                }
      { 23      ;1   ;ActionGroup;
                      CaptionML=ENU=Plan;
                      Image=Planning }
      { 197     ;2   ;Action    ;
                      CaptionML=ENU=Order &Promising;
                      Image=OrderPromising;
                      OnAction=VAR
                                 OrderPromisingLine@1000 : TEMPORARY Record 99000880;
                               BEGIN
                                 OrderPromisingLine.SETRANGE("Source Type","Document Type");
                                 OrderPromisingLine.SETRANGE("Source ID","No.");
                                 PAGE.RUNMODAL(PAGE::"Order Promising Lines",OrderPromisingLine);
                               END;
                                }
      { 248     ;2   ;Action    ;
                      CaptionML=ENU=Demand Overview;
                      Image=Forecast;
                      OnAction=VAR
                                 DemandOverview@1000 : Page 5830;
                               BEGIN
                                 DemandOverview.SetCalculationParameter(TRUE);
                                 DemandOverview.Initialize(0D,1,"No.",'','');
                                 DemandOverview.RUNMODAL;
                               END;
                                }
      { 121     ;2   ;Action    ;
                      CaptionML=ENU=Pla&nning;
                      Image=Planning;
                      OnAction=VAR
                                 SalesPlanForm@1001 : Page 99000883;
                               BEGIN
                                 SalesPlanForm.SetSalesOrder("No.");
                                 SalesPlanForm.RUNMODAL;
                               END;
                                }
      { 25      ;1   ;ActionGroup;
                      CaptionML=ENU=Request;
                      Image=SendApprovalRequest }
      { 250     ;2   ;Action    ;
                      CaptionML=ENU=Send A&pproval Request;
                      Image=SendApprovalRequest;
                      OnAction=VAR
                                 ApprovalMgt@1001 : Codeunit 439;
                               BEGIN
                                 IF ApprovalMgt.SendSalesApprovalRequest(Rec) THEN;
                               END;
                                }
      { 251     ;2   ;Action    ;
                      CaptionML=ENU=Cancel Approval Re&quest;
                      Image=Cancel;
                      OnAction=VAR
                                 ApprovalMgt@1001 : Codeunit 439;
                               BEGIN
                                 IF ApprovalMgt.CancelSalesApprovalRequest(Rec,TRUE,TRUE) THEN;
                               END;
                                }
      { 19      ;2   ;ActionGroup;
                      CaptionML=ENU=Authorize;
                      Image=AuthorizeCreditCard }
      { 256     ;3   ;Action    ;
                      CaptionML=ENU=Authorize;
                      Image=AuthorizeCreditCard;
                      OnAction=BEGIN
                                 Authorize;
                               END;
                                }
      { 257     ;3   ;Action    ;
                      CaptionML=ENU=Void A&uthorize;
                      Image=VoidCreditCard;
                      OnAction=BEGIN
                                 Void;
                               END;
                                }
      { 3       ;1   ;ActionGroup;
                      CaptionML=ENU=Warehouse;
                      Image=Warehouse }
      { 148     ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Create Inventor&y Put-away / Pick;
                      Promoted=Yes;
                      Image=CreateInventoryPickup;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CreateInvtPutAwayPick;

                                 IF NOT FIND('=><') THEN
                                   INIT;
                               END;
                                }
      { 149     ;2   ;Action    ;
                      CaptionML=ENU=Create &Whse. Shipment;
                      Image=NewShipment;
                      OnAction=VAR
                                 GetSourceDocOutbound@1001 : Codeunit 5752;
                               BEGIN
                                 GetSourceDocOutbound.CreateFromSalesOrder(Rec);

                                 IF NOT FIND('=><') THEN
                                   INIT;
                               END;
                                }
      { 73      ;1   ;ActionGroup;
                      CaptionML=ENU=P&osting;
                      Image=Post }
      { 75      ;2   ;Action    ;
                      Name=Post;
                      ShortCutKey=F9;
                      Ellipsis=Yes;
                      CaptionML=ENU=P&ost;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PostOrder;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Post(CODEUNIT::"Sales-Post (Yes/No)");
                               END;
                                }
      { 76      ;2   ;Action    ;
                      ShortCutKey=Shift+F9;
                      Ellipsis=Yes;
                      CaptionML=ENU=Post and &Print;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PostPrint;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Post(CODEUNIT::"Sales-Post + Print");
                               END;
                                }
      { 74      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Test Report;
                      Image=TestReport;
                      OnAction=BEGIN
                                 ReportPrint.PrintSalesHeader(Rec);
                               END;
                                }
      { 77      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Post &Batch;
                      Image=PostBatch;
                      OnAction=BEGIN
                                 REPORT.RUNMODAL(REPORT::"Batch Post Sales Orders",TRUE,TRUE,Rec);
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 7       ;2   ;Action    ;
                      CaptionML=ENU=Remove From Job Queue;
                      Visible=JobQueueVisible;
                      Image=RemoveLine;
                      OnAction=BEGIN
                                 CancelBackgroundPosting;
                               END;
                                }
      { 236     ;2   ;ActionGroup;
                      CaptionML=ENU=Prepa&yment;
                      Image=Prepayment }
      { 231     ;3   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Prepayment &Test Report;
                      Image=PrepaymentSimulation;
                      OnAction=BEGIN
                                 ReportPrint.PrintSalesHeaderPrepmt(Rec);
                               END;
                                }
      { 232     ;3   ;Action    ;
                      Name=PostPrepaymentInvoice;
                      Ellipsis=Yes;
                      CaptionML=ENU=Post Prepayment &Invoice;
                      Image=PrepaymentPost;
                      OnAction=VAR
                                 PurchaseHeader@1002 : Record 38;
                                 SalesPostYNPrepmt@1000 : Codeunit 443;
                               BEGIN
                                 IF ApprovalMgt.PrePostApprovalCheck(Rec,PurchaseHeader) THEN
                                   SalesPostYNPrepmt.PostPrepmtInvoiceYN(Rec,FALSE);
                               END;
                                }
      { 237     ;3   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Post and Print Prepmt. Invoic&e;
                      Image=PrepaymentPostPrint;
                      OnAction=VAR
                                 PurchaseHeader@1002 : Record 38;
                                 SalesPostYNPrepmt@1000 : Codeunit 443;
                               BEGIN
                                 IF ApprovalMgt.PrePostApprovalCheck(Rec,PurchaseHeader) THEN
                                   SalesPostYNPrepmt.PostPrepmtInvoiceYN(Rec,TRUE);
                               END;
                                }
      { 233     ;3   ;Action    ;
                      Name=PostPrepaymentCreditMemo;
                      Ellipsis=Yes;
                      CaptionML=ENU=Post Prepayment &Credit Memo;
                      Image=PrepaymentPost;
                      OnAction=VAR
                                 PurchaseHeader@1002 : Record 38;
                                 SalesPostYNPrepmt@1000 : Codeunit 443;
                               BEGIN
                                 IF ApprovalMgt.PrePostApprovalCheck(Rec,PurchaseHeader) THEN
                                   SalesPostYNPrepmt.PostPrepmtCrMemoYN(Rec,FALSE);
                               END;
                                }
      { 238     ;3   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Post and Print Prepmt. Cr. Mem&o;
                      Image=PrepaymentPostPrint;
                      OnAction=VAR
                                 PurchaseHeader@1002 : Record 38;
                                 SalesPostYNPrepmt@1000 : Codeunit 443;
                               BEGIN
                                 IF ApprovalMgt.PrePostApprovalCheck(Rec,PurchaseHeader) THEN
                                   SalesPostYNPrepmt.PostPrepmtCrMemoYN(Rec,TRUE);
                               END;
                                }
      { 223     ;1   ;ActionGroup;
                      CaptionML=ENU=&Print;
                      Image=Print }
      { 224     ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Order Confirmation;
                      Image=Print;
                      OnAction=BEGIN
                                 DocPrint.PrintSalesOrder(Rec,Usage::"Order Confirmation");
                               END;
                                }
      { 225     ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Work Order;
                      Image=Print;
                      OnAction=BEGIN
                                 DocPrint.PrintSalesOrder(Rec,Usage::"Work Order");
                               END;
                                }
      { 5       ;2   ;Action    ;
                      CaptionML=ENU=Pick Instruction;
                      Image=Print;
                      OnAction=BEGIN
                                 DocPrint.PrintSalesOrder(Rec,Usage::"Pick Instruction");
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=ENU=General }

    { 2   ;2   ;Field     ;
                SourceExpr="No.";
                Importance=Promoted;
                OnAssistEdit=BEGIN
                               IF AssistEdit(xRec) THEN
                                 CurrPage.UPDATE;
                             END;
                              }

    { 4   ;2   ;Field     ;
                SourceExpr="Sell-to Customer No.";
                Importance=Promoted;
                OnValidate=BEGIN
                             SelltoCustomerNoOnAfterValidat;
                           END;
                            }

    { 157 ;2   ;Field     ;
                SourceExpr="Sell-to Contact No.";
                Importance=Additional;
                OnValidate=BEGIN
                             IF GETFILTER("Sell-to Contact No.") = xRec."Sell-to Contact No." THEN
                               IF "Sell-to Contact No." <> xRec."Sell-to Contact No." THEN
                                 SETRANGE("Sell-to Contact No.");
                           END;
                            }

    { 6   ;2   ;Field     ;
                SourceExpr="Sell-to Customer Name";
                QuickEntry=FALSE }

    { 81  ;2   ;Field     ;
                SourceExpr="Sell-to Address";
                Importance=Additional }

    { 83  ;2   ;Field     ;
                SourceExpr="Sell-to Address 2";
                Importance=Additional }

    { 72  ;2   ;Field     ;
                SourceExpr="Sell-to Post Code";
                Importance=Additional }

    { 86  ;2   ;Field     ;
                SourceExpr="Sell-to City";
                QuickEntry=FALSE }

    { 8   ;2   ;Field     ;
                SourceExpr="Sell-to Contact";
                Importance=Additional }

    { 27  ;2   ;Field     ;
                Name=Communication;
                SourceExpr="Sell-to SipAddress";
                TableRelation=Contact;
                ControlAddIn=[LyncCommunicationControlAddIn;PublicKeyToken=48f3911b65e24838] }

    { 198 ;2   ;Field     ;
                SourceExpr="No. of Archived Versions";
                Importance=Additional }

    { 12  ;2   ;Field     ;
                SourceExpr="Posting Date";
                QuickEntry=FALSE }

    { 14  ;2   ;Field     ;
                SourceExpr="Order Date";
                Importance=Promoted;
                QuickEntry=FALSE }

    { 45  ;2   ;Field     ;
                SourceExpr="Document Date";
                QuickEntry=FALSE }

    { 135 ;2   ;Field     ;
                SourceExpr="Requested Delivery Date" }

    { 137 ;2   ;Field     ;
                SourceExpr="Promised Delivery Date";
                Importance=Additional }

    { 243 ;2   ;Field     ;
                SourceExpr="Quote No.";
                Importance=Additional }

    { 155 ;2   ;Field     ;
                SourceExpr="External Document No.";
                Importance=Promoted }

    { 10  ;2   ;Field     ;
                SourceExpr="Salesperson Code";
                OnValidate=BEGIN
                             SalespersonCodeOnAfterValidate;
                           END;

                QuickEntry=FALSE }

    { 1148;2   ;Field     ;
                SourceExpr="Campaign No.";
                Importance=Additional }

    { 245 ;2   ;Field     ;
                SourceExpr="Opportunity No.";
                Importance=Additional }

    { 124 ;2   ;Field     ;
                SourceExpr="Responsibility Center";
                Importance=Additional }

    { 241 ;2   ;Field     ;
                SourceExpr="Assigned User ID";
                Importance=Additional }

    { 9   ;2   ;Field     ;
                SourceExpr="Job Queue Status";
                Importance=Additional }

    { 129 ;2   ;Field     ;
                SourceExpr=Status;
                Importance=Promoted;
                QuickEntry=FALSE }

    { 58  ;1   ;Part      ;
                Name=SalesLines;
                SubPageLink=Document No.=FIELD(No.);
                PagePartID=Page46 }

    { 1905885101;1;Group  ;
                CaptionML=ENU=Invoicing }

    { 16  ;2   ;Field     ;
                SourceExpr="Bill-to Customer No.";
                Importance=Promoted;
                OnValidate=BEGIN
                             BilltoCustomerNoOnAfterValidat;
                           END;
                            }

    { 159 ;2   ;Field     ;
                SourceExpr="Bill-to Contact No.";
                Importance=Additional }

    { 18  ;2   ;Field     ;
                SourceExpr="Bill-to Name" }

    { 20  ;2   ;Field     ;
                SourceExpr="Bill-to Address";
                Importance=Additional }

    { 22  ;2   ;Field     ;
                SourceExpr="Bill-to Address 2";
                Importance=Additional }

    { 89  ;2   ;Field     ;
                SourceExpr="Bill-to Post Code";
                Importance=Additional }

    { 24  ;2   ;Field     ;
                SourceExpr="Bill-to City" }

    { 26  ;2   ;Field     ;
                SourceExpr="Bill-to Contact";
                Importance=Additional }

    { 84  ;2   ;Field     ;
                SourceExpr="Shortcut Dimension 1 Code";
                OnValidate=BEGIN
                             ShortcutDimension1CodeOnAfterV;
                           END;
                            }

    { 92  ;2   ;Field     ;
                SourceExpr="Shortcut Dimension 2 Code";
                OnValidate=BEGIN
                             ShortcutDimension2CodeOnAfterV;
                           END;
                            }

    { 28  ;2   ;Field     ;
                SourceExpr="Payment Terms Code";
                Importance=Promoted }

    { 30  ;2   ;Field     ;
                SourceExpr="Due Date";
                Importance=Promoted }

    { 32  ;2   ;Field     ;
                SourceExpr="Payment Discount %" }

    { 34  ;2   ;Field     ;
                SourceExpr="Pmt. Discount Date" }

    { 105 ;2   ;Field     ;
                SourceExpr="Payment Method Code" }

    { 131 ;2   ;Field     ;
                SourceExpr="Prices Including VAT";
                OnValidate=BEGIN
                             PricesIncludingVATOnAfterValid;
                           END;
                            }

    { 221 ;2   ;Field     ;
                SourceExpr="VAT Bus. Posting Group" }

    { 226 ;2   ;Field     ;
                SourceExpr="Credit Card No." }

    { 253 ;2   ;Field     ;
                CaptionML=ENU=Cr. Card Number (Last 4 Digits);
                SourceExpr=GetCreditcardNumber }

    { 1906801201;1;Group  ;
                CaptionML=ENU=Shipping }

    { 36  ;2   ;Field     ;
                SourceExpr="Ship-to Code";
                Importance=Promoted }

    { 38  ;2   ;Field     ;
                SourceExpr="Ship-to Name" }

    { 40  ;2   ;Field     ;
                SourceExpr="Ship-to Address";
                Importance=Additional }

    { 42  ;2   ;Field     ;
                SourceExpr="Ship-to Address 2";
                Importance=Additional }

    { 97  ;2   ;Field     ;
                SourceExpr="Ship-to Post Code";
                Importance=Promoted }

    { 44  ;2   ;Field     ;
                SourceExpr="Ship-to City" }

    { 46  ;2   ;Field     ;
                SourceExpr="Ship-to Contact";
                Importance=Additional }

    { 94  ;2   ;Field     ;
                SourceExpr="Location Code" }

    { 141 ;2   ;Field     ;
                SourceExpr="Outbound Whse. Handling Time";
                Importance=Additional }

    { 48  ;2   ;Field     ;
                SourceExpr="Shipment Method Code" }

    { 107 ;2   ;Field     ;
                SourceExpr="Shipping Agent Code";
                Importance=Additional }

    { 139 ;2   ;Field     ;
                SourceExpr="Shipping Agent Service Code";
                Importance=Additional }

    { 143 ;2   ;Field     ;
                SourceExpr="Shipping Time" }

    { 145 ;2   ;Field     ;
                SourceExpr="Late Order Shipping";
                Importance=Additional }

    { 109 ;2   ;Field     ;
                SourceExpr="Package Tracking No.";
                Importance=Additional }

    { 50  ;2   ;Field     ;
                SourceExpr="Shipment Date";
                Importance=Promoted }

    { 119 ;2   ;Field     ;
                SourceExpr="Shipping Advice";
                Importance=Promoted;
                OnValidate=BEGIN
                             IF "Shipping Advice" <> xRec."Shipping Advice" THEN
                               IF NOT CONFIRM(Text001,FALSE,FIELDCAPTION("Shipping Advice")) THEN
                                 ERROR(Text002);
                           END;
                            }

    { 1907468901;1;Group  ;
                CaptionML=ENU=Foreign Trade }

    { 111 ;2   ;Field     ;
                SourceExpr="Currency Code";
                Importance=Promoted;
                OnValidate=BEGIN
                             CurrencyCodeOnAfterValidate;
                           END;

                OnAssistEdit=BEGIN
                               CLEAR(ChangeExchangeRate);
                               IF "Posting Date" <> 0D THEN
                                 ChangeExchangeRate.SetParameter("Currency Code","Currency Factor","Posting Date")
                               ELSE
                                 ChangeExchangeRate.SetParameter("Currency Code","Currency Factor",WORKDATE);
                               IF ChangeExchangeRate.RUNMODAL = ACTION::OK THEN BEGIN
                                 VALIDATE("Currency Factor",ChangeExchangeRate.GetParameter);
                                 CurrPage.UPDATE;
                               END;
                               CLEAR(ChangeExchangeRate);
                             END;
                              }

    { 52  ;2   ;Field     ;
                SourceExpr="EU 3-Party Trade" }

    { 54  ;2   ;Field     ;
                SourceExpr="Transaction Type" }

    { 103 ;2   ;Field     ;
                SourceExpr="Transaction Specification" }

    { 56  ;2   ;Field     ;
                SourceExpr="Transport Method" }

    { 99  ;2   ;Field     ;
                SourceExpr="Exit Point" }

    { 101 ;2   ;Field     ;
                SourceExpr=Area }

    { 1900201301;1;Group  ;
                CaptionML=ENU=Prepayment }

    { 228 ;2   ;Field     ;
                SourceExpr="Prepayment %";
                Importance=Promoted;
                OnValidate=BEGIN
                             Prepayment37OnAfterValidate;
                           END;
                            }

    { 229 ;2   ;Field     ;
                SourceExpr="Compress Prepayment" }

    { 162 ;2   ;Field     ;
                SourceExpr="Prepmt. Payment Terms Code" }

    { 239 ;2   ;Field     ;
                SourceExpr="Prepayment Due Date";
                Importance=Promoted }

    { 164 ;2   ;Field     ;
                SourceExpr="Prepmt. Payment Discount %" }

    { 70  ;2   ;Field     ;
                SourceExpr="Prepmt. Pmt. Discount Date" }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1903720907;1;Part   ;
                SubPageLink=No.=FIELD(Sell-to Customer No.);
                PagePartID=Page9080;
                Visible=TRUE;
                PartType=Page }

    { 1902018507;1;Part   ;
                SubPageLink=No.=FIELD(Bill-to Customer No.);
                PagePartID=Page9082;
                Visible=FALSE;
                PartType=Page }

    { 1900316107;1;Part   ;
                SubPageLink=No.=FIELD(Sell-to Customer No.);
                PagePartID=Page9084;
                Visible=FALSE;
                PartType=Page }

    { 1906127307;1;Part   ;
                SubPageLink=Document Type=FIELD(Document Type),
                            Document No.=FIELD(Document No.),
                            Line No.=FIELD(Line No.);
                PagePartID=Page9087;
                ProviderID=58;
                Visible=TRUE;
                PartType=Page }

    { 1901314507;1;Part   ;
                SubPageLink=No.=FIELD(No.);
                PagePartID=Page9089;
                ProviderID=58;
                Visible=FALSE;
                PartType=Page }

    { 1906354007;1;Part   ;
                SubPageLink=Table ID=CONST(36),
                            Document Type=FIELD(Document Type),
                            Document No.=FIELD(No.);
                PagePartID=Page9092;
                Visible=FALSE;
                PartType=Page }

    { 1907012907;1;Part   ;
                SubPageLink=No.=FIELD(No.);
                PagePartID=Page9108;
                ProviderID=58;
                Visible=FALSE;
                PartType=Page }

    { 1901796907;1;Part   ;
                SubPageLink=No.=FIELD(No.);
                PagePartID=Page9109;
                ProviderID=58;
                Visible=FALSE;
                PartType=Page }

    { 1907234507;1;Part   ;
                SubPageLink=No.=FIELD(Bill-to Customer No.);
                PagePartID=Page9081;
                Visible=FALSE;
                PartType=Page }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=TRUE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Unable to execute this function while in view only mode.';
      CopySalesDoc@1001 : Report 292;
      MoveNegSalesLines@1007 : Report 6699;
      ApprovalMgt@1012 : Codeunit 439;
      ReportPrint@1002 : Codeunit 228;
      DocPrint@1003 : Codeunit 229;
      ArchiveManagement@1008 : Codeunit 5063;
      ChangeExchangeRate@1005 : Page 511;
      UserMgt@1006 : Codeunit 5700;
      Usage@1010 : 'Order Confirmation,Work Order,Pick Instruction';
      JobQueueVisible@1004 : Boolean INDATASET;
      Text001@1015 : TextConst 'ENU=Do you want to change %1 in all related records in the warehouse?';
      Text002@1011 : TextConst 'ENU=The update has been interrupted to respect the warning.';
      LyncAvailable@1009 : Boolean;

    LOCAL PROCEDURE Post@4(PostingCodeunitID@1000 : Integer);
    BEGIN
      SendToPosting(PostingCodeunitID);
      IF "Job Queue Status" = "Job Queue Status"::"Scheduled for Posting" THEN
        CurrPage.CLOSE;
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE UpdateAllowed@1() : Boolean;
    BEGIN
      IF CurrPage.EDITABLE = FALSE THEN
        ERROR(Text000);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ApproveCalcInvDisc@3();
    BEGIN
      CurrPage.SalesLines.PAGE.ApproveCalcInvDisc;
    END;

    LOCAL PROCEDURE SelltoCustomerNoOnAfterValidat@19034782();
    BEGIN
      IF GETFILTER("Sell-to Customer No.") = xRec."Sell-to Customer No." THEN
        IF "Sell-to Customer No." <> xRec."Sell-to Customer No." THEN
          SETRANGE("Sell-to Customer No.");
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE SalespersonCodeOnAfterValidate@19011896();
    BEGIN
      CurrPage.SalesLines.PAGE.UpdateForm(TRUE);
    END;

    LOCAL PROCEDURE BilltoCustomerNoOnAfterValidat@19044114();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ShortcutDimension1CodeOnAfterV@19029405();
    BEGIN
      CurrPage.SalesLines.PAGE.UpdateForm(TRUE);
    END;

    LOCAL PROCEDURE ShortcutDimension2CodeOnAfterV@19008725();
    BEGIN
      CurrPage.SalesLines.PAGE.UpdateForm(TRUE);
    END;

    LOCAL PROCEDURE PricesIncludingVATOnAfterValid@19009096();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE CurrencyCodeOnAfterValidate@19068298();
    BEGIN
      CurrPage.SalesLines.PAGE.UpdateForm(TRUE);
    END;

    LOCAL PROCEDURE Prepayment37OnAfterValidate@19040510();
    BEGIN
      CurrPage.UPDATE;
    END;

    PROCEDURE BuildSearchCandidates@2(VAR searchCandidates@1000 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.StringCollection");
    BEGIN
      IF (Rec."Sell-to Customer Name" <> '') THEN BEGIN
        searchCandidates.Add(Rec."Sell-to Customer Name");
      END;

      IF (Rec."Sell-to Customer Name 2" <> '') THEN BEGIN
        searchCandidates.Add(Rec."Sell-to Customer Name 2");
      END;

      IF (Rec."Sell-to Contact" <> '') THEN BEGIN
        searchCandidates.Add(Rec."Sell-to Contact");
      END;
    END;

    EVENT Communication@-27::AddInReady@5();
    BEGIN
      LyncAvailable := TRUE;
    END;

    BEGIN
    END.
  }
}

OBJECT Page 114 Item Vendor Catalog
{
  OBJECT-PROPERTIES
  {
    Date=10/10/12;
    Time=[ 3:02:24 AM];
    Modified=Yes;
    Version List=NAVW17.00,Lync;
  }
  PROPERTIES
  {
    CaptionML=ENU=Item Vendor Catalog;
    SourceTable=Table99;
    DataCaptionFields=Item No.;
    PageType=List;
    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 4       ;1   ;ActionGroup;
                      CaptionML=ENU=&Item Vendor;
                      Image=Item }
      { 5       ;2   ;Action    ;
                      CaptionML=ENU=Purch. &Prices;
                      RunObject=Page 7012;
                      RunPageView=SORTING(Item No.,Vendor No.);
                      RunPageLink=Item No.=FIELD(Item No.),
                                  Vendor No.=FIELD(Vendor No.);
                      Image=Price }
      { 6       ;2   ;Action    ;
                      CaptionML=ENU=Purch. Line &Discounts;
                      RunObject=Page 7014;
                      RunPageView=SORTING(Item No.,Vendor No.);
                      RunPageLink=Item No.=FIELD(Item No.),
                                  Vendor No.=FIELD(Vendor No.);
                      Image=LineDiscount }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 20  ;2   ;Field     ;
                SourceExpr="Item No.";
                Visible=FALSE }

    { 22  ;2   ;Field     ;
                SourceExpr="Variant Code";
                Visible=FALSE }

    { 2   ;2   ;Field     ;
                SourceExpr="Vendor No." }

    { 10  ;2   ;Field     ;
                SourceExpr="Vendor Item No." }

    { 8   ;2   ;Field     ;
                SourceExpr="Lead Time Calculation" }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 3   ;1   ;Part      ;
                SubPageLink=No.=FIELD(Vendor No.);
                PagePartID=Page9093;
                PartType=Page }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Page 5050 Contact Card
{
  OBJECT-PROPERTIES
  {
    Date=10/16/12;
    Time=[ 2:36:52 PM];
    Modified=Yes;
    Version List=NAVW17.00,Lync;
  }
  PROPERTIES
  {
    CaptionML=ENU=Contact Card;
    SourceTable=Table5050;
    PageType=ListPlus;
    OnInit=BEGIN
             NoofJobResponsibilitiesEnable := TRUE;
             OrganizationalLevelCodeEnable := TRUE;
             "Company NameEnable" := TRUE;
             "Company No.Enable" := TRUE;
             "VAT Registration No.Enable" := TRUE;
             "Currency CodeEnable" := TRUE;
             MapPointVisible := TRUE;
           END;

    OnOpenPage=VAR
                 MapMgt@1000 : Codeunit 802;
               BEGIN
                 IF NOT MapMgt.TestSetup THEN
                   MapPointVisible := FALSE;
               END;

    OnAfterGetRecord=VAR
                       searchCandidates@1000 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.StringCollection";
                     BEGIN
                       IF (LyncAvailable) THEN
                       BEGIN
                         CurrPage.Communication.AllowSearch := TRUE;
                         searchCandidates := searchCandidates.StringCollection();
                         BuildSearchCandidates(searchCandidates);
                         CurrPage.Communication.SetSearchCandidates(searchCandidates);
                       END;
                     END;

    OnAfterGetCurrRecord=BEGIN
                           xRec := Rec;
                           EnableFields;

                           IF Type = Type::Person THEN
                             IntegrationFindCustomerNo
                           ELSE
                             IntegrationCustomerNo := '';
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 76      ;1   ;ActionGroup;
                      CaptionML=ENU=C&ontact;
                      Image=ContactPerson }
      { 82      ;2   ;ActionGroup;
                      CaptionML=ENU=Comp&any;
                      Enabled=CompanyGroupEnabled;
                      Image=Company }
      { 85      ;3   ;Action    ;
                      CaptionML=ENU=Business Relations;
                      Image=BusinessRelation;
                      OnAction=VAR
                                 ContactBusinessRelationRec@1000 : Record 5054;
                               BEGIN
                                 TESTFIELD(Type,Type::Company);
                                 ContactBusinessRelationRec.SETRANGE("Contact No.","Company No.");
                                 PAGE.RUN(PAGE::"Contact Business Relations",ContactBusinessRelationRec);
                               END;
                                }
      { 83      ;3   ;Action    ;
                      CaptionML=ENU=Industry Groups;
                      Image=IndustryGroups;
                      OnAction=VAR
                                 ContactIndustryGroupRec@1001 : Record 5058;
                               BEGIN
                                 TESTFIELD(Type,Type::Company);
                                 ContactIndustryGroupRec.SETRANGE("Contact No.","Company No.");
                                 PAGE.RUN(PAGE::"Contact Industry Groups",ContactIndustryGroupRec);
                               END;
                                }
      { 84      ;3   ;Action    ;
                      CaptionML=ENU=Web Sources;
                      Image=Web;
                      OnAction=VAR
                                 ContactWebSourceRec@1001 : Record 5060;
                               BEGIN
                                 TESTFIELD(Type,Type::Company);
                                 ContactWebSourceRec.SETRANGE("Contact No.","Company No.");
                                 PAGE.RUN(PAGE::"Contact Web Sources",ContactWebSourceRec);
                               END;
                                }
      { 80      ;2   ;ActionGroup;
                      CaptionML=ENU=P&erson;
                      Enabled=PersonGroupEnabled;
                      Image=User }
      { 81      ;3   ;Action    ;
                      CaptionML=ENU=Job Responsibilities;
                      Image=Job;
                      OnAction=VAR
                                 ContJobResp@1001 : Record 5067;
                               BEGIN
                                 TESTFIELD(Type,Type::Person);
                                 ContJobResp.SETRANGE("Contact No.","No.");
                                 PAGE.RUNMODAL(PAGE::"Contact Job Responsibilities",ContJobResp);
                               END;
                                }
      { 87      ;2   ;Action    ;
                      CaptionML=ENU=Pro&files;
                      Image=Answers;
                      OnAction=VAR
                                 ProfileManagement@1001 : Codeunit 5059;
                               BEGIN
                                 ProfileManagement.ShowContactQuestionnaireCard(Rec,'',0);
                               END;
                                }
      { 89      ;2   ;Action    ;
                      CaptionML=ENU=&Picture;
                      RunObject=Page 5104;
                      RunPageLink=No.=FIELD(No.);
                      Image=Picture }
      { 90      ;2   ;Action    ;
                      CaptionML=ENU=Co&mments;
                      RunObject=Page 5072;
                      RunPageLink=Table Name=CONST(Contact),
                                  No.=FIELD(No.),
                                  Sub No.=CONST(0);
                      Image=ViewComments }
      { 91      ;2   ;ActionGroup;
                      CaptionML=ENU=Alternati&ve Address;
                      Image=Addresses }
      { 92      ;3   ;Action    ;
                      CaptionML=ENU=Card;
                      RunObject=Page 5057;
                      RunPageLink=Contact No.=FIELD(No.);
                      Image=EditLines }
      { 93      ;3   ;Action    ;
                      CaptionML=ENU=Date Ranges;
                      RunObject=Page 5059;
                      RunPageLink=Contact No.=FIELD(No.);
                      Image=DateRange }
      { 94      ;2   ;Separator ;
                      CaptionML=ENU="" }
      { 5       ;1   ;ActionGroup;
                      CaptionML=ENU=Related Information;
                      Image=Users }
      { 79      ;2   ;Action    ;
                      CaptionML=ENU=Relate&d Contacts;
                      RunObject=Page 5052;
                      RunPageLink=Company No.=FIELD(Company No.);
                      Image=Users }
      { 100     ;2   ;Action    ;
                      CaptionML=ENU=Segmen&ts;
                      RunObject=Page 5150;
                      RunPageView=SORTING(Contact No.,Segment No.);
                      RunPageLink=Contact Company No.=FIELD(Company No.),
                                  Contact No.=FILTER(<>''),
                                  Contact No.=FIELD(FILTER(Lookup Contact No.));
                      Image=Segment }
      { 86      ;2   ;Action    ;
                      CaptionML=ENU=Mailing &Groups;
                      RunObject=Page 5064;
                      RunPageLink=Contact No.=FIELD(No.);
                      Image=DistributionGroup }
      { 99      ;2   ;Action    ;
                      CaptionML=ENU=C&ustomer/Vendor/Bank Acc.;
                      Image=ContactReference;
                      OnAction=BEGIN
                                 ShowCustVendBank;
                               END;
                                }
      { 63      ;2   ;Action    ;
                      CaptionML=ENU=Online Map;
                      Image=Map;
                      OnAction=BEGIN
                                 DisplayMap;
                               END;
                                }
      { 62      ;2   ;Separator  }
      { 7       ;1   ;ActionGroup;
                      CaptionML=ENU=Tasks;
                      Image=Task }
      { 96      ;2   ;Action    ;
                      CaptionML=ENU=T&o-dos;
                      RunObject=Page 5096;
                      RunPageView=SORTING(Contact Company No.,Date,Contact No.,Closed);
                      RunPageLink=Contact Company No.=FIELD(FILTER(Company No.)),
                                  Contact No.=FIELD(FILTER(No.)),
                                  System To-do Type=FILTER(Contact Attendee);
                      Image=TaskList }
      { 3       ;2   ;Action    ;
                      CaptionML=ENU=Oppo&rtunities;
                      RunObject=Page 5123;
                      RunPageView=SORTING(Contact Company No.,Contact No.);
                      RunPageLink=Contact Company No.=FIELD(Company No.),
                                  Contact No.=FILTER(<>''),
                                  Contact No.=FIELD(FILTER(Lookup Contact No.));
                      Image=OpportunityList }
      { 98      ;2   ;Separator ;
                      CaptionML=ENU="" }
      { 9       ;1   ;ActionGroup;
                      CaptionML=ENU=Documents;
                      Image=Documents }
      { 116     ;2   ;Action    ;
                      CaptionML=ENU=Sales &Quotes;
                      RunObject=Page 9300;
                      RunPageView=SORTING(Document Type,Sell-to Contact No.);
                      RunPageLink=Sell-to Contact No.=FIELD(No.);
                      Promoted=Yes;
                      Image=Quote;
                      PromotedCategory=Process }
      { 119     ;2   ;Separator  }
      { 11      ;1   ;ActionGroup;
                      CaptionML=ENU=History;
                      Image=History }
      { 149     ;2   ;Action    ;
                      CaptionML=ENU=Postponed &Interactions;
                      RunObject=Page 5082;
                      RunPageView=SORTING(Contact Company No.,Date,Contact No.,Canceled,Initiated By,Attempt Failed);
                      RunPageLink=Contact Company No.=FIELD(Company No.),
                                  Contact No.=FILTER(<>''),
                                  Contact No.=FIELD(FILTER(Lookup Contact No.));
                      Image=PostponedInteractions }
      { 95      ;2   ;Action    ;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=ENU=Interaction Log E&ntries;
                      RunObject=Page 5076;
                      RunPageView=SORTING(Contact Company No.,Date,Contact No.,Canceled,Initiated By,Attempt Failed);
                      RunPageLink=Contact Company No.=FIELD(Company No.),
                                  Contact No.=FILTER(<>''),
                                  Contact No.=FIELD(FILTER(Lookup Contact No.));
                      Image=InteractionLog }
      { 88      ;2   ;Action    ;
                      ShortCutKey=F7;
                      CaptionML=ENU=Statistics;
                      RunObject=Page 5053;
                      RunPageLink=No.=FIELD(No.);
                      Promoted=Yes;
                      Image=Statistics;
                      PromotedCategory=Process }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 75      ;1   ;ActionGroup;
                      CaptionML=ENU=F&unctions;
                      Image=Action }
      { 102     ;2   ;Action    ;
                      CaptionML=ENU=Launch &Web Source;
                      Image=LaunchWeb;
                      OnAction=VAR
                                 ContactWebSource@1001 : Record 5060;
                               BEGIN
                                 ContactWebSource.SETRANGE("Contact No.","Company No.");
                                 IF PAGE.RUNMODAL(PAGE::"Web Source Launch",ContactWebSource) = ACTION::LookupOK THEN
                                   ContactWebSource.Launch;
                               END;
                                }
      { 103     ;2   ;Action    ;
                      CaptionML=ENU=Print Cover &Sheet;
                      Image=PrintCover;
                      OnAction=VAR
                                 Cont@1001 : Record 5050;
                               BEGIN
                                 Cont := Rec;
                                 Cont.SETRECFILTER;
                                 REPORT.RUN(REPORT::"Contact - Cover Sheet",TRUE,FALSE,Cont);
                               END;
                                }
      { 105     ;2   ;ActionGroup;
                      CaptionML=ENU=Create as;
                      Image=CustomerContact }
      { 106     ;3   ;Action    ;
                      CaptionML=ENU=Customer;
                      Image=Customer;
                      OnAction=BEGIN
                                 CreateCustomer(ChooseCustomerTemplate);
                               END;
                                }
      { 107     ;3   ;Action    ;
                      CaptionML=ENU=Vendor;
                      Image=Vendor;
                      OnAction=BEGIN
                                 CreateVendor;
                               END;
                                }
      { 108     ;3   ;Action    ;
                      CaptionML=ENU=Bank;
                      Image=Bank;
                      OnAction=BEGIN
                                 CreateBankAccount;
                               END;
                                }
      { 109     ;2   ;ActionGroup;
                      CaptionML=ENU=Link with existing;
                      Image=Links }
      { 110     ;3   ;Action    ;
                      CaptionML=ENU=Customer;
                      Image=Customer;
                      OnAction=BEGIN
                                 CreateCustomerLink;
                               END;
                                }
      { 111     ;3   ;Action    ;
                      CaptionML=ENU=Vendor;
                      Image=Vendor;
                      OnAction=BEGIN
                                 CreateVendorLink;
                               END;
                                }
      { 112     ;3   ;Action    ;
                      CaptionML=ENU=Bank;
                      Image=Bank;
                      OnAction=BEGIN
                                 CreateBankAccountLink;
                               END;
                                }
      { 152     ;2   ;Separator  }
      { 153     ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=ENU=Apply Template;
                      Promoted=Yes;
                      Image=ApplyTemplate;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ConfigTemplateMgt@1000 : Codeunit 8612;
                                 RecRef@1001 : RecordRef;
                               BEGIN
                                 RecRef.GETTABLE(Rec);
                                 ConfigTemplateMgt.UpdateFromTemplateSelection(RecRef);
                               END;
                                }
      { 77      ;1   ;Action    ;
                      CaptionML=ENU=Create &Interact;
                      Promoted=Yes;
                      Image=CreateInteraction;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CreateInteraction;
                               END;
                                }
      { 1900000006;0 ;ActionContainer;
                      ActionContainerType=Reports }
      { 1907415106;1 ;Action    ;
                      CaptionML=ENU=Contact Cover Sheet;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Report;
                      OnAction=BEGIN
                                 Cont := Rec;
                                 Cont.SETRECFILTER;
                                 REPORT.RUN(REPORT::"Contact - Cover Sheet",TRUE,FALSE,Cont);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=ENU=General }

    { 2   ;2   ;Field     ;
                SourceExpr="No.";
                OnAssistEdit=BEGIN
                               IF AssistEdit(xRec) THEN
                                 CurrPage.UPDATE;
                             END;
                              }

    { 4   ;2   ;Field     ;
                SourceExpr=Type;
                OnValidate=BEGIN
                             TypeOnAfterValidate;
                           END;
                            }

    { 6   ;2   ;Field     ;
                SourceExpr="Company No.";
                Enabled="Company No.Enable" }

    { 8   ;2   ;Field     ;
                AssistEdit=Yes;
                SourceExpr="Company Name";
                Enabled="Company NameEnable";
                OnAssistEdit=BEGIN
                               Cont.SETRANGE("No.","Company No.");
                               CLEAR(CompanyDetails);
                               CompanyDetails.SETTABLEVIEW(Cont);
                               CompanyDetails.SETRECORD(Cont);
                               IF Type = Type::Person THEN
                                 CompanyDetails.EDITABLE := FALSE;
                               CompanyDetails.RUNMODAL;
                             END;
                              }

    { 125 ;2   ;Field     ;
                CaptionML=ENU=Integration Customer No.;
                SourceExpr=IntegrationCustomerNo;
                Visible=FALSE;
                OnValidate=VAR
                             Customer@1000 : Record 18;
                             ContactBusinessRelation@1001 : Record 5054;
                           BEGIN
                             IF NOT (IntegrationCustomerNo = '') THEN BEGIN
                               Customer.GET(IntegrationCustomerNo);
                               ContactBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                               ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Customer);
                               ContactBusinessRelation.SETRANGE("No.",Customer."No.");
                               IF ContactBusinessRelation.FINDFIRST THEN
                                 VALIDATE("Company No.",ContactBusinessRelation."Contact No.");
                             END ELSE
                               VALIDATE("Company No.",'');
                           END;
                            }

    { 10  ;2   ;Field     ;
                AssistEdit=Yes;
                SourceExpr=Name;
                OnAssistEdit=BEGIN
                               MODIFY;
                               COMMIT;
                               Cont.SETRANGE("No.","No.");
                               IF Type = Type::Person THEN BEGIN
                                 CLEAR(NameDetails);
                                 NameDetails.SETTABLEVIEW(Cont);
                                 NameDetails.SETRECORD(Cont);
                                 NameDetails.RUNMODAL;
                               END ELSE BEGIN
                                 CLEAR(CompanyDetails);
                                 CompanyDetails.SETTABLEVIEW(Cont);
                                 CompanyDetails.SETRECORD(Cont);
                                 CompanyDetails.RUNMODAL;
                               END;
                               GET("No.");
                               CurrPage.UPDATE;
                             END;
                              }

    { 12  ;2   ;Field     ;
                SourceExpr=Address }

    { 14  ;2   ;Field     ;
                SourceExpr="Address 2" }

    { 16  ;2   ;Field     ;
                SourceExpr="Post Code" }

    { 34  ;2   ;Field     ;
                SourceExpr=City }

    { 18  ;2   ;Field     ;
                SourceExpr="Country/Region Code" }

    { 20  ;2   ;Field     ;
                SourceExpr="Search Name" }

    { 22  ;2   ;Field     ;
                SourceExpr="Phone No." }

    { 24  ;2   ;Field     ;
                SourceExpr="Salesperson Code" }

    { 117 ;2   ;Field     ;
                SourceExpr="Salutation Code" }

    { 26  ;2   ;Field     ;
                SourceExpr="Last Date Modified" }

    { 28  ;2   ;Field     ;
                SourceExpr="Date of Last Interaction";
                OnDrillDown=VAR
                              InteractionLogEntry@1000 : Record 5065;
                            BEGIN
                              InteractionLogEntry.SETCURRENTKEY("Contact Company No.",Date,"Contact No.",Canceled,"Initiated By","Attempt Failed");
                              InteractionLogEntry.SETRANGE("Contact Company No.","Company No.");
                              InteractionLogEntry.SETFILTER("Contact No.","Lookup Contact No.");
                              InteractionLogEntry.SETRANGE("Attempt Failed",FALSE);
                              IF InteractionLogEntry.FINDLAST THEN
                                PAGE.RUN(0,InteractionLogEntry);
                            END;
                             }

    { 30  ;2   ;Field     ;
                SourceExpr="Last Date Attempted";
                OnDrillDown=VAR
                              InteractionLogEntry@1000 : Record 5065;
                            BEGIN
                              InteractionLogEntry.SETCURRENTKEY("Contact Company No.",Date,"Contact No.",Canceled,"Initiated By","Attempt Failed");
                              InteractionLogEntry.SETRANGE("Contact Company No.","Company No.");
                              InteractionLogEntry.SETFILTER("Contact No.","Lookup Contact No.");
                              InteractionLogEntry.SETRANGE("Initiated By",InteractionLogEntry."Initiated By"::Us);
                              IF InteractionLogEntry.FINDLAST THEN
                                PAGE.RUN(0,InteractionLogEntry);
                            END;
                             }

    { 32  ;2   ;Field     ;
                SourceExpr="Next To-do Date" }

    { 72  ;1   ;Part      ;
                SubPageLink=Contact No.=FIELD(No.);
                PagePartID=Page5051 }

    { 1902768601;1;Group  ;
                CaptionML=ENU=Communication }

    { 35  ;2   ;Field     ;
                Name=Phone No.2;
                SourceExpr="Phone No." }

    { 36  ;2   ;Field     ;
                SourceExpr="Mobile Phone No." }

    { 38  ;2   ;Field     ;
                SourceExpr="Fax No." }

    { 40  ;2   ;Field     ;
                SourceExpr="Telex No." }

    { 42  ;2   ;Field     ;
                SourceExpr=Pager }

    { 44  ;2   ;Field     ;
                SourceExpr="Telex Answer Back" }

    { 46  ;2   ;Field     ;
                SourceExpr="E-Mail" }

    { 13  ;2   ;Field     ;
                Name=Communication;
                SourceExpr=SipAddress;
                ControlAddIn=[LyncCommunicationControlAddIn;PublicKeyToken=48f3911b65e24838] }

    { 48  ;2   ;Field     ;
                SourceExpr="Home Page" }

    { 130 ;2   ;Field     ;
                SourceExpr="Language Code" }

    { 128 ;2   ;Field     ;
                Name=Salutation Code2;
                SourceExpr="Salutation Code" }

    { 126 ;2   ;Field     ;
                SourceExpr="Correspondence Type" }

    { 101 ;2   ;Field     ;
                SourceExpr="First Name";
                Visible=FALSE }

    { 121 ;2   ;Field     ;
                SourceExpr="Middle Name";
                Visible=FALSE }

    { 123 ;2   ;Field     ;
                SourceExpr=Surname;
                Visible=FALSE }

    { 1904829601;1;Group  ;
                CaptionML=ENU=Segmentation }

    { 50  ;2   ;Field     ;
                SourceExpr="No. of Mailing Groups";
                OnDrillDown=VAR
                              ContMailingGrp@1001 : Record 5056;
                            BEGIN
                              CurrPage.SAVERECORD;
                              COMMIT;
                              ContMailingGrp.SETRANGE("Contact No.","No.");
                              PAGE.RUNMODAL(PAGE::"Contact Mailing Groups",ContMailingGrp);
                              CurrPage.UPDATE(FALSE);
                            END;
                             }

    { 52  ;2   ;Field     ;
                SourceExpr="No. of Business Relations";
                OnDrillDown=VAR
                              ContBusRel@1001 : Record 5054;
                            BEGIN
                              CurrPage.SAVERECORD;
                              COMMIT;
                              ContBusRel.SETRANGE("Contact No.","Company No.");
                              PAGE.RUNMODAL(PAGE::"Contact Business Relations",ContBusRel);
                              CurrPage.UPDATE(FALSE);
                            END;
                             }

    { 54  ;2   ;Field     ;
                SourceExpr="No. of Industry Groups";
                OnDrillDown=VAR
                              ContIndustGrp@1001 : Record 5058;
                            BEGIN
                              CurrPage.SAVERECORD;
                              COMMIT;
                              ContIndustGrp.SETRANGE("Contact No.","Company No.");
                              PAGE.RUNMODAL(PAGE::"Contact Industry Groups",ContIndustGrp);
                              CurrPage.UPDATE(FALSE);
                            END;
                             }

    { 56  ;2   ;Field     ;
                SourceExpr="No. of Job Responsibilities";
                Enabled=NoofJobResponsibilitiesEnable;
                OnDrillDown=VAR
                              ContJobResp@1001 : Record 5067;
                            BEGIN
                              CurrPage.SAVERECORD;
                              COMMIT;
                              ContJobResp.SETRANGE("Contact No.","No.");
                              PAGE.RUNMODAL(PAGE::"Contact Job Responsibilities",ContJobResp);
                              CurrPage.UPDATE(FALSE);
                            END;
                             }

    { 58  ;2   ;Field     ;
                SourceExpr="Organizational Level Code";
                Enabled=OrganizationalLevelCodeEnable }

    { 60  ;2   ;Field     ;
                SourceExpr="Exclude from Segment" }

    { 1907468901;1;Group  ;
                CaptionML=ENU=Foreign Trade }

    { 64  ;2   ;Field     ;
                SourceExpr="Currency Code";
                Enabled="Currency CodeEnable" }

    { 68  ;2   ;Field     ;
                SourceExpr="Territory Code" }

    { 66  ;2   ;Field     ;
                SourceExpr="VAT Registration No.";
                Enabled="VAT Registration No.Enable" }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Visible=TRUE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=TRUE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      Cont@1000 : Record 5050;
      CompanyDetails@1001 : Page 5054;
      NameDetails@1002 : Page 5055;
      IntegrationCustomerNo@1003 : Code[20];
      MapPointVisible@19022708 : Boolean INDATASET;
      "Currency CodeEnable"@19025310 : Boolean INDATASET;
      "VAT Registration No.Enable"@19054634 : Boolean INDATASET;
      "Company No.Enable"@19064179 : Boolean INDATASET;
      "Company NameEnable"@19044404 : Boolean INDATASET;
      OrganizationalLevelCodeEnable@19070485 : Boolean INDATASET;
      NoofJobResponsibilitiesEnable@19004457 : Boolean INDATASET;
      CompanyGroupEnabled@1004 : Boolean;
      PersonGroupEnabled@1005 : Boolean;
      LyncAvailable@1006 : Boolean;

    LOCAL PROCEDURE EnableFields@1();
    BEGIN
      CompanyGroupEnabled := Type = Type::Company;
      PersonGroupEnabled := Type = Type::Person;
      "Currency CodeEnable" := Type = Type::Company;
      "VAT Registration No.Enable" := Type = Type::Company;
      "Company No.Enable" := Type = Type::Person;
      "Company NameEnable" := Type = Type::Person;
      OrganizationalLevelCodeEnable := Type = Type::Person;
      NoofJobResponsibilitiesEnable := Type = Type::Person;
    END;

    PROCEDURE IntegrationFindCustomerNo@2();
    VAR
      ContactBusinessRelation@1000 : Record 5054;
    BEGIN
      ContactBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Customer);
      ContactBusinessRelation.SETRANGE("Contact No.","Company No.");
      IF ContactBusinessRelation.FINDFIRST THEN BEGIN
        IntegrationCustomerNo := ContactBusinessRelation."No.";
      END ELSE
        IntegrationCustomerNo := '';
    END;

    LOCAL PROCEDURE TypeOnAfterValidate@19069045();
    BEGIN
      EnableFields;
    END;

    PROCEDURE BuildSearchCandidates@4(VAR searchCandidates@1000 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.StringCollection");
    BEGIN
      IF (Rec.Name <> '') THEN BEGIN
        searchCandidates.Add(Rec.Name);
      END;

      IF (Rec."Search Name" <> '') THEN BEGIN
        searchCandidates.Add(Rec."Search Name");
      END;

      IF (Rec."Name 2" <> '') THEN BEGIN
        searchCandidates.Add(Rec."Name 2");
      END;

      IF (Rec."E-Mail" <> '') THEN BEGIN
        searchCandidates.Add(Rec."E-Mail");
      END;

      IF (Rec."Phone No." <> '') THEN BEGIN
        searchCandidates.Add(Rec."Phone No.");
      END;

      IF (Rec."Fax No." <> '') THEN BEGIN
        searchCandidates.Add(Rec."Fax No.");
      END;
    END;

    EVENT Communication@-13::AddInReady@5();
    BEGIN
      LyncAvailable := TRUE;
    END;

    BEGIN
    END.
  }
}

OBJECT Page 9084 Customer Details FactBox
{
  OBJECT-PROPERTIES
  {
    Date=10/31/12;
    Time=[ 9:24:45 PM];
    Modified=Yes;
    Version List=NAVW17.00,Lync;
  }
  PROPERTIES
  {
    CaptionML=ENU=Customer Details;
    SourceTable=Table18;
    PageType=CardPart;
    OnAfterGetRecord=BEGIN
                       StyleTxt := SetStyle;
                     END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 9       ;1   ;ActionGroup;
                      CaptionML=ENU=Actions;
                      Image=Action }
      { 15      ;2   ;Action    ;
                      CaptionML=ENU=Ship-to Address;
                      RunObject=Page 301;
                      RunPageLink=Customer No.=FIELD(No.) }
      { 21      ;2   ;Action    ;
                      CaptionML=ENU=Comments;
                      RunObject=Page 124;
                      RunPageLink=Table Name=CONST(Customer),
                                  No.=FIELD(No.);
                      Image=ViewComments }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 11  ;1   ;Field     ;
                CaptionML=ENU=Customer No.;
                SourceExpr="No.";
                OnDrillDown=BEGIN
                              ShowDetails;
                            END;
                             }

    { 16  ;1   ;Field     ;
                SourceExpr="Phone No." }

    { 1   ;1   ;Field     ;
                SourceExpr="E-Mail" }

    { 18  ;1   ;Field     ;
                SourceExpr="Fax No." }

    { 3   ;1   ;Field     ;
                SourceExpr="Credit Limit (LCY)";
                StyleExpr=StyleTxt }

    { 2   ;1   ;Field     ;
                Name=AvailableCreditLCY;
                CaptionML=ENU=Available Credit (LCY);
                SourceExpr=CalcAvailableCreditUI;
                OnDrillDown=BEGIN
                              PAGE.RUN(PAGE::"Available Credit",Rec);
                            END;
                             }

    { 5   ;1   ;Field     ;
                SourceExpr="Payment Terms Code" }

    { 7   ;1   ;Field     ;
                SourceExpr=Contact }

    { 6   ;1   ;Field     ;
                Name=Communication;
                SourceExpr=SipAddress;
                ControlAddIn=[LyncCommunicationControlAddIn;PublicKeyToken=48f3911b65e24838] }

  }
  CODE
  {
    VAR
      StyleTxt@1000 : Text;

    PROCEDURE ShowDetails@1102601000();
    BEGIN
      PAGE.RUN(PAGE::"Customer Card",Rec);
    END;

    EVENT Communication@-6::AddInReady@5();
    VAR
      context@1000 : DotNet "'LyncCommunicationAddIn, Version=7.0.0.0, Culture=neutral, PublicKeyToken=48f3911b65e24838'.LyncCommunicationAddIn.AddInControlContext" RUNONCLIENT;
    BEGIN
      CurrPage.Communication.SetAddInControlContext(context.FactBox);
    END;

    BEGIN
    END.
  }
}

OBJECT Page 9093 Vendor Details FactBox
{
  OBJECT-PROPERTIES
  {
    Date=10/31/12;
    Time=[ 9:22:36 PM];
    Modified=Yes;
    Version List=NAVW17.00,Lync;
  }
  PROPERTIES
  {
    CaptionML=ENU=Vendor Details;
    SourceTable=Table23;
    PageType=CardPart;
    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 9       ;1   ;ActionGroup;
                      CaptionML=ENU=Actions;
                      Image=Action }
      { 21      ;2   ;Action    ;
                      CaptionML=ENU=Comments;
                      RunObject=Page 124;
                      RunPageLink=Table Name=CONST(Vendor),
                                  No.=FIELD(No.);
                      Image=ViewComments }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 13  ;1   ;Field     ;
                CaptionML=ENU=Vendor No.;
                SourceExpr="No.";
                OnDrillDown=BEGIN
                              ShowDetails;
                            END;
                             }

    { 1   ;1   ;Field     ;
                SourceExpr=Name }

    { 3   ;1   ;Field     ;
                SourceExpr="Phone No." }

    { 5   ;1   ;Field     ;
                SourceExpr="E-Mail" }

    { 7   ;1   ;Field     ;
                SourceExpr="Fax No." }

    { 11  ;1   ;Field     ;
                SourceExpr=Contact }

    { 4   ;1   ;Field     ;
                Name=Communication;
                SourceExpr=SipAddress;
                ControlAddIn=[LyncCommunicationControlAddIn;PublicKeyToken=48f3911b65e24838] }

  }
  CODE
  {

    PROCEDURE ShowDetails@1102601000();
    BEGIN
      PAGE.RUN(PAGE::"Vendor Card",Rec);
    END;

    EVENT Communication@-4::AddInReady@5();
    VAR
      context@1000 : DotNet "'LyncCommunicationAddIn, Version=7.0.0.0, Culture=neutral, PublicKeyToken=48f3911b65e24838'.LyncCommunicationAddIn.AddInControlContext" RUNONCLIENT;
    BEGIN
      CurrPage.Communication.SetAddInControlContext(context.FactBox);
    END;

    BEGIN
    END.
  }
}

